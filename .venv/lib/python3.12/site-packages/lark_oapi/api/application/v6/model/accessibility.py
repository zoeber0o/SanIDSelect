# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class Accessibility(object):
    _types = {
        "reason": str,
        "state": str,
    }

    def __init__(self, d=None):
        self.reason: Optional[str] = None
        self.state: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "AccessibilityBuilder":
        return AccessibilityBuilder()


class AccessibilityBuilder(object):
    def __init__(self) -> None:
        self._accessibility = Accessibility()

    def reason(self, reason: str) -> "AccessibilityBuilder":
        self._accessibility.reason = reason
        return self

    def state(self, state: str) -> "AccessibilityBuilder":
        self._accessibility.state = state
        return self

    def build(self) -> "Accessibility":
        return self._accessibility
