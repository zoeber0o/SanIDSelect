# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .navigate_meta import NavigateMeta
from .navigate_meta import NavigateMeta


class Navigate(object):
    _types = {
        "pc": NavigateMeta,
        "mobile": NavigateMeta,
    }

    def __init__(self, d=None):
        self.pc: Optional[NavigateMeta] = None
        self.mobile: Optional[NavigateMeta] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "NavigateBuilder":
        return NavigateBuilder()


class NavigateBuilder(object):
    def __init__(self) -> None:
        self._navigate = Navigate()

    def pc(self, pc: NavigateMeta) -> "NavigateBuilder":
        self._navigate.pc = pc
        return self

    def mobile(self, mobile: NavigateMeta) -> "NavigateBuilder":
        self._navigate.mobile = mobile
        return self

    def build(self) -> "Navigate":
        return self._navigate
