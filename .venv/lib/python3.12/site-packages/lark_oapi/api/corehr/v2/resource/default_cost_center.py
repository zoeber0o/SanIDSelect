# Code generated by Lark OpenAPI.

import io
from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.const import UTF_8, CONTENT_TYPE, APPLICATION_JSON
from lark_oapi.core import JSON
from lark_oapi.core.token import verify
from lark_oapi.core.http import Transport
from lark_oapi.core.model import Config, RequestOption, RawResponse
from lark_oapi.core.utils import Files
from requests_toolbelt import MultipartEncoder
from ..model.batch_query_default_cost_center_request import BatchQueryDefaultCostCenterRequest
from ..model.batch_query_default_cost_center_response import BatchQueryDefaultCostCenterResponse
from ..model.create_version_default_cost_center_request import CreateVersionDefaultCostCenterRequest
from ..model.create_version_default_cost_center_response import CreateVersionDefaultCostCenterResponse
from ..model.remove_version_default_cost_center_request import RemoveVersionDefaultCostCenterRequest
from ..model.remove_version_default_cost_center_response import RemoveVersionDefaultCostCenterResponse
from ..model.update_version_default_cost_center_request import UpdateVersionDefaultCostCenterRequest
from ..model.update_version_default_cost_center_response import UpdateVersionDefaultCostCenterResponse


class DefaultCostCenter(object):
    def __init__(self, config: Config) -> None:
        self.config: Config = config

    def batch_query(self, request: BatchQueryDefaultCostCenterRequest,
                    option: Optional[RequestOption] = None) -> BatchQueryDefaultCostCenterResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: BatchQueryDefaultCostCenterResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                       BatchQueryDefaultCostCenterResponse)
        response.raw = resp

        return response

    async def abatch_query(self, request: BatchQueryDefaultCostCenterRequest,
                           option: Optional[RequestOption] = None) -> BatchQueryDefaultCostCenterResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: BatchQueryDefaultCostCenterResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                       BatchQueryDefaultCostCenterResponse)
        response.raw = resp

        return response

    def create_version(self, request: CreateVersionDefaultCostCenterRequest,
                       option: Optional[RequestOption] = None) -> CreateVersionDefaultCostCenterResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: CreateVersionDefaultCostCenterResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                          CreateVersionDefaultCostCenterResponse)
        response.raw = resp

        return response

    async def acreate_version(self, request: CreateVersionDefaultCostCenterRequest,
                              option: Optional[RequestOption] = None) -> CreateVersionDefaultCostCenterResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: CreateVersionDefaultCostCenterResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                          CreateVersionDefaultCostCenterResponse)
        response.raw = resp

        return response

    def remove_version(self, request: RemoveVersionDefaultCostCenterRequest,
                       option: Optional[RequestOption] = None) -> RemoveVersionDefaultCostCenterResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: RemoveVersionDefaultCostCenterResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                          RemoveVersionDefaultCostCenterResponse)
        response.raw = resp

        return response

    async def aremove_version(self, request: RemoveVersionDefaultCostCenterRequest,
                              option: Optional[RequestOption] = None) -> RemoveVersionDefaultCostCenterResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: RemoveVersionDefaultCostCenterResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                          RemoveVersionDefaultCostCenterResponse)
        response.raw = resp

        return response

    def update_version(self, request: UpdateVersionDefaultCostCenterRequest,
                       option: Optional[RequestOption] = None) -> UpdateVersionDefaultCostCenterResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: UpdateVersionDefaultCostCenterResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                          UpdateVersionDefaultCostCenterResponse)
        response.raw = resp

        return response

    async def aupdate_version(self, request: UpdateVersionDefaultCostCenterRequest,
                              option: Optional[RequestOption] = None) -> UpdateVersionDefaultCostCenterResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: UpdateVersionDefaultCostCenterResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                          UpdateVersionDefaultCostCenterResponse)
        response.raw = resp

        return response
