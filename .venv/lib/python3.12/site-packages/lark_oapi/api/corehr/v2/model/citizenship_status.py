# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .i18n import I18n
from .i18n import I18n


class CitizenshipStatus(object):
    _types = {
        "id": str,
        "country_region_id": str,
        "active": bool,
        "name": List[I18n],
        "citizenship_status": List[I18n],
        "view_order": int,
    }

    def __init__(self, d=None):
        self.id: Optional[str] = None
        self.country_region_id: Optional[str] = None
        self.active: Optional[bool] = None
        self.name: Optional[List[I18n]] = None
        self.citizenship_status: Optional[List[I18n]] = None
        self.view_order: Optional[int] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "CitizenshipStatusBuilder":
        return CitizenshipStatusBuilder()


class CitizenshipStatusBuilder(object):
    def __init__(self) -> None:
        self._citizenship_status = CitizenshipStatus()

    def id(self, id: str) -> "CitizenshipStatusBuilder":
        self._citizenship_status.id = id
        return self

    def country_region_id(self, country_region_id: str) -> "CitizenshipStatusBuilder":
        self._citizenship_status.country_region_id = country_region_id
        return self

    def active(self, active: bool) -> "CitizenshipStatusBuilder":
        self._citizenship_status.active = active
        return self

    def name(self, name: List[I18n]) -> "CitizenshipStatusBuilder":
        self._citizenship_status.name = name
        return self

    def citizenship_status(self, citizenship_status: List[I18n]) -> "CitizenshipStatusBuilder":
        self._citizenship_status.citizenship_status = citizenship_status
        return self

    def view_order(self, view_order: int) -> "CitizenshipStatusBuilder":
        self._citizenship_status.view_order = view_order
        return self

    def build(self) -> "CitizenshipStatus":
        return self._citizenship_status
