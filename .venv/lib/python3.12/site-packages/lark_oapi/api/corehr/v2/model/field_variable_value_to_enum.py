# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .field_variable_value_i18n import FieldVariableValueI18n


class FieldVariableValueToEnum(object):
    _types = {
        "value": str,
        "name": FieldVariableValueI18n,
    }

    def __init__(self, d=None):
        self.value: Optional[str] = None
        self.name: Optional[FieldVariableValueI18n] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "FieldVariableValueToEnumBuilder":
        return FieldVariableValueToEnumBuilder()


class FieldVariableValueToEnumBuilder(object):
    def __init__(self) -> None:
        self._field_variable_value_to_enum = FieldVariableValueToEnum()

    def value(self, value: str) -> "FieldVariableValueToEnumBuilder":
        self._field_variable_value_to_enum.value = value
        return self

    def name(self, name: FieldVariableValueI18n) -> "FieldVariableValueToEnumBuilder":
        self._field_variable_value_to_enum.name = name
        return self

    def build(self) -> "FieldVariableValueToEnum":
        return self._field_variable_value_to_enum
