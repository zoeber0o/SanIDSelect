# Code generated by Lark OpenAPI.

import io
from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.const import UTF_8, CONTENT_TYPE, APPLICATION_JSON
from lark_oapi.core import JSON
from lark_oapi.core.token import verify
from lark_oapi.core.http import Transport
from lark_oapi.core.model import Config, RequestOption, RawResponse
from lark_oapi.core.utils import Files
from requests_toolbelt import MultipartEncoder
from ..model.edit_offboarding_request import EditOffboardingRequest
from ..model.edit_offboarding_response import EditOffboardingResponse
from ..model.revoke_offboarding_request import RevokeOffboardingRequest
from ..model.revoke_offboarding_response import RevokeOffboardingResponse
from ..model.submit_v2_offboarding_request import SubmitV2OffboardingRequest
from ..model.submit_v2_offboarding_response import SubmitV2OffboardingResponse


class Offboarding(object):
    def __init__(self, config: Config) -> None:
        self.config: Config = config

    def edit(self, request: EditOffboardingRequest, option: Optional[RequestOption] = None) -> EditOffboardingResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: EditOffboardingResponse = JSON.unmarshal(str(resp.content, UTF_8), EditOffboardingResponse)
        response.raw = resp

        return response

    async def aedit(self, request: EditOffboardingRequest,
                    option: Optional[RequestOption] = None) -> EditOffboardingResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: EditOffboardingResponse = JSON.unmarshal(str(resp.content, UTF_8), EditOffboardingResponse)
        response.raw = resp

        return response

    def revoke(self, request: RevokeOffboardingRequest,
               option: Optional[RequestOption] = None) -> RevokeOffboardingResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: RevokeOffboardingResponse = JSON.unmarshal(str(resp.content, UTF_8), RevokeOffboardingResponse)
        response.raw = resp

        return response

    async def arevoke(self, request: RevokeOffboardingRequest,
                      option: Optional[RequestOption] = None) -> RevokeOffboardingResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: RevokeOffboardingResponse = JSON.unmarshal(str(resp.content, UTF_8), RevokeOffboardingResponse)
        response.raw = resp

        return response

    def submit_v2(self, request: SubmitV2OffboardingRequest,
                  option: Optional[RequestOption] = None) -> SubmitV2OffboardingResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: SubmitV2OffboardingResponse = JSON.unmarshal(str(resp.content, UTF_8), SubmitV2OffboardingResponse)
        response.raw = resp

        return response

    async def asubmit_v2(self, request: SubmitV2OffboardingRequest,
                         option: Optional[RequestOption] = None) -> SubmitV2OffboardingResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: SubmitV2OffboardingResponse = JSON.unmarshal(str(resp.content, UTF_8), SubmitV2OffboardingResponse)
        response.raw = resp

        return response
