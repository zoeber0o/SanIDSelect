# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .process_form_variable_v2 import ProcessFormVariableV2


class StartProcessParam(object):
    _types = {
        "flow_definition_id": str,
        "initiator_id": str,
        "system_initiator": bool,
        "flow_data": List[ProcessFormVariableV2],
    }

    def __init__(self, d=None):
        self.flow_definition_id: Optional[str] = None
        self.initiator_id: Optional[str] = None
        self.system_initiator: Optional[bool] = None
        self.flow_data: Optional[List[ProcessFormVariableV2]] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "StartProcessParamBuilder":
        return StartProcessParamBuilder()


class StartProcessParamBuilder(object):
    def __init__(self) -> None:
        self._start_process_param = StartProcessParam()

    def flow_definition_id(self, flow_definition_id: str) -> "StartProcessParamBuilder":
        self._start_process_param.flow_definition_id = flow_definition_id
        return self

    def initiator_id(self, initiator_id: str) -> "StartProcessParamBuilder":
        self._start_process_param.initiator_id = initiator_id
        return self

    def system_initiator(self, system_initiator: bool) -> "StartProcessParamBuilder":
        self._start_process_param.system_initiator = system_initiator
        return self

    def flow_data(self, flow_data: List[ProcessFormVariableV2]) -> "StartProcessParamBuilder":
        self._start_process_param.flow_data = flow_data
        return self

    def build(self) -> "StartProcessParam":
        return self._start_process_param
