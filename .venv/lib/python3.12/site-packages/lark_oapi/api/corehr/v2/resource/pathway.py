# Code generated by Lark OpenAPI.

import io
from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.const import UTF_8, CONTENT_TYPE, APPLICATION_JSON
from lark_oapi.core import JSON
from lark_oapi.core.token import verify
from lark_oapi.core.http import Transport
from lark_oapi.core.model import Config, RequestOption, RawResponse
from lark_oapi.core.utils import Files
from requests_toolbelt import MultipartEncoder
from ..model.active_pathway_request import ActivePathwayRequest
from ..model.active_pathway_response import ActivePathwayResponse
from ..model.batch_get_pathway_request import BatchGetPathwayRequest
from ..model.batch_get_pathway_response import BatchGetPathwayResponse
from ..model.create_pathway_request import CreatePathwayRequest
from ..model.create_pathway_response import CreatePathwayResponse
from ..model.delete_pathway_request import DeletePathwayRequest
from ..model.delete_pathway_response import DeletePathwayResponse
from ..model.patch_pathway_request import PatchPathwayRequest
from ..model.patch_pathway_response import PatchPathwayResponse


class Pathway(object):
    def __init__(self, config: Config) -> None:
        self.config: Config = config

    def active(self, request: ActivePathwayRequest, option: Optional[RequestOption] = None) -> ActivePathwayResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: ActivePathwayResponse = JSON.unmarshal(str(resp.content, UTF_8), ActivePathwayResponse)
        response.raw = resp

        return response

    async def aactive(self, request: ActivePathwayRequest,
                      option: Optional[RequestOption] = None) -> ActivePathwayResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: ActivePathwayResponse = JSON.unmarshal(str(resp.content, UTF_8), ActivePathwayResponse)
        response.raw = resp

        return response

    def batch_get(self, request: BatchGetPathwayRequest,
                  option: Optional[RequestOption] = None) -> BatchGetPathwayResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: BatchGetPathwayResponse = JSON.unmarshal(str(resp.content, UTF_8), BatchGetPathwayResponse)
        response.raw = resp

        return response

    async def abatch_get(self, request: BatchGetPathwayRequest,
                         option: Optional[RequestOption] = None) -> BatchGetPathwayResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: BatchGetPathwayResponse = JSON.unmarshal(str(resp.content, UTF_8), BatchGetPathwayResponse)
        response.raw = resp

        return response

    def create(self, request: CreatePathwayRequest, option: Optional[RequestOption] = None) -> CreatePathwayResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: CreatePathwayResponse = JSON.unmarshal(str(resp.content, UTF_8), CreatePathwayResponse)
        response.raw = resp

        return response

    async def acreate(self, request: CreatePathwayRequest,
                      option: Optional[RequestOption] = None) -> CreatePathwayResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: CreatePathwayResponse = JSON.unmarshal(str(resp.content, UTF_8), CreatePathwayResponse)
        response.raw = resp

        return response

    def delete(self, request: DeletePathwayRequest, option: Optional[RequestOption] = None) -> DeletePathwayResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: DeletePathwayResponse = JSON.unmarshal(str(resp.content, UTF_8), DeletePathwayResponse)
        response.raw = resp

        return response

    async def adelete(self, request: DeletePathwayRequest,
                      option: Optional[RequestOption] = None) -> DeletePathwayResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: DeletePathwayResponse = JSON.unmarshal(str(resp.content, UTF_8), DeletePathwayResponse)
        response.raw = resp

        return response

    def patch(self, request: PatchPathwayRequest, option: Optional[RequestOption] = None) -> PatchPathwayResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: PatchPathwayResponse = JSON.unmarshal(str(resp.content, UTF_8), PatchPathwayResponse)
        response.raw = resp

        return response

    async def apatch(self, request: PatchPathwayRequest,
                     option: Optional[RequestOption] = None) -> PatchPathwayResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: PatchPathwayResponse = JSON.unmarshal(str(resp.content, UTF_8), PatchPathwayResponse)
        response.raw = resp

        return response
