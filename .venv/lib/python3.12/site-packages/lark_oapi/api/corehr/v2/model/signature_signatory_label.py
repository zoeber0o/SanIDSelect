# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .enum import Enum
from .i18n import I18n


class SignatureSignatoryLabel(object):
    _types = {
        "template_signatory_type": Enum,
        "label": List[I18n],
        "apiname": str,
    }

    def __init__(self, d=None):
        self.template_signatory_type: Optional[Enum] = None
        self.label: Optional[List[I18n]] = None
        self.apiname: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "SignatureSignatoryLabelBuilder":
        return SignatureSignatoryLabelBuilder()


class SignatureSignatoryLabelBuilder(object):
    def __init__(self) -> None:
        self._signature_signatory_label = SignatureSignatoryLabel()

    def template_signatory_type(self, template_signatory_type: Enum) -> "SignatureSignatoryLabelBuilder":
        self._signature_signatory_label.template_signatory_type = template_signatory_type
        return self

    def label(self, label: List[I18n]) -> "SignatureSignatoryLabelBuilder":
        self._signature_signatory_label.label = label
        return self

    def apiname(self, apiname: str) -> "SignatureSignatoryLabelBuilder":
        self._signature_signatory_label.apiname = apiname
        return self

    def build(self) -> "SignatureSignatoryLabel":
        return self._signature_signatory_label
