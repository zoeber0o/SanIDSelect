# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .i18n import I18n
from .i18n import I18n
from .org_role_update import OrgRoleUpdate
from .match_rules import MatchRules
from .custom_field_data import CustomFieldData


class CustomOrgCreate(object):
    _types = {
        "object_api_name": str,
        "names": List[I18n],
        "code": str,
        "parent_id": str,
        "manager_ids": List[str],
        "description": List[I18n],
        "effective_time": str,
        "org_roles": List[OrgRoleUpdate],
        "match_rule_groups": List[MatchRules],
        "custom_fields": List[CustomFieldData],
    }

    def __init__(self, d=None):
        self.object_api_name: Optional[str] = None
        self.names: Optional[List[I18n]] = None
        self.code: Optional[str] = None
        self.parent_id: Optional[str] = None
        self.manager_ids: Optional[List[str]] = None
        self.description: Optional[List[I18n]] = None
        self.effective_time: Optional[str] = None
        self.org_roles: Optional[List[OrgRoleUpdate]] = None
        self.match_rule_groups: Optional[List[MatchRules]] = None
        self.custom_fields: Optional[List[CustomFieldData]] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "CustomOrgCreateBuilder":
        return CustomOrgCreateBuilder()


class CustomOrgCreateBuilder(object):
    def __init__(self) -> None:
        self._custom_org_create = CustomOrgCreate()

    def object_api_name(self, object_api_name: str) -> "CustomOrgCreateBuilder":
        self._custom_org_create.object_api_name = object_api_name
        return self

    def names(self, names: List[I18n]) -> "CustomOrgCreateBuilder":
        self._custom_org_create.names = names
        return self

    def code(self, code: str) -> "CustomOrgCreateBuilder":
        self._custom_org_create.code = code
        return self

    def parent_id(self, parent_id: str) -> "CustomOrgCreateBuilder":
        self._custom_org_create.parent_id = parent_id
        return self

    def manager_ids(self, manager_ids: List[str]) -> "CustomOrgCreateBuilder":
        self._custom_org_create.manager_ids = manager_ids
        return self

    def description(self, description: List[I18n]) -> "CustomOrgCreateBuilder":
        self._custom_org_create.description = description
        return self

    def effective_time(self, effective_time: str) -> "CustomOrgCreateBuilder":
        self._custom_org_create.effective_time = effective_time
        return self

    def org_roles(self, org_roles: List[OrgRoleUpdate]) -> "CustomOrgCreateBuilder":
        self._custom_org_create.org_roles = org_roles
        return self

    def match_rule_groups(self, match_rule_groups: List[MatchRules]) -> "CustomOrgCreateBuilder":
        self._custom_org_create.match_rule_groups = match_rule_groups
        return self

    def custom_fields(self, custom_fields: List[CustomFieldData]) -> "CustomOrgCreateBuilder":
        self._custom_org_create.custom_fields = custom_fields
        return self

    def build(self) -> "CustomOrgCreate":
        return self._custom_org_create
