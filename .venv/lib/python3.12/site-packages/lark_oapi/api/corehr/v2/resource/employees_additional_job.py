# Code generated by Lark OpenAPI.

import io
from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.const import UTF_8, CONTENT_TYPE, APPLICATION_JSON
from lark_oapi.core import JSON
from lark_oapi.core.token import verify
from lark_oapi.core.http import Transport
from lark_oapi.core.model import Config, RequestOption, RawResponse
from lark_oapi.core.utils import Files
from requests_toolbelt import MultipartEncoder
from ..model.batch_employees_additional_job_request import BatchEmployeesAdditionalJobRequest
from ..model.batch_employees_additional_job_response import BatchEmployeesAdditionalJobResponse
from ..model.create_employees_additional_job_request import CreateEmployeesAdditionalJobRequest
from ..model.create_employees_additional_job_response import CreateEmployeesAdditionalJobResponse
from ..model.delete_employees_additional_job_request import DeleteEmployeesAdditionalJobRequest
from ..model.delete_employees_additional_job_response import DeleteEmployeesAdditionalJobResponse
from ..model.patch_employees_additional_job_request import PatchEmployeesAdditionalJobRequest
from ..model.patch_employees_additional_job_response import PatchEmployeesAdditionalJobResponse


class EmployeesAdditionalJob(object):
    def __init__(self, config: Config) -> None:
        self.config: Config = config

    def batch(self, request: BatchEmployeesAdditionalJobRequest,
              option: Optional[RequestOption] = None) -> BatchEmployeesAdditionalJobResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: BatchEmployeesAdditionalJobResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                       BatchEmployeesAdditionalJobResponse)
        response.raw = resp

        return response

    async def abatch(self, request: BatchEmployeesAdditionalJobRequest,
                     option: Optional[RequestOption] = None) -> BatchEmployeesAdditionalJobResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: BatchEmployeesAdditionalJobResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                       BatchEmployeesAdditionalJobResponse)
        response.raw = resp

        return response

    def create(self, request: CreateEmployeesAdditionalJobRequest,
               option: Optional[RequestOption] = None) -> CreateEmployeesAdditionalJobResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: CreateEmployeesAdditionalJobResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                        CreateEmployeesAdditionalJobResponse)
        response.raw = resp

        return response

    async def acreate(self, request: CreateEmployeesAdditionalJobRequest,
                      option: Optional[RequestOption] = None) -> CreateEmployeesAdditionalJobResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: CreateEmployeesAdditionalJobResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                        CreateEmployeesAdditionalJobResponse)
        response.raw = resp

        return response

    def delete(self, request: DeleteEmployeesAdditionalJobRequest,
               option: Optional[RequestOption] = None) -> DeleteEmployeesAdditionalJobResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: DeleteEmployeesAdditionalJobResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                        DeleteEmployeesAdditionalJobResponse)
        response.raw = resp

        return response

    async def adelete(self, request: DeleteEmployeesAdditionalJobRequest,
                      option: Optional[RequestOption] = None) -> DeleteEmployeesAdditionalJobResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: DeleteEmployeesAdditionalJobResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                        DeleteEmployeesAdditionalJobResponse)
        response.raw = resp

        return response

    def patch(self, request: PatchEmployeesAdditionalJobRequest,
              option: Optional[RequestOption] = None) -> PatchEmployeesAdditionalJobResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: PatchEmployeesAdditionalJobResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                       PatchEmployeesAdditionalJobResponse)
        response.raw = resp

        return response

    async def apatch(self, request: PatchEmployeesAdditionalJobRequest,
                     option: Optional[RequestOption] = None) -> PatchEmployeesAdditionalJobResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: PatchEmployeesAdditionalJobResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                       PatchEmployeesAdditionalJobResponse)
        response.raw = resp

        return response
