# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class TalentPoolMemberOpRespItem(object):
    _types = {
        "employment_id": str,
        "talent_pool_ref": str,
        "success": bool,
        "err_msg": str,
        "err_code": int,
    }

    def __init__(self, d=None):
        self.employment_id: Optional[str] = None
        self.talent_pool_ref: Optional[str] = None
        self.success: Optional[bool] = None
        self.err_msg: Optional[str] = None
        self.err_code: Optional[int] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "TalentPoolMemberOpRespItemBuilder":
        return TalentPoolMemberOpRespItemBuilder()


class TalentPoolMemberOpRespItemBuilder(object):
    def __init__(self) -> None:
        self._talent_pool_member_op_resp_item = TalentPoolMemberOpRespItem()

    def employment_id(self, employment_id: str) -> "TalentPoolMemberOpRespItemBuilder":
        self._talent_pool_member_op_resp_item.employment_id = employment_id
        return self

    def talent_pool_ref(self, talent_pool_ref: str) -> "TalentPoolMemberOpRespItemBuilder":
        self._talent_pool_member_op_resp_item.talent_pool_ref = talent_pool_ref
        return self

    def success(self, success: bool) -> "TalentPoolMemberOpRespItemBuilder":
        self._talent_pool_member_op_resp_item.success = success
        return self

    def err_msg(self, err_msg: str) -> "TalentPoolMemberOpRespItemBuilder":
        self._talent_pool_member_op_resp_item.err_msg = err_msg
        return self

    def err_code(self, err_code: int) -> "TalentPoolMemberOpRespItemBuilder":
        self._talent_pool_member_op_resp_item.err_code = err_code
        return self

    def build(self) -> "TalentPoolMemberOpRespItem":
        return self._talent_pool_member_op_resp_item
