# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .dataengine_i18n import DataengineI18n
from .dataengine_i18n import DataengineI18n


class ProcessAbstractItem(object):
    _types = {
        "name": DataengineI18n,
        "value": DataengineI18n,
    }

    def __init__(self, d=None):
        self.name: Optional[DataengineI18n] = None
        self.value: Optional[DataengineI18n] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "ProcessAbstractItemBuilder":
        return ProcessAbstractItemBuilder()


class ProcessAbstractItemBuilder(object):
    def __init__(self) -> None:
        self._process_abstract_item = ProcessAbstractItem()

    def name(self, name: DataengineI18n) -> "ProcessAbstractItemBuilder":
        self._process_abstract_item.name = name
        return self

    def value(self, value: DataengineI18n) -> "ProcessAbstractItemBuilder":
        self._process_abstract_item.value = value
        return self

    def build(self) -> "ProcessAbstractItem":
        return self._process_abstract_item
