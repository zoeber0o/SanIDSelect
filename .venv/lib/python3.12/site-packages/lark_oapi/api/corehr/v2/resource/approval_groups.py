# Code generated by Lark OpenAPI.

import io
from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.const import UTF_8, CONTENT_TYPE, APPLICATION_JSON
from lark_oapi.core import JSON
from lark_oapi.core.token import verify
from lark_oapi.core.http import Transport
from lark_oapi.core.model import Config, RequestOption, RawResponse
from lark_oapi.core.utils import Files
from requests_toolbelt import MultipartEncoder
from ..model.get_approval_groups_request import GetApprovalGroupsRequest
from ..model.get_approval_groups_response import GetApprovalGroupsResponse
from ..model.open_query_department_change_list_by_ids_approval_groups_request import \
    OpenQueryDepartmentChangeListByIdsApprovalGroupsRequest
from ..model.open_query_department_change_list_by_ids_approval_groups_response import \
    OpenQueryDepartmentChangeListByIdsApprovalGroupsResponse
from ..model.open_query_job_change_list_by_ids_approval_groups_request import \
    OpenQueryJobChangeListByIdsApprovalGroupsRequest
from ..model.open_query_job_change_list_by_ids_approval_groups_response import \
    OpenQueryJobChangeListByIdsApprovalGroupsResponse


class ApprovalGroups(object):
    def __init__(self, config: Config) -> None:
        self.config: Config = config

    def get(self, request: GetApprovalGroupsRequest,
            option: Optional[RequestOption] = None) -> GetApprovalGroupsResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: GetApprovalGroupsResponse = JSON.unmarshal(str(resp.content, UTF_8), GetApprovalGroupsResponse)
        response.raw = resp

        return response

    async def aget(self, request: GetApprovalGroupsRequest,
                   option: Optional[RequestOption] = None) -> GetApprovalGroupsResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: GetApprovalGroupsResponse = JSON.unmarshal(str(resp.content, UTF_8), GetApprovalGroupsResponse)
        response.raw = resp

        return response

    def open_query_department_change_list_by_ids(self, request: OpenQueryDepartmentChangeListByIdsApprovalGroupsRequest,
                                                 option: Optional[
                                                     RequestOption] = None) -> OpenQueryDepartmentChangeListByIdsApprovalGroupsResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: OpenQueryDepartmentChangeListByIdsApprovalGroupsResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                                            OpenQueryDepartmentChangeListByIdsApprovalGroupsResponse)
        response.raw = resp

        return response

    async def aopen_query_department_change_list_by_ids(self,
                                                        request: OpenQueryDepartmentChangeListByIdsApprovalGroupsRequest,
                                                        option: Optional[
                                                            RequestOption] = None) -> OpenQueryDepartmentChangeListByIdsApprovalGroupsResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: OpenQueryDepartmentChangeListByIdsApprovalGroupsResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                                            OpenQueryDepartmentChangeListByIdsApprovalGroupsResponse)
        response.raw = resp

        return response

    def open_query_job_change_list_by_ids(self, request: OpenQueryJobChangeListByIdsApprovalGroupsRequest,
                                          option: Optional[
                                              RequestOption] = None) -> OpenQueryJobChangeListByIdsApprovalGroupsResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: OpenQueryJobChangeListByIdsApprovalGroupsResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                                     OpenQueryJobChangeListByIdsApprovalGroupsResponse)
        response.raw = resp

        return response

    async def aopen_query_job_change_list_by_ids(self, request: OpenQueryJobChangeListByIdsApprovalGroupsRequest,
                                                 option: Optional[
                                                     RequestOption] = None) -> OpenQueryJobChangeListByIdsApprovalGroupsResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: OpenQueryJobChangeListByIdsApprovalGroupsResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                                     OpenQueryJobChangeListByIdsApprovalGroupsResponse)
        response.raw = resp

        return response
