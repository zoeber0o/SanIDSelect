# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class OrgroleAssignmentOrg(object):
    _types = {
        "org_id": str,
        "org_type": str,
        "org_name": str,
    }

    def __init__(self, d=None):
        self.org_id: Optional[str] = None
        self.org_type: Optional[str] = None
        self.org_name: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "OrgroleAssignmentOrgBuilder":
        return OrgroleAssignmentOrgBuilder()


class OrgroleAssignmentOrgBuilder(object):
    def __init__(self) -> None:
        self._orgrole_assignment_org = OrgroleAssignmentOrg()

    def org_id(self, org_id: str) -> "OrgroleAssignmentOrgBuilder":
        self._orgrole_assignment_org.org_id = org_id
        return self

    def org_type(self, org_type: str) -> "OrgroleAssignmentOrgBuilder":
        self._orgrole_assignment_org.org_type = org_type
        return self

    def org_name(self, org_name: str) -> "OrgroleAssignmentOrgBuilder":
        self._orgrole_assignment_org.org_name = org_name
        return self

    def build(self) -> "OrgroleAssignmentOrg":
        return self._orgrole_assignment_org
