# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .i18n import I18n
from .signature_template_filter_item import SignatureTemplateFilterItem
from .enum import Enum


class SignatureTemplateFilter(object):
    _types = {
        "label": List[I18n],
        "apiname": str,
        "filters": List[SignatureTemplateFilterItem],
        "logic": Enum,
        "is_checked": bool,
        "filter_desc": str,
        "criterion_list": str,
    }

    def __init__(self, d=None):
        self.label: Optional[List[I18n]] = None
        self.apiname: Optional[str] = None
        self.filters: Optional[List[SignatureTemplateFilterItem]] = None
        self.logic: Optional[Enum] = None
        self.is_checked: Optional[bool] = None
        self.filter_desc: Optional[str] = None
        self.criterion_list: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "SignatureTemplateFilterBuilder":
        return SignatureTemplateFilterBuilder()


class SignatureTemplateFilterBuilder(object):
    def __init__(self) -> None:
        self._signature_template_filter = SignatureTemplateFilter()

    def label(self, label: List[I18n]) -> "SignatureTemplateFilterBuilder":
        self._signature_template_filter.label = label
        return self

    def apiname(self, apiname: str) -> "SignatureTemplateFilterBuilder":
        self._signature_template_filter.apiname = apiname
        return self

    def filters(self, filters: List[SignatureTemplateFilterItem]) -> "SignatureTemplateFilterBuilder":
        self._signature_template_filter.filters = filters
        return self

    def logic(self, logic: Enum) -> "SignatureTemplateFilterBuilder":
        self._signature_template_filter.logic = logic
        return self

    def is_checked(self, is_checked: bool) -> "SignatureTemplateFilterBuilder":
        self._signature_template_filter.is_checked = is_checked
        return self

    def filter_desc(self, filter_desc: str) -> "SignatureTemplateFilterBuilder":
        self._signature_template_filter.filter_desc = filter_desc
        return self

    def criterion_list(self, criterion_list: str) -> "SignatureTemplateFilterBuilder":
        self._signature_template_filter.criterion_list = criterion_list
        return self

    def build(self) -> "SignatureTemplateFilter":
        return self._signature_template_filter
