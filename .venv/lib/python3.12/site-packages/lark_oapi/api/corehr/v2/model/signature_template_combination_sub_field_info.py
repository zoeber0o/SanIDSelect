# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .enum import Enum
from .signature_template_common_field_info import SignatureTemplateCommonFieldInfo
from .i18n import I18n


class SignatureTemplateCombinationSubFieldInfo(object):
    _types = {
        "field_type": Enum,
        "info": SignatureTemplateCommonFieldInfo,
        "label": List[I18n],
    }

    def __init__(self, d=None):
        self.field_type: Optional[Enum] = None
        self.info: Optional[SignatureTemplateCommonFieldInfo] = None
        self.label: Optional[List[I18n]] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "SignatureTemplateCombinationSubFieldInfoBuilder":
        return SignatureTemplateCombinationSubFieldInfoBuilder()


class SignatureTemplateCombinationSubFieldInfoBuilder(object):
    def __init__(self) -> None:
        self._signature_template_combination_sub_field_info = SignatureTemplateCombinationSubFieldInfo()

    def field_type(self, field_type: Enum) -> "SignatureTemplateCombinationSubFieldInfoBuilder":
        self._signature_template_combination_sub_field_info.field_type = field_type
        return self

    def info(self, info: SignatureTemplateCommonFieldInfo) -> "SignatureTemplateCombinationSubFieldInfoBuilder":
        self._signature_template_combination_sub_field_info.info = info
        return self

    def label(self, label: List[I18n]) -> "SignatureTemplateCombinationSubFieldInfoBuilder":
        self._signature_template_combination_sub_field_info.label = label
        return self

    def build(self) -> "SignatureTemplateCombinationSubFieldInfo":
        return self._signature_template_combination_sub_field_info
