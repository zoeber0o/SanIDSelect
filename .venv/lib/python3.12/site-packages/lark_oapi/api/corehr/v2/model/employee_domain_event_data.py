# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class EmployeeDomainEventData(object):
    _types = {
        "id": str,
        "entity": str,
        "agg_entity": str,
        "agg_entity_id": str,
        "opt_type": int,
        "fields": List[str],
    }

    def __init__(self, d=None):
        self.id: Optional[str] = None
        self.entity: Optional[str] = None
        self.agg_entity: Optional[str] = None
        self.agg_entity_id: Optional[str] = None
        self.opt_type: Optional[int] = None
        self.fields: Optional[List[str]] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "EmployeeDomainEventDataBuilder":
        return EmployeeDomainEventDataBuilder()


class EmployeeDomainEventDataBuilder(object):
    def __init__(self) -> None:
        self._employee_domain_event_data = EmployeeDomainEventData()

    def id(self, id: str) -> "EmployeeDomainEventDataBuilder":
        self._employee_domain_event_data.id = id
        return self

    def entity(self, entity: str) -> "EmployeeDomainEventDataBuilder":
        self._employee_domain_event_data.entity = entity
        return self

    def agg_entity(self, agg_entity: str) -> "EmployeeDomainEventDataBuilder":
        self._employee_domain_event_data.agg_entity = agg_entity
        return self

    def agg_entity_id(self, agg_entity_id: str) -> "EmployeeDomainEventDataBuilder":
        self._employee_domain_event_data.agg_entity_id = agg_entity_id
        return self

    def opt_type(self, opt_type: int) -> "EmployeeDomainEventDataBuilder":
        self._employee_domain_event_data.opt_type = opt_type
        return self

    def fields(self, fields: List[str]) -> "EmployeeDomainEventDataBuilder":
        self._employee_domain_event_data.fields = fields
        return self

    def build(self) -> "EmployeeDomainEventData":
        return self._employee_domain_event_data
