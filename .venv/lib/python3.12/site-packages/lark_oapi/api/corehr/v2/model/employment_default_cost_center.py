# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .enum import Enum


class EmploymentDefaultCostCenter(object):
    _types = {
        "wk_id": str,
        "wk_tid": str,
        "effective_time": str,
        "cost_center_id": str,
        "job_data_id": str,
        "is_inherit": bool,
        "inherit_source": Enum,
        "reason": str,
    }

    def __init__(self, d=None):
        self.wk_id: Optional[str] = None
        self.wk_tid: Optional[str] = None
        self.effective_time: Optional[str] = None
        self.cost_center_id: Optional[str] = None
        self.job_data_id: Optional[str] = None
        self.is_inherit: Optional[bool] = None
        self.inherit_source: Optional[Enum] = None
        self.reason: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "EmploymentDefaultCostCenterBuilder":
        return EmploymentDefaultCostCenterBuilder()


class EmploymentDefaultCostCenterBuilder(object):
    def __init__(self) -> None:
        self._employment_default_cost_center = EmploymentDefaultCostCenter()

    def wk_id(self, wk_id: str) -> "EmploymentDefaultCostCenterBuilder":
        self._employment_default_cost_center.wk_id = wk_id
        return self

    def wk_tid(self, wk_tid: str) -> "EmploymentDefaultCostCenterBuilder":
        self._employment_default_cost_center.wk_tid = wk_tid
        return self

    def effective_time(self, effective_time: str) -> "EmploymentDefaultCostCenterBuilder":
        self._employment_default_cost_center.effective_time = effective_time
        return self

    def cost_center_id(self, cost_center_id: str) -> "EmploymentDefaultCostCenterBuilder":
        self._employment_default_cost_center.cost_center_id = cost_center_id
        return self

    def job_data_id(self, job_data_id: str) -> "EmploymentDefaultCostCenterBuilder":
        self._employment_default_cost_center.job_data_id = job_data_id
        return self

    def is_inherit(self, is_inherit: bool) -> "EmploymentDefaultCostCenterBuilder":
        self._employment_default_cost_center.is_inherit = is_inherit
        return self

    def inherit_source(self, inherit_source: Enum) -> "EmploymentDefaultCostCenterBuilder":
        self._employment_default_cost_center.inherit_source = inherit_source
        return self

    def reason(self, reason: str) -> "EmploymentDefaultCostCenterBuilder":
        self._employment_default_cost_center.reason = reason
        return self

    def build(self) -> "EmploymentDefaultCostCenter":
        return self._employment_default_cost_center
