# Code generated by Lark OpenAPI.

import io
from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.const import UTF_8, CONTENT_TYPE, APPLICATION_JSON
from lark_oapi.core import JSON
from lark_oapi.core.token import verify
from lark_oapi.core.http import Transport
from lark_oapi.core.model import Config, RequestOption, RawResponse
from lark_oapi.core.utils import Files
from requests_toolbelt import MultipartEncoder
from ..model.batch_get_employee_request import BatchGetEmployeeRequest
from ..model.batch_get_employee_response import BatchGetEmployeeResponse
from ..model.create_employee_request import CreateEmployeeRequest
from ..model.create_employee_response import CreateEmployeeResponse
from ..model.search_employee_request import SearchEmployeeRequest
from ..model.search_employee_response import SearchEmployeeResponse


class Employee(object):
    def __init__(self, config: Config) -> None:
        self.config: Config = config

    def batch_get(self, request: BatchGetEmployeeRequest,
                  option: Optional[RequestOption] = None) -> BatchGetEmployeeResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: BatchGetEmployeeResponse = JSON.unmarshal(str(resp.content, UTF_8), BatchGetEmployeeResponse)
        response.raw = resp

        return response

    async def abatch_get(self, request: BatchGetEmployeeRequest,
                         option: Optional[RequestOption] = None) -> BatchGetEmployeeResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: BatchGetEmployeeResponse = JSON.unmarshal(str(resp.content, UTF_8), BatchGetEmployeeResponse)
        response.raw = resp

        return response

    def create(self, request: CreateEmployeeRequest, option: Optional[RequestOption] = None) -> CreateEmployeeResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: CreateEmployeeResponse = JSON.unmarshal(str(resp.content, UTF_8), CreateEmployeeResponse)
        response.raw = resp

        return response

    async def acreate(self, request: CreateEmployeeRequest,
                      option: Optional[RequestOption] = None) -> CreateEmployeeResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: CreateEmployeeResponse = JSON.unmarshal(str(resp.content, UTF_8), CreateEmployeeResponse)
        response.raw = resp

        return response

    def search(self, request: SearchEmployeeRequest, option: Optional[RequestOption] = None) -> SearchEmployeeResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: SearchEmployeeResponse = JSON.unmarshal(str(resp.content, UTF_8), SearchEmployeeResponse)
        response.raw = resp

        return response

    async def asearch(self, request: SearchEmployeeRequest,
                      option: Optional[RequestOption] = None) -> SearchEmployeeResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: SearchEmployeeResponse = JSON.unmarshal(str(resp.content, UTF_8), SearchEmployeeResponse)
        response.raw = resp

        return response
