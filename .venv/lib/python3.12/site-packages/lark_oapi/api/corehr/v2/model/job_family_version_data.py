# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .i18n import I18n
from .i18n import I18n


class JobFamilyVersionData(object):
    _types = {
        "job_family_id": str,
        "job_family_version_id": str,
        "job_family_names": List[I18n],
        "effective_date": str,
        "expiration_date": str,
        "active": bool,
        "descriptions": List[I18n],
        "selectable": bool,
        "parent_job_family_id": str,
        "pathway_ids": List[str],
        "code": str,
    }

    def __init__(self, d=None):
        self.job_family_id: Optional[str] = None
        self.job_family_version_id: Optional[str] = None
        self.job_family_names: Optional[List[I18n]] = None
        self.effective_date: Optional[str] = None
        self.expiration_date: Optional[str] = None
        self.active: Optional[bool] = None
        self.descriptions: Optional[List[I18n]] = None
        self.selectable: Optional[bool] = None
        self.parent_job_family_id: Optional[str] = None
        self.pathway_ids: Optional[List[str]] = None
        self.code: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "JobFamilyVersionDataBuilder":
        return JobFamilyVersionDataBuilder()


class JobFamilyVersionDataBuilder(object):
    def __init__(self) -> None:
        self._job_family_version_data = JobFamilyVersionData()

    def job_family_id(self, job_family_id: str) -> "JobFamilyVersionDataBuilder":
        self._job_family_version_data.job_family_id = job_family_id
        return self

    def job_family_version_id(self, job_family_version_id: str) -> "JobFamilyVersionDataBuilder":
        self._job_family_version_data.job_family_version_id = job_family_version_id
        return self

    def job_family_names(self, job_family_names: List[I18n]) -> "JobFamilyVersionDataBuilder":
        self._job_family_version_data.job_family_names = job_family_names
        return self

    def effective_date(self, effective_date: str) -> "JobFamilyVersionDataBuilder":
        self._job_family_version_data.effective_date = effective_date
        return self

    def expiration_date(self, expiration_date: str) -> "JobFamilyVersionDataBuilder":
        self._job_family_version_data.expiration_date = expiration_date
        return self

    def active(self, active: bool) -> "JobFamilyVersionDataBuilder":
        self._job_family_version_data.active = active
        return self

    def descriptions(self, descriptions: List[I18n]) -> "JobFamilyVersionDataBuilder":
        self._job_family_version_data.descriptions = descriptions
        return self

    def selectable(self, selectable: bool) -> "JobFamilyVersionDataBuilder":
        self._job_family_version_data.selectable = selectable
        return self

    def parent_job_family_id(self, parent_job_family_id: str) -> "JobFamilyVersionDataBuilder":
        self._job_family_version_data.parent_job_family_id = parent_job_family_id
        return self

    def pathway_ids(self, pathway_ids: List[str]) -> "JobFamilyVersionDataBuilder":
        self._job_family_version_data.pathway_ids = pathway_ids
        return self

    def code(self, code: str) -> "JobFamilyVersionDataBuilder":
        self._job_family_version_data.code = code
        return self

    def build(self) -> "JobFamilyVersionData":
        return self._job_family_version_data
