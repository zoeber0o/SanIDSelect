# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class LeaveDuration(object):
    _types = {
        "duration": str,
        "unit": str,
        "duration_per_day": str,
    }

    def __init__(self, d=None):
        self.duration: Optional[str] = None
        self.unit: Optional[str] = None
        self.duration_per_day: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "LeaveDurationBuilder":
        return LeaveDurationBuilder()


class LeaveDurationBuilder(object):
    def __init__(self) -> None:
        self._leave_duration = LeaveDuration()

    def duration(self, duration: str) -> "LeaveDurationBuilder":
        self._leave_duration.duration = duration
        return self

    def unit(self, unit: str) -> "LeaveDurationBuilder":
        self._leave_duration.unit = unit
        return self

    def duration_per_day(self, duration_per_day: str) -> "LeaveDurationBuilder":
        self._leave_duration.duration_per_day = duration_per_day
        return self

    def build(self) -> "LeaveDuration":
        return self._leave_duration
