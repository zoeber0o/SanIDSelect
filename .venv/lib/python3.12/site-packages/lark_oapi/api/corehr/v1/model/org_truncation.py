# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class OrgTruncation(object):
    _types = {
        "org_key": str,
        "type": int,
        "depth": int,
    }

    def __init__(self, d=None):
        self.org_key: Optional[str] = None
        self.type: Optional[int] = None
        self.depth: Optional[int] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "OrgTruncationBuilder":
        return OrgTruncationBuilder()


class OrgTruncationBuilder(object):
    def __init__(self) -> None:
        self._org_truncation = OrgTruncation()

    def org_key(self, org_key: str) -> "OrgTruncationBuilder":
        self._org_truncation.org_key = org_key
        return self

    def type(self, type: int) -> "OrgTruncationBuilder":
        self._org_truncation.type = type
        return self

    def depth(self, depth: int) -> "OrgTruncationBuilder":
        self._org_truncation.depth = depth
        return self

    def build(self) -> "OrgTruncation":
        return self._org_truncation
