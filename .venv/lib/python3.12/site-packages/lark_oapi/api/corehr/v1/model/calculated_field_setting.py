# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class CalculatedFieldSetting(object):
    _types = {
        "type": int,
    }

    def __init__(self, d=None):
        self.type: Optional[int] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "CalculatedFieldSettingBuilder":
        return CalculatedFieldSettingBuilder()


class CalculatedFieldSettingBuilder(object):
    def __init__(self) -> None:
        self._calculated_field_setting = CalculatedFieldSetting()

    def type(self, type: int) -> "CalculatedFieldSettingBuilder":
        self._calculated_field_setting.type = type
        return self

    def build(self) -> "CalculatedFieldSetting":
        return self._calculated_field_setting
