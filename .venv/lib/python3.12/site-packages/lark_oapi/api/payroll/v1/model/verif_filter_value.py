# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .id_with_name import IdWithName


class VerifFilterValue(object):
    _types = {
        "api_name": str,
        "field_type": int,
        "value": str,
        "ref_id": str,
        "currency": IdWithName,
    }

    def __init__(self, d=None):
        self.api_name: Optional[str] = None
        self.field_type: Optional[int] = None
        self.value: Optional[str] = None
        self.ref_id: Optional[str] = None
        self.currency: Optional[IdWithName] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "VerifFilterValueBuilder":
        return VerifFilterValueBuilder()


class VerifFilterValueBuilder(object):
    def __init__(self) -> None:
        self._verif_filter_value = VerifFilterValue()

    def api_name(self, api_name: str) -> "VerifFilterValueBuilder":
        self._verif_filter_value.api_name = api_name
        return self

    def field_type(self, field_type: int) -> "VerifFilterValueBuilder":
        self._verif_filter_value.field_type = field_type
        return self

    def value(self, value: str) -> "VerifFilterValueBuilder":
        self._verif_filter_value.value = value
        return self

    def ref_id(self, ref_id: str) -> "VerifFilterValueBuilder":
        self._verif_filter_value.ref_id = ref_id
        return self

    def currency(self, currency: IdWithName) -> "VerifFilterValueBuilder":
        self._verif_filter_value.currency = currency
        return self

    def build(self) -> "VerifFilterValue":
        return self._verif_filter_value
