# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class DimensionValue(object):
    _types = {
        "obj_api_name": str,
        "api_name": str,
        "value": str,
    }

    def __init__(self, d=None):
        self.obj_api_name: Optional[str] = None
        self.api_name: Optional[str] = None
        self.value: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "DimensionValueBuilder":
        return DimensionValueBuilder()


class DimensionValueBuilder(object):
    def __init__(self) -> None:
        self._dimension_value = DimensionValue()

    def obj_api_name(self, obj_api_name: str) -> "DimensionValueBuilder":
        self._dimension_value.obj_api_name = obj_api_name
        return self

    def api_name(self, api_name: str) -> "DimensionValueBuilder":
        self._dimension_value.api_name = api_name
        return self

    def value(self, value: str) -> "DimensionValueBuilder":
        self._dimension_value.value = value
        return self

    def build(self) -> "DimensionValue":
        return self._dimension_value
