# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .id_with_name import IdWithName
from .verif_datasource_item import VerifDatasourceItem


class VerifDataSourceRule(object):
    _types = {
        "api_name": str,
        "datasource_name": IdWithName,
        "object_type": int,
        "datasource_items": List[VerifDatasourceItem],
    }

    def __init__(self, d=None):
        self.api_name: Optional[str] = None
        self.datasource_name: Optional[IdWithName] = None
        self.object_type: Optional[int] = None
        self.datasource_items: Optional[List[VerifDatasourceItem]] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "VerifDataSourceRuleBuilder":
        return VerifDataSourceRuleBuilder()


class VerifDataSourceRuleBuilder(object):
    def __init__(self) -> None:
        self._verif_data_source_rule = VerifDataSourceRule()

    def api_name(self, api_name: str) -> "VerifDataSourceRuleBuilder":
        self._verif_data_source_rule.api_name = api_name
        return self

    def datasource_name(self, datasource_name: IdWithName) -> "VerifDataSourceRuleBuilder":
        self._verif_data_source_rule.datasource_name = datasource_name
        return self

    def object_type(self, object_type: int) -> "VerifDataSourceRuleBuilder":
        self._verif_data_source_rule.object_type = object_type
        return self

    def datasource_items(self, datasource_items: List[VerifDatasourceItem]) -> "VerifDataSourceRuleBuilder":
        self._verif_data_source_rule.datasource_items = datasource_items
        return self

    def build(self) -> "VerifDataSourceRule":
        return self._verif_data_source_rule
