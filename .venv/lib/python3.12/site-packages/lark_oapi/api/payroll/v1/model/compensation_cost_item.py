# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .compensation_cost import CompensationCost


class CompensationCostItem(object):
    _types = {
        "number_of_individuals_for_payment": int,
        "compensation_costs": List[CompensationCost],
    }

    def __init__(self, d=None):
        self.number_of_individuals_for_payment: Optional[int] = None
        self.compensation_costs: Optional[List[CompensationCost]] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "CompensationCostItemBuilder":
        return CompensationCostItemBuilder()


class CompensationCostItemBuilder(object):
    def __init__(self) -> None:
        self._compensation_cost_item = CompensationCostItem()

    def number_of_individuals_for_payment(self,
                                          number_of_individuals_for_payment: int) -> "CompensationCostItemBuilder":
        self._compensation_cost_item.number_of_individuals_for_payment = number_of_individuals_for_payment
        return self

    def compensation_costs(self, compensation_costs: List[CompensationCost]) -> "CompensationCostItemBuilder":
        self._compensation_cost_item.compensation_costs = compensation_costs
        return self

    def build(self) -> "CompensationCostItem":
        return self._compensation_cost_item
