# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .verif_filter_value import VerifFilterValue
from .verif_filter_value import VerifFilterValue


class VerifFilterCondition(object):
    _types = {
        "left_value": VerifFilterValue,
        "operator_type": int,
        "right_values": List[VerifFilterValue],
    }

    def __init__(self, d=None):
        self.left_value: Optional[VerifFilterValue] = None
        self.operator_type: Optional[int] = None
        self.right_values: Optional[List[VerifFilterValue]] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "VerifFilterConditionBuilder":
        return VerifFilterConditionBuilder()


class VerifFilterConditionBuilder(object):
    def __init__(self) -> None:
        self._verif_filter_condition = VerifFilterCondition()

    def left_value(self, left_value: VerifFilterValue) -> "VerifFilterConditionBuilder":
        self._verif_filter_condition.left_value = left_value
        return self

    def operator_type(self, operator_type: int) -> "VerifFilterConditionBuilder":
        self._verif_filter_condition.operator_type = operator_type
        return self

    def right_values(self, right_values: List[VerifFilterValue]) -> "VerifFilterConditionBuilder":
        self._verif_filter_condition.right_values = right_values
        return self

    def build(self) -> "VerifFilterCondition":
        return self._verif_filter_condition
