# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class IntRange(object):
    _types = {
        "greate_than": int,
        "greate_equal_than": int,
        "less_than": int,
        "less_equal_than": int,
    }

    def __init__(self, d=None):
        self.greate_than: Optional[int] = None
        self.greate_equal_than: Optional[int] = None
        self.less_than: Optional[int] = None
        self.less_equal_than: Optional[int] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "IntRangeBuilder":
        return IntRangeBuilder()


class IntRangeBuilder(object):
    def __init__(self) -> None:
        self._int_range = IntRange()

    def greate_than(self, greate_than: int) -> "IntRangeBuilder":
        self._int_range.greate_than = greate_than
        return self

    def greate_equal_than(self, greate_equal_than: int) -> "IntRangeBuilder":
        self._int_range.greate_equal_than = greate_equal_than
        return self

    def less_than(self, less_than: int) -> "IntRangeBuilder":
        self._int_range.less_than = less_than
        return self

    def less_equal_than(self, less_equal_than: int) -> "IntRangeBuilder":
        self._int_range.less_equal_than = less_equal_than
        return self

    def build(self) -> "IntRange":
        return self._int_range
