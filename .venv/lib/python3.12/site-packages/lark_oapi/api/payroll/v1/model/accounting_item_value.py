# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .i18n_content import I18nContent


class AccountingItemValue(object):
    _types = {
        "original_value": str,
        "reference_values": List[I18nContent],
    }

    def __init__(self, d=None):
        self.original_value: Optional[str] = None
        self.reference_values: Optional[List[I18nContent]] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "AccountingItemValueBuilder":
        return AccountingItemValueBuilder()


class AccountingItemValueBuilder(object):
    def __init__(self) -> None:
        self._accounting_item_value = AccountingItemValue()

    def original_value(self, original_value: str) -> "AccountingItemValueBuilder":
        self._accounting_item_value.original_value = original_value
        return self

    def reference_values(self, reference_values: List[I18nContent]) -> "AccountingItemValueBuilder":
        self._accounting_item_value.reference_values = reference_values
        return self

    def build(self) -> "AccountingItemValue":
        return self._accounting_item_value
