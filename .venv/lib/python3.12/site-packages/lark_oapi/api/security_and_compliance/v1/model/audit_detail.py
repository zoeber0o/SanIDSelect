# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class AuditDetail(object):
    _types = {
        "mc": str,
        "device_model": str,
        "os": str,
        "city": str,
    }

    def __init__(self, d=None):
        self.mc: Optional[str] = None
        self.device_model: Optional[str] = None
        self.os: Optional[str] = None
        self.city: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "AuditDetailBuilder":
        return AuditDetailBuilder()


class AuditDetailBuilder(object):
    def __init__(self) -> None:
        self._audit_detail = AuditDetail()

    def mc(self, mc: str) -> "AuditDetailBuilder":
        self._audit_detail.mc = mc
        return self

    def device_model(self, device_model: str) -> "AuditDetailBuilder":
        self._audit_detail.device_model = device_model
        return self

    def os(self, os: str) -> "AuditDetailBuilder":
        self._audit_detail.os = os
        return self

    def city(self, city: str) -> "AuditDetailBuilder":
        self._audit_detail.city = city
        return self

    def build(self) -> "AuditDetail":
        return self._audit_detail
