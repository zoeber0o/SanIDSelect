# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class DataAssetImportKnowledgeWikiSubDoc(object):
    _types = {
        "type": str,
        "token": str,
        "url": str,
    }

    def __init__(self, d=None):
        self.type: Optional[str] = None
        self.token: Optional[str] = None
        self.url: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "DataAssetImportKnowledgeWikiSubDocBuilder":
        return DataAssetImportKnowledgeWikiSubDocBuilder()


class DataAssetImportKnowledgeWikiSubDocBuilder(object):
    def __init__(self) -> None:
        self._data_asset_import_knowledge_wiki_sub_doc = DataAssetImportKnowledgeWikiSubDoc()

    def type(self, type: str) -> "DataAssetImportKnowledgeWikiSubDocBuilder":
        self._data_asset_import_knowledge_wiki_sub_doc.type = type
        return self

    def token(self, token: str) -> "DataAssetImportKnowledgeWikiSubDocBuilder":
        self._data_asset_import_knowledge_wiki_sub_doc.token = token
        return self

    def url(self, url: str) -> "DataAssetImportKnowledgeWikiSubDocBuilder":
        self._data_asset_import_knowledge_wiki_sub_doc.url = url
        return self

    def build(self) -> "DataAssetImportKnowledgeWikiSubDoc":
        return self._data_asset_import_knowledge_wiki_sub_doc
