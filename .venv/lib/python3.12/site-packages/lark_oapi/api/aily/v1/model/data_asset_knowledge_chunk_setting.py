# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class DataAssetKnowledgeChunkSetting(object):
    _types = {
        "rule_type": str,
        "separate_type": str,
        "size": int,
        "overlap": int,
    }

    def __init__(self, d=None):
        self.rule_type: Optional[str] = None
        self.separate_type: Optional[str] = None
        self.size: Optional[int] = None
        self.overlap: Optional[int] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "DataAssetKnowledgeChunkSettingBuilder":
        return DataAssetKnowledgeChunkSettingBuilder()


class DataAssetKnowledgeChunkSettingBuilder(object):
    def __init__(self) -> None:
        self._data_asset_knowledge_chunk_setting = DataAssetKnowledgeChunkSetting()

    def rule_type(self, rule_type: str) -> "DataAssetKnowledgeChunkSettingBuilder":
        self._data_asset_knowledge_chunk_setting.rule_type = rule_type
        return self

    def separate_type(self, separate_type: str) -> "DataAssetKnowledgeChunkSettingBuilder":
        self._data_asset_knowledge_chunk_setting.separate_type = separate_type
        return self

    def size(self, size: int) -> "DataAssetKnowledgeChunkSettingBuilder":
        self._data_asset_knowledge_chunk_setting.size = size
        return self

    def overlap(self, overlap: int) -> "DataAssetKnowledgeChunkSettingBuilder":
        self._data_asset_knowledge_chunk_setting.overlap = overlap
        return self

    def build(self) -> "DataAssetKnowledgeChunkSetting":
        return self._data_asset_knowledge_chunk_setting
