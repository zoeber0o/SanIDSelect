# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.model import BaseRequest
from lark_oapi.core.enum import HttpMethod, AccessTokenType
from .start_app_skill_request_body import StartAppSkillRequestBody


class StartAppSkillRequest(BaseRequest):
    def __init__(self) -> None:
        super().__init__()
        self.app_id: Optional[str] = None
        self.skill_id: Optional[str] = None
        self.request_body: Optional[StartAppSkillRequestBody] = None

    @staticmethod
    def builder() -> "StartAppSkillRequestBuilder":
        return StartAppSkillRequestBuilder()


class StartAppSkillRequestBuilder(object):

    def __init__(self) -> None:
        start_app_skill_request = StartAppSkillRequest()
        start_app_skill_request.http_method = HttpMethod.POST
        start_app_skill_request.uri = "/open-apis/aily/v1/apps/:app_id/skills/:skill_id/start"
        start_app_skill_request.token_types = {AccessTokenType.USER, AccessTokenType.TENANT}
        self._start_app_skill_request: StartAppSkillRequest = start_app_skill_request

    def app_id(self, app_id: str) -> "StartAppSkillRequestBuilder":
        self._start_app_skill_request.app_id = app_id
        self._start_app_skill_request.paths["app_id"] = str(app_id)
        return self

    def skill_id(self, skill_id: str) -> "StartAppSkillRequestBuilder":
        self._start_app_skill_request.skill_id = skill_id
        self._start_app_skill_request.paths["skill_id"] = str(skill_id)
        return self

    def request_body(self, request_body: StartAppSkillRequestBody) -> "StartAppSkillRequestBuilder":
        self._start_app_skill_request.request_body = request_body
        self._start_app_skill_request.body = request_body
        return self

    def build(self) -> StartAppSkillRequest:
        return self._start_app_skill_request
