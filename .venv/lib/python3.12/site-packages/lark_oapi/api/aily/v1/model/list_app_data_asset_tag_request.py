# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.model import BaseRequest
from lark_oapi.core.enum import HttpMethod, AccessTokenType


class ListAppDataAssetTagRequest(BaseRequest):
    def __init__(self) -> None:
        super().__init__()
        self.page_size: Optional[int] = None
        self.page_token: Optional[str] = None
        self.keyword: Optional[str] = None
        self.data_asset_tag_ids: Optional[List[str]] = None
        self.app_id: Optional[str] = None

    @staticmethod
    def builder() -> "ListAppDataAssetTagRequestBuilder":
        return ListAppDataAssetTagRequestBuilder()


class ListAppDataAssetTagRequestBuilder(object):

    def __init__(self) -> None:
        list_app_data_asset_tag_request = ListAppDataAssetTagRequest()
        list_app_data_asset_tag_request.http_method = HttpMethod.GET
        list_app_data_asset_tag_request.uri = "/open-apis/aily/v1/apps/:app_id/data_asset_tags"
        list_app_data_asset_tag_request.token_types = {AccessTokenType.USER, AccessTokenType.TENANT}
        self._list_app_data_asset_tag_request: ListAppDataAssetTagRequest = list_app_data_asset_tag_request

    def page_size(self, page_size: int) -> "ListAppDataAssetTagRequestBuilder":
        self._list_app_data_asset_tag_request.page_size = page_size
        self._list_app_data_asset_tag_request.add_query("page_size", page_size)
        return self

    def page_token(self, page_token: str) -> "ListAppDataAssetTagRequestBuilder":
        self._list_app_data_asset_tag_request.page_token = page_token
        self._list_app_data_asset_tag_request.add_query("page_token", page_token)
        return self

    def keyword(self, keyword: str) -> "ListAppDataAssetTagRequestBuilder":
        self._list_app_data_asset_tag_request.keyword = keyword
        self._list_app_data_asset_tag_request.add_query("keyword", keyword)
        return self

    def data_asset_tag_ids(self, data_asset_tag_ids: List[str]) -> "ListAppDataAssetTagRequestBuilder":
        self._list_app_data_asset_tag_request.data_asset_tag_ids = data_asset_tag_ids
        self._list_app_data_asset_tag_request.add_query("data_asset_tag_ids", data_asset_tag_ids)
        return self

    def app_id(self, app_id: str) -> "ListAppDataAssetTagRequestBuilder":
        self._list_app_data_asset_tag_request.app_id = app_id
        self._list_app_data_asset_tag_request.paths["app_id"] = str(app_id)
        return self

    def build(self) -> ListAppDataAssetTagRequest:
        return self._list_app_data_asset_tag_request
