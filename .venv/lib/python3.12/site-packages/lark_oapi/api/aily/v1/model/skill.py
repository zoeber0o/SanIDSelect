# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class Skill(object):
    _types = {
        "id": str,
        "label": str,
        "description": str,
        "samples": List[str],
        "input_schema": str,
        "output_schema": str,
    }

    def __init__(self, d=None):
        self.id: Optional[str] = None
        self.label: Optional[str] = None
        self.description: Optional[str] = None
        self.samples: Optional[List[str]] = None
        self.input_schema: Optional[str] = None
        self.output_schema: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "SkillBuilder":
        return SkillBuilder()


class SkillBuilder(object):
    def __init__(self) -> None:
        self._skill = Skill()

    def id(self, id: str) -> "SkillBuilder":
        self._skill.id = id
        return self

    def label(self, label: str) -> "SkillBuilder":
        self._skill.label = label
        return self

    def description(self, description: str) -> "SkillBuilder":
        self._skill.description = description
        return self

    def samples(self, samples: List[str]) -> "SkillBuilder":
        self._skill.samples = samples
        return self

    def input_schema(self, input_schema: str) -> "SkillBuilder":
        self._skill.input_schema = input_schema
        return self

    def output_schema(self, output_schema: str) -> "SkillBuilder":
        self._skill.output_schema = output_schema
        return self

    def build(self) -> "Skill":
        return self._skill
