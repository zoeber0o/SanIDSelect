# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .rule import Rule


class CreateRuleExternalRequestBody(object):
    _types = {
        "rule": Rule,
    }

    def __init__(self, d=None):
        self.rule: Optional[Rule] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "CreateRuleExternalRequestBodyBuilder":
        return CreateRuleExternalRequestBodyBuilder()


class CreateRuleExternalRequestBodyBuilder(object):
    def __init__(self) -> None:
        self._create_rule_external_request_body = CreateRuleExternalRequestBody()

    def rule(self, rule: Rule) -> "CreateRuleExternalRequestBodyBuilder":
        self._create_rule_external_request_body.rule = rule
        return self

    def build(self) -> "CreateRuleExternalRequestBody":
        return self._create_rule_external_request_body
