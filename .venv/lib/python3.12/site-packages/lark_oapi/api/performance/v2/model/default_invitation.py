# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .invitation import Invitation


class DefaultInvitation(object):
    _types = {
        "invitations": List[Invitation],
    }

    def __init__(self, d=None):
        self.invitations: Optional[List[Invitation]] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "DefaultInvitationBuilder":
        return DefaultInvitationBuilder()


class DefaultInvitationBuilder(object):
    def __init__(self) -> None:
        self._default_invitation = DefaultInvitation()

    def invitations(self, invitations: List[Invitation]) -> "DefaultInvitationBuilder":
        self._default_invitation.invitations = invitations
        return self

    def build(self) -> "DefaultInvitation":
        return self._default_invitation
