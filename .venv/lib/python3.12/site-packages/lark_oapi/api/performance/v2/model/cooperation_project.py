# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .i18n import I18n
from .cooperation_role import CooperationRole
from .cooperation_user_role import CooperationUserRole
from .cooperation_user_role import CooperationUserRole


class CooperationProject(object):
    _types = {
        "id": str,
        "name": I18n,
        "roles": List[CooperationRole],
        "user_roles": List[CooperationUserRole],
        "underling_roles": List[CooperationUserRole],
    }

    def __init__(self, d=None):
        self.id: Optional[str] = None
        self.name: Optional[I18n] = None
        self.roles: Optional[List[CooperationRole]] = None
        self.user_roles: Optional[List[CooperationUserRole]] = None
        self.underling_roles: Optional[List[CooperationUserRole]] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "CooperationProjectBuilder":
        return CooperationProjectBuilder()


class CooperationProjectBuilder(object):
    def __init__(self) -> None:
        self._cooperation_project = CooperationProject()

    def id(self, id: str) -> "CooperationProjectBuilder":
        self._cooperation_project.id = id
        return self

    def name(self, name: I18n) -> "CooperationProjectBuilder":
        self._cooperation_project.name = name
        return self

    def roles(self, roles: List[CooperationRole]) -> "CooperationProjectBuilder":
        self._cooperation_project.roles = roles
        return self

    def user_roles(self, user_roles: List[CooperationUserRole]) -> "CooperationProjectBuilder":
        self._cooperation_project.user_roles = user_roles
        return self

    def underling_roles(self, underling_roles: List[CooperationUserRole]) -> "CooperationProjectBuilder":
        self._cooperation_project.underling_roles = underling_roles
        return self

    def build(self) -> "CooperationProject":
        return self._cooperation_project
