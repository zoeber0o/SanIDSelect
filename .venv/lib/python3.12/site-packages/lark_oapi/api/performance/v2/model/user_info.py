# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .user import User
from .user import User
from .department import Department
from .job_family import JobFamily
from .job_level import JobLevel


class UserInfo(object):
    _types = {
        "user_id": User,
        "direct_leader_user_id": User,
        "department": Department,
        "job_family": JobFamily,
        "job_level": JobLevel,
    }

    def __init__(self, d=None):
        self.user_id: Optional[User] = None
        self.direct_leader_user_id: Optional[User] = None
        self.department: Optional[Department] = None
        self.job_family: Optional[JobFamily] = None
        self.job_level: Optional[JobLevel] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "UserInfoBuilder":
        return UserInfoBuilder()


class UserInfoBuilder(object):
    def __init__(self) -> None:
        self._user_info = UserInfo()

    def user_id(self, user_id: User) -> "UserInfoBuilder":
        self._user_info.user_id = user_id
        return self

    def direct_leader_user_id(self, direct_leader_user_id: User) -> "UserInfoBuilder":
        self._user_info.direct_leader_user_id = direct_leader_user_id
        return self

    def department(self, department: Department) -> "UserInfoBuilder":
        self._user_info.department = department
        return self

    def job_family(self, job_family: JobFamily) -> "UserInfoBuilder":
        self._user_info.job_family = job_family
        return self

    def job_level(self, job_level: JobLevel) -> "UserInfoBuilder":
        self._user_info.job_level = job_level
        return self

    def build(self) -> "UserInfo":
        return self._user_info
