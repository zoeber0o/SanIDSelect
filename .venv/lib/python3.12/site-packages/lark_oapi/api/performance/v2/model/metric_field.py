# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .i18n import I18n


class MetricField(object):
    _types = {
        "field_id": int,
        "name": I18n,
        "type": str,
    }

    def __init__(self, d=None):
        self.field_id: Optional[int] = None
        self.name: Optional[I18n] = None
        self.type: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "MetricFieldBuilder":
        return MetricFieldBuilder()


class MetricFieldBuilder(object):
    def __init__(self) -> None:
        self._metric_field = MetricField()

    def field_id(self, field_id: int) -> "MetricFieldBuilder":
        self._metric_field.field_id = field_id
        return self

    def name(self, name: I18n) -> "MetricFieldBuilder":
        self._metric_field.name = name
        return self

    def type(self, type: str) -> "MetricFieldBuilder":
        self._metric_field.type = type
        return self

    def build(self) -> "MetricField":
        return self._metric_field
