# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .i18n import I18n


class TemplateStage(object):
    _types = {
        "id": str,
        "name": I18n,
        "template_group_id": str,
        "stage_type": str,
        "perform_role": str,
        "as_final_result": bool,
    }

    def __init__(self, d=None):
        self.id: Optional[str] = None
        self.name: Optional[I18n] = None
        self.template_group_id: Optional[str] = None
        self.stage_type: Optional[str] = None
        self.perform_role: Optional[str] = None
        self.as_final_result: Optional[bool] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "TemplateStageBuilder":
        return TemplateStageBuilder()


class TemplateStageBuilder(object):
    def __init__(self) -> None:
        self._template_stage = TemplateStage()

    def id(self, id: str) -> "TemplateStageBuilder":
        self._template_stage.id = id
        return self

    def name(self, name: I18n) -> "TemplateStageBuilder":
        self._template_stage.name = name
        return self

    def template_group_id(self, template_group_id: str) -> "TemplateStageBuilder":
        self._template_stage.template_group_id = template_group_id
        return self

    def stage_type(self, stage_type: str) -> "TemplateStageBuilder":
        self._template_stage.stage_type = stage_type
        return self

    def perform_role(self, perform_role: str) -> "TemplateStageBuilder":
        self._template_stage.perform_role = perform_role
        return self

    def as_final_result(self, as_final_result: bool) -> "TemplateStageBuilder":
        self._template_stage.as_final_result = as_final_result
        return self

    def build(self) -> "TemplateStage":
        return self._template_stage
