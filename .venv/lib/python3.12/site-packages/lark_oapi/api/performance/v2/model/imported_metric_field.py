# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class ImportedMetricField(object):
    _types = {
        "field_id": int,
        "field_value": str,
        "field_value_person": str,
    }

    def __init__(self, d=None):
        self.field_id: Optional[int] = None
        self.field_value: Optional[str] = None
        self.field_value_person: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "ImportedMetricFieldBuilder":
        return ImportedMetricFieldBuilder()


class ImportedMetricFieldBuilder(object):
    def __init__(self) -> None:
        self._imported_metric_field = ImportedMetricField()

    def field_id(self, field_id: int) -> "ImportedMetricFieldBuilder":
        self._imported_metric_field.field_id = field_id
        return self

    def field_value(self, field_value: str) -> "ImportedMetricFieldBuilder":
        self._imported_metric_field.field_value = field_value
        return self

    def field_value_person(self, field_value_person: str) -> "ImportedMetricFieldBuilder":
        self._imported_metric_field.field_value_person = field_value_person
        return self

    def build(self) -> "ImportedMetricField":
        return self._imported_metric_field
