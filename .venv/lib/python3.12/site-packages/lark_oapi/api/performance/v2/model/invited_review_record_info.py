# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .user import User


class InvitedReviewRecordInfo(object):
    _types = {
        "reviewer_id": User,
        "is_rejected": bool,
        "rejected_reason": str,
        "distribute_type": int,
        "avg_diff": str,
        "relationship_with_reviewee": str,
        "invitedby": str,
    }

    def __init__(self, d=None):
        self.reviewer_id: Optional[User] = None
        self.is_rejected: Optional[bool] = None
        self.rejected_reason: Optional[str] = None
        self.distribute_type: Optional[int] = None
        self.avg_diff: Optional[str] = None
        self.relationship_with_reviewee: Optional[str] = None
        self.invitedby: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "InvitedReviewRecordInfoBuilder":
        return InvitedReviewRecordInfoBuilder()


class InvitedReviewRecordInfoBuilder(object):
    def __init__(self) -> None:
        self._invited_review_record_info = InvitedReviewRecordInfo()

    def reviewer_id(self, reviewer_id: User) -> "InvitedReviewRecordInfoBuilder":
        self._invited_review_record_info.reviewer_id = reviewer_id
        return self

    def is_rejected(self, is_rejected: bool) -> "InvitedReviewRecordInfoBuilder":
        self._invited_review_record_info.is_rejected = is_rejected
        return self

    def rejected_reason(self, rejected_reason: str) -> "InvitedReviewRecordInfoBuilder":
        self._invited_review_record_info.rejected_reason = rejected_reason
        return self

    def distribute_type(self, distribute_type: int) -> "InvitedReviewRecordInfoBuilder":
        self._invited_review_record_info.distribute_type = distribute_type
        return self

    def avg_diff(self, avg_diff: str) -> "InvitedReviewRecordInfoBuilder":
        self._invited_review_record_info.avg_diff = avg_diff
        return self

    def relationship_with_reviewee(self, relationship_with_reviewee: str) -> "InvitedReviewRecordInfoBuilder":
        self._invited_review_record_info.relationship_with_reviewee = relationship_with_reviewee
        return self

    def invitedby(self, invitedby: str) -> "InvitedReviewRecordInfoBuilder":
        self._invited_review_record_info.invitedby = invitedby
        return self

    def build(self) -> "InvitedReviewRecordInfo":
        return self._invited_review_record_info
