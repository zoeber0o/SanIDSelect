# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .i18n import I18n


class MetricTag(object):
    _types = {
        "tag_id": int,
        "tag_name": I18n,
        "index": int,
        "create_time": str,
        "update_time": str,
    }

    def __init__(self, d=None):
        self.tag_id: Optional[int] = None
        self.tag_name: Optional[I18n] = None
        self.index: Optional[int] = None
        self.create_time: Optional[str] = None
        self.update_time: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "MetricTagBuilder":
        return MetricTagBuilder()


class MetricTagBuilder(object):
    def __init__(self) -> None:
        self._metric_tag = MetricTag()

    def tag_id(self, tag_id: int) -> "MetricTagBuilder":
        self._metric_tag.tag_id = tag_id
        return self

    def tag_name(self, tag_name: I18n) -> "MetricTagBuilder":
        self._metric_tag.tag_name = tag_name
        return self

    def index(self, index: int) -> "MetricTagBuilder":
        self._metric_tag.index = index
        return self

    def create_time(self, create_time: str) -> "MetricTagBuilder":
        self._metric_tag.create_time = create_time
        return self

    def update_time(self, update_time: str) -> "MetricTagBuilder":
        self._metric_tag.update_time = update_time
        return self

    def build(self) -> "MetricTag":
        return self._metric_tag
