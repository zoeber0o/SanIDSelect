# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .reviewee import Reviewee


class QueryRevieweeResponseBody(object):
    _types = {
        "semester_id": str,
        "reviewees": List[Reviewee],
        "has_more": bool,
        "page_token": str,
    }

    def __init__(self, d=None):
        self.semester_id: Optional[str] = None
        self.reviewees: Optional[List[Reviewee]] = None
        self.has_more: Optional[bool] = None
        self.page_token: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "QueryRevieweeResponseBodyBuilder":
        return QueryRevieweeResponseBodyBuilder()


class QueryRevieweeResponseBodyBuilder(object):
    def __init__(self) -> None:
        self._query_reviewee_response_body = QueryRevieweeResponseBody()

    def semester_id(self, semester_id: str) -> "QueryRevieweeResponseBodyBuilder":
        self._query_reviewee_response_body.semester_id = semester_id
        return self

    def reviewees(self, reviewees: List[Reviewee]) -> "QueryRevieweeResponseBodyBuilder":
        self._query_reviewee_response_body.reviewees = reviewees
        return self

    def has_more(self, has_more: bool) -> "QueryRevieweeResponseBodyBuilder":
        self._query_reviewee_response_body.has_more = has_more
        return self

    def page_token(self, page_token: str) -> "QueryRevieweeResponseBodyBuilder":
        self._query_reviewee_response_body.page_token = page_token
        return self

    def build(self) -> "QueryRevieweeResponseBody":
        return self._query_reviewee_response_body
