# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .metric_field_in_details import MetricFieldInDetails
from .i18n import I18n


class MetricDetail(object):
    _types = {
        "metric_id": int,
        "name": str,
        "fields": List[MetricFieldInDetails],
        "dimension_id": int,
        "dimension_name": I18n,
        "dimension_weight": str,
        "add_from": str,
        "is_from_library": bool,
    }

    def __init__(self, d=None):
        self.metric_id: Optional[int] = None
        self.name: Optional[str] = None
        self.fields: Optional[List[MetricFieldInDetails]] = None
        self.dimension_id: Optional[int] = None
        self.dimension_name: Optional[I18n] = None
        self.dimension_weight: Optional[str] = None
        self.add_from: Optional[str] = None
        self.is_from_library: Optional[bool] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "MetricDetailBuilder":
        return MetricDetailBuilder()


class MetricDetailBuilder(object):
    def __init__(self) -> None:
        self._metric_detail = MetricDetail()

    def metric_id(self, metric_id: int) -> "MetricDetailBuilder":
        self._metric_detail.metric_id = metric_id
        return self

    def name(self, name: str) -> "MetricDetailBuilder":
        self._metric_detail.name = name
        return self

    def fields(self, fields: List[MetricFieldInDetails]) -> "MetricDetailBuilder":
        self._metric_detail.fields = fields
        return self

    def dimension_id(self, dimension_id: int) -> "MetricDetailBuilder":
        self._metric_detail.dimension_id = dimension_id
        return self

    def dimension_name(self, dimension_name: I18n) -> "MetricDetailBuilder":
        self._metric_detail.dimension_name = dimension_name
        return self

    def dimension_weight(self, dimension_weight: str) -> "MetricDetailBuilder":
        self._metric_detail.dimension_weight = dimension_weight
        return self

    def add_from(self, add_from: str) -> "MetricDetailBuilder":
        self._metric_detail.add_from = add_from
        return self

    def is_from_library(self, is_from_library: bool) -> "MetricDetailBuilder":
        self._metric_detail.is_from_library = is_from_library
        return self

    def build(self) -> "MetricDetail":
        return self._metric_detail
