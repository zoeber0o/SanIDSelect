# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .keyresult_data import KeyresultData


class ObjectiveData(object):
    _types = {
        "objective_id": str,
        "score": str,
        "text": str,
        "keyresult_data": List[KeyresultData],
        "richtext": str,
    }

    def __init__(self, d=None):
        self.objective_id: Optional[str] = None
        self.score: Optional[str] = None
        self.text: Optional[str] = None
        self.keyresult_data: Optional[List[KeyresultData]] = None
        self.richtext: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "ObjectiveDataBuilder":
        return ObjectiveDataBuilder()


class ObjectiveDataBuilder(object):
    def __init__(self) -> None:
        self._objective_data = ObjectiveData()

    def objective_id(self, objective_id: str) -> "ObjectiveDataBuilder":
        self._objective_data.objective_id = objective_id
        return self

    def score(self, score: str) -> "ObjectiveDataBuilder":
        self._objective_data.score = score
        return self

    def text(self, text: str) -> "ObjectiveDataBuilder":
        self._objective_data.text = text
        return self

    def keyresult_data(self, keyresult_data: List[KeyresultData]) -> "ObjectiveDataBuilder":
        self._objective_data.keyresult_data = keyresult_data
        return self

    def richtext(self, richtext: str) -> "ObjectiveDataBuilder":
        self._objective_data.richtext = richtext
        return self

    def build(self) -> "ObjectiveData":
        return self._objective_data
