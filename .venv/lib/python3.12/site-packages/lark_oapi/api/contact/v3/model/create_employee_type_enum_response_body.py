# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .employee_type_enum import EmployeeTypeEnum


class CreateEmployeeTypeEnumResponseBody(object):
    _types = {
        "employee_type_enum": EmployeeTypeEnum,
    }

    def __init__(self, d=None):
        self.employee_type_enum: Optional[EmployeeTypeEnum] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "CreateEmployeeTypeEnumResponseBodyBuilder":
        return CreateEmployeeTypeEnumResponseBodyBuilder()


class CreateEmployeeTypeEnumResponseBodyBuilder(object):
    def __init__(self) -> None:
        self._create_employee_type_enum_response_body = CreateEmployeeTypeEnumResponseBody()

    def employee_type_enum(self, employee_type_enum: EmployeeTypeEnum) -> "CreateEmployeeTypeEnumResponseBodyBuilder":
        self._create_employee_type_enum_response_body.employee_type_enum = employee_type_enum
        return self

    def build(self) -> "CreateEmployeeTypeEnumResponseBody":
        return self._create_employee_type_enum_response_body
