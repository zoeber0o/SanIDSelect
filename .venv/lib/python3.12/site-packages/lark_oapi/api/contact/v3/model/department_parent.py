# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class DepartmentParent(object):
    _types = {
        "department_id": str,
        "parent_ids": List[str],
    }

    def __init__(self, d=None):
        self.department_id: Optional[str] = None
        self.parent_ids: Optional[List[str]] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "DepartmentParentBuilder":
        return DepartmentParentBuilder()


class DepartmentParentBuilder(object):
    def __init__(self) -> None:
        self._department_parent = DepartmentParent()

    def department_id(self, department_id: str) -> "DepartmentParentBuilder":
        self._department_parent.department_id = department_id
        return self

    def parent_ids(self, parent_ids: List[str]) -> "DepartmentParentBuilder":
        self._department_parent.parent_ids = parent_ids
        return self

    def build(self) -> "DepartmentParent":
        return self._department_parent
