# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class CustomAttrGenericUser(object):
    _types = {
        "id": str,
        "type": int,
    }

    def __init__(self, d=None):
        self.id: Optional[str] = None
        self.type: Optional[int] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "CustomAttrGenericUserBuilder":
        return CustomAttrGenericUserBuilder()


class CustomAttrGenericUserBuilder(object):
    def __init__(self) -> None:
        self._custom_attr_generic_user = CustomAttrGenericUser()

    def id(self, id: str) -> "CustomAttrGenericUserBuilder":
        self._custom_attr_generic_user.id = id
        return self

    def type(self, type: int) -> "CustomAttrGenericUserBuilder":
        self._custom_attr_generic_user.type = type
        return self

    def build(self) -> "CustomAttrGenericUser":
        return self._custom_attr_generic_user
