# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class ReferenceBase(object):
    _types = {
        "token": str,
        "view_id": str,
        "layout_mode": str,
    }

    def __init__(self, d=None):
        self.token: Optional[str] = None
        self.view_id: Optional[str] = None
        self.layout_mode: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "ReferenceBaseBuilder":
        return ReferenceBaseBuilder()


class ReferenceBaseBuilder(object):
    def __init__(self) -> None:
        self._reference_base = ReferenceBase()

    def token(self, token: str) -> "ReferenceBaseBuilder":
        self._reference_base.token = token
        return self

    def view_id(self, view_id: str) -> "ReferenceBaseBuilder":
        self._reference_base.view_id = view_id
        return self

    def layout_mode(self, layout_mode: str) -> "ReferenceBaseBuilder":
        self._reference_base.layout_mode = layout_mode
        return self

    def build(self) -> "ReferenceBase":
        return self._reference_base
