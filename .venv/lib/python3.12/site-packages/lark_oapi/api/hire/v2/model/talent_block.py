# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class TalentBlock(object):
    _types = {
        "blocked_time": str,
        "creator_id": str,
        "reason": str,
    }

    def __init__(self, d=None):
        self.blocked_time: Optional[str] = None
        self.creator_id: Optional[str] = None
        self.reason: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "TalentBlockBuilder":
        return TalentBlockBuilder()


class TalentBlockBuilder(object):
    def __init__(self) -> None:
        self._talent_block = TalentBlock()

    def blocked_time(self, blocked_time: str) -> "TalentBlockBuilder":
        self._talent_block.blocked_time = blocked_time
        return self

    def creator_id(self, creator_id: str) -> "TalentBlockBuilder":
        self._talent_block.creator_id = creator_id
        return self

    def reason(self, reason: str) -> "TalentBlockBuilder":
        self._talent_block.reason = reason
        return self

    def build(self) -> "TalentBlock":
        return self._talent_block
