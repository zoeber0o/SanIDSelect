# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .talent_customized_data_child import TalentCustomizedDataChild


class CompositeTalentBasicInfo(object):
    _types = {
        "name": str,
        "mobile_number": str,
        "mobile_code": str,
        "email": str,
        "experience_years": int,
        "age": int,
        "nationality_code": str,
        "gender": int,
        "current_location_code": str,
        "hometown_location_code": str,
        "preferred_location_code_list": List[str],
        "home_address": str,
        "identification_type": int,
        "identification_number": str,
        "birthday": int,
        "marital_status": int,
        "customized_data_list": List[TalentCustomizedDataChild],
        "hukou_location_code": str,
        "update_time": str,
        "create_time": str,
        "confidential": int,
    }

    def __init__(self, d=None):
        self.name: Optional[str] = None
        self.mobile_number: Optional[str] = None
        self.mobile_code: Optional[str] = None
        self.email: Optional[str] = None
        self.experience_years: Optional[int] = None
        self.age: Optional[int] = None
        self.nationality_code: Optional[str] = None
        self.gender: Optional[int] = None
        self.current_location_code: Optional[str] = None
        self.hometown_location_code: Optional[str] = None
        self.preferred_location_code_list: Optional[List[str]] = None
        self.home_address: Optional[str] = None
        self.identification_type: Optional[int] = None
        self.identification_number: Optional[str] = None
        self.birthday: Optional[int] = None
        self.marital_status: Optional[int] = None
        self.customized_data_list: Optional[List[TalentCustomizedDataChild]] = None
        self.hukou_location_code: Optional[str] = None
        self.update_time: Optional[str] = None
        self.create_time: Optional[str] = None
        self.confidential: Optional[int] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "CompositeTalentBasicInfoBuilder":
        return CompositeTalentBasicInfoBuilder()


class CompositeTalentBasicInfoBuilder(object):
    def __init__(self) -> None:
        self._composite_talent_basic_info = CompositeTalentBasicInfo()

    def name(self, name: str) -> "CompositeTalentBasicInfoBuilder":
        self._composite_talent_basic_info.name = name
        return self

    def mobile_number(self, mobile_number: str) -> "CompositeTalentBasicInfoBuilder":
        self._composite_talent_basic_info.mobile_number = mobile_number
        return self

    def mobile_code(self, mobile_code: str) -> "CompositeTalentBasicInfoBuilder":
        self._composite_talent_basic_info.mobile_code = mobile_code
        return self

    def email(self, email: str) -> "CompositeTalentBasicInfoBuilder":
        self._composite_talent_basic_info.email = email
        return self

    def experience_years(self, experience_years: int) -> "CompositeTalentBasicInfoBuilder":
        self._composite_talent_basic_info.experience_years = experience_years
        return self

    def age(self, age: int) -> "CompositeTalentBasicInfoBuilder":
        self._composite_talent_basic_info.age = age
        return self

    def nationality_code(self, nationality_code: str) -> "CompositeTalentBasicInfoBuilder":
        self._composite_talent_basic_info.nationality_code = nationality_code
        return self

    def gender(self, gender: int) -> "CompositeTalentBasicInfoBuilder":
        self._composite_talent_basic_info.gender = gender
        return self

    def current_location_code(self, current_location_code: str) -> "CompositeTalentBasicInfoBuilder":
        self._composite_talent_basic_info.current_location_code = current_location_code
        return self

    def hometown_location_code(self, hometown_location_code: str) -> "CompositeTalentBasicInfoBuilder":
        self._composite_talent_basic_info.hometown_location_code = hometown_location_code
        return self

    def preferred_location_code_list(self,
                                     preferred_location_code_list: List[str]) -> "CompositeTalentBasicInfoBuilder":
        self._composite_talent_basic_info.preferred_location_code_list = preferred_location_code_list
        return self

    def home_address(self, home_address: str) -> "CompositeTalentBasicInfoBuilder":
        self._composite_talent_basic_info.home_address = home_address
        return self

    def identification_type(self, identification_type: int) -> "CompositeTalentBasicInfoBuilder":
        self._composite_talent_basic_info.identification_type = identification_type
        return self

    def identification_number(self, identification_number: str) -> "CompositeTalentBasicInfoBuilder":
        self._composite_talent_basic_info.identification_number = identification_number
        return self

    def birthday(self, birthday: int) -> "CompositeTalentBasicInfoBuilder":
        self._composite_talent_basic_info.birthday = birthday
        return self

    def marital_status(self, marital_status: int) -> "CompositeTalentBasicInfoBuilder":
        self._composite_talent_basic_info.marital_status = marital_status
        return self

    def customized_data_list(self, customized_data_list: List[
        TalentCustomizedDataChild]) -> "CompositeTalentBasicInfoBuilder":
        self._composite_talent_basic_info.customized_data_list = customized_data_list
        return self

    def hukou_location_code(self, hukou_location_code: str) -> "CompositeTalentBasicInfoBuilder":
        self._composite_talent_basic_info.hukou_location_code = hukou_location_code
        return self

    def update_time(self, update_time: str) -> "CompositeTalentBasicInfoBuilder":
        self._composite_talent_basic_info.update_time = update_time
        return self

    def create_time(self, create_time: str) -> "CompositeTalentBasicInfoBuilder":
        self._composite_talent_basic_info.create_time = create_time
        return self

    def confidential(self, confidential: int) -> "CompositeTalentBasicInfoBuilder":
        self._composite_talent_basic_info.confidential = confidential
        return self

    def build(self) -> "CompositeTalentBasicInfo":
        return self._composite_talent_basic_info
