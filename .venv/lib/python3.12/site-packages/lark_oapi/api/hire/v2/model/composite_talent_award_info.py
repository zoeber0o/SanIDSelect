# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .talent_customized_data_child import TalentCustomizedDataChild


class CompositeTalentAwardInfo(object):
    _types = {
        "award_name": str,
        "award_time": str,
        "description": str,
        "customized_data_list": List[TalentCustomizedDataChild],
    }

    def __init__(self, d=None):
        self.award_name: Optional[str] = None
        self.award_time: Optional[str] = None
        self.description: Optional[str] = None
        self.customized_data_list: Optional[List[TalentCustomizedDataChild]] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "CompositeTalentAwardInfoBuilder":
        return CompositeTalentAwardInfoBuilder()


class CompositeTalentAwardInfoBuilder(object):
    def __init__(self) -> None:
        self._composite_talent_award_info = CompositeTalentAwardInfo()

    def award_name(self, award_name: str) -> "CompositeTalentAwardInfoBuilder":
        self._composite_talent_award_info.award_name = award_name
        return self

    def award_time(self, award_time: str) -> "CompositeTalentAwardInfoBuilder":
        self._composite_talent_award_info.award_time = award_time
        return self

    def description(self, description: str) -> "CompositeTalentAwardInfoBuilder":
        self._composite_talent_award_info.description = description
        return self

    def customized_data_list(self, customized_data_list: List[
        TalentCustomizedDataChild]) -> "CompositeTalentAwardInfoBuilder":
        self._composite_talent_award_info.customized_data_list = customized_data_list
        return self

    def build(self) -> "CompositeTalentAwardInfo":
        return self._composite_talent_award_info
