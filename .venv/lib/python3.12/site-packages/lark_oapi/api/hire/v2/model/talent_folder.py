# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class TalentFolder(object):
    _types = {
        "name": str,
        "folder_id": str,
        "owner_id": str,
        "add_time": str,
    }

    def __init__(self, d=None):
        self.name: Optional[str] = None
        self.folder_id: Optional[str] = None
        self.owner_id: Optional[str] = None
        self.add_time: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "TalentFolderBuilder":
        return TalentFolderBuilder()


class TalentFolderBuilder(object):
    def __init__(self) -> None:
        self._talent_folder = TalentFolder()

    def name(self, name: str) -> "TalentFolderBuilder":
        self._talent_folder.name = name
        return self

    def folder_id(self, folder_id: str) -> "TalentFolderBuilder":
        self._talent_folder.folder_id = folder_id
        return self

    def owner_id(self, owner_id: str) -> "TalentFolderBuilder":
        self._talent_folder.owner_id = owner_id
        return self

    def add_time(self, add_time: str) -> "TalentFolderBuilder":
        self._talent_folder.add_time = add_time
        return self

    def build(self) -> "TalentFolder":
        return self._talent_folder
