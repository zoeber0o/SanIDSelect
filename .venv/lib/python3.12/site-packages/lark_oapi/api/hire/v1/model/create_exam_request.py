# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.model import BaseRequest
from lark_oapi.core.enum import HttpMethod, AccessTokenType
from .create_exam_request_body import CreateExamRequestBody


class CreateExamRequest(BaseRequest):
    def __init__(self) -> None:
        super().__init__()
        self.user_id_type: Optional[str] = None
        self.request_body: Optional[CreateExamRequestBody] = None

    @staticmethod
    def builder() -> "CreateExamRequestBuilder":
        return CreateExamRequestBuilder()


class CreateExamRequestBuilder(object):

    def __init__(self) -> None:
        create_exam_request = CreateExamRequest()
        create_exam_request.http_method = HttpMethod.POST
        create_exam_request.uri = "/open-apis/hire/v1/exams"
        create_exam_request.token_types = {AccessTokenType.TENANT}
        self._create_exam_request: CreateExamRequest = create_exam_request

    def user_id_type(self, user_id_type: str) -> "CreateExamRequestBuilder":
        self._create_exam_request.user_id_type = user_id_type
        self._create_exam_request.add_query("user_id_type", user_id_type)
        return self

    def request_body(self, request_body: CreateExamRequestBody) -> "CreateExamRequestBuilder":
        self._create_exam_request.request_body = request_body
        self._create_exam_request.body = request_body
        return self

    def build(self) -> CreateExamRequest:
        return self._create_exam_request
