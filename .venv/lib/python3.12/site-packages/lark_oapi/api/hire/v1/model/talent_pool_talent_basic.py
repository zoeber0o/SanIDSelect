# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .talent_detail_talent_nationality import TalentDetailTalentNationality
from .common_city_info import CommonCityInfo
from .common_city_info import CommonCityInfo
from .common_city_info import CommonCityInfo


class TalentPoolTalentBasic(object):
    _types = {
        "id": str,
        "name": str,
        "mobile": str,
        "mobile_code": str,
        "mobile_country_code": str,
        "email": str,
        "experience_years": int,
        "age": int,
        "nationality": TalentDetailTalentNationality,
        "gender": int,
        "current_city": CommonCityInfo,
        "hometown_city": CommonCityInfo,
        "preferred_city_list": List[CommonCityInfo],
        "identification_type": int,
        "identification_number": str,
        "birthday": int,
        "creator_id": str,
        "marital_status": int,
        "update_time": str,
        "create_time": str,
    }

    def __init__(self, d=None):
        self.id: Optional[str] = None
        self.name: Optional[str] = None
        self.mobile: Optional[str] = None
        self.mobile_code: Optional[str] = None
        self.mobile_country_code: Optional[str] = None
        self.email: Optional[str] = None
        self.experience_years: Optional[int] = None
        self.age: Optional[int] = None
        self.nationality: Optional[TalentDetailTalentNationality] = None
        self.gender: Optional[int] = None
        self.current_city: Optional[CommonCityInfo] = None
        self.hometown_city: Optional[CommonCityInfo] = None
        self.preferred_city_list: Optional[List[CommonCityInfo]] = None
        self.identification_type: Optional[int] = None
        self.identification_number: Optional[str] = None
        self.birthday: Optional[int] = None
        self.creator_id: Optional[str] = None
        self.marital_status: Optional[int] = None
        self.update_time: Optional[str] = None
        self.create_time: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "TalentPoolTalentBasicBuilder":
        return TalentPoolTalentBasicBuilder()


class TalentPoolTalentBasicBuilder(object):
    def __init__(self) -> None:
        self._talent_pool_talent_basic = TalentPoolTalentBasic()

    def id(self, id: str) -> "TalentPoolTalentBasicBuilder":
        self._talent_pool_talent_basic.id = id
        return self

    def name(self, name: str) -> "TalentPoolTalentBasicBuilder":
        self._talent_pool_talent_basic.name = name
        return self

    def mobile(self, mobile: str) -> "TalentPoolTalentBasicBuilder":
        self._talent_pool_talent_basic.mobile = mobile
        return self

    def mobile_code(self, mobile_code: str) -> "TalentPoolTalentBasicBuilder":
        self._talent_pool_talent_basic.mobile_code = mobile_code
        return self

    def mobile_country_code(self, mobile_country_code: str) -> "TalentPoolTalentBasicBuilder":
        self._talent_pool_talent_basic.mobile_country_code = mobile_country_code
        return self

    def email(self, email: str) -> "TalentPoolTalentBasicBuilder":
        self._talent_pool_talent_basic.email = email
        return self

    def experience_years(self, experience_years: int) -> "TalentPoolTalentBasicBuilder":
        self._talent_pool_talent_basic.experience_years = experience_years
        return self

    def age(self, age: int) -> "TalentPoolTalentBasicBuilder":
        self._talent_pool_talent_basic.age = age
        return self

    def nationality(self, nationality: TalentDetailTalentNationality) -> "TalentPoolTalentBasicBuilder":
        self._talent_pool_talent_basic.nationality = nationality
        return self

    def gender(self, gender: int) -> "TalentPoolTalentBasicBuilder":
        self._talent_pool_talent_basic.gender = gender
        return self

    def current_city(self, current_city: CommonCityInfo) -> "TalentPoolTalentBasicBuilder":
        self._talent_pool_talent_basic.current_city = current_city
        return self

    def hometown_city(self, hometown_city: CommonCityInfo) -> "TalentPoolTalentBasicBuilder":
        self._talent_pool_talent_basic.hometown_city = hometown_city
        return self

    def preferred_city_list(self, preferred_city_list: List[CommonCityInfo]) -> "TalentPoolTalentBasicBuilder":
        self._talent_pool_talent_basic.preferred_city_list = preferred_city_list
        return self

    def identification_type(self, identification_type: int) -> "TalentPoolTalentBasicBuilder":
        self._talent_pool_talent_basic.identification_type = identification_type
        return self

    def identification_number(self, identification_number: str) -> "TalentPoolTalentBasicBuilder":
        self._talent_pool_talent_basic.identification_number = identification_number
        return self

    def birthday(self, birthday: int) -> "TalentPoolTalentBasicBuilder":
        self._talent_pool_talent_basic.birthday = birthday
        return self

    def creator_id(self, creator_id: str) -> "TalentPoolTalentBasicBuilder":
        self._talent_pool_talent_basic.creator_id = creator_id
        return self

    def marital_status(self, marital_status: int) -> "TalentPoolTalentBasicBuilder":
        self._talent_pool_talent_basic.marital_status = marital_status
        return self

    def update_time(self, update_time: str) -> "TalentPoolTalentBasicBuilder":
        self._talent_pool_talent_basic.update_time = update_time
        return self

    def create_time(self, create_time: str) -> "TalentPoolTalentBasicBuilder":
        self._talent_pool_talent_basic.create_time = create_time
        return self

    def build(self) -> "TalentPoolTalentBasic":
        return self._talent_pool_talent_basic
