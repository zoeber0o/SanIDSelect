# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .id_name_object import IdNameObject


class JobConfigInterviewRound(object):
    _types = {
        "interviewer_list": List[IdNameObject],
        "round": int,
    }

    def __init__(self, d=None):
        self.interviewer_list: Optional[List[IdNameObject]] = None
        self.round: Optional[int] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "JobConfigInterviewRoundBuilder":
        return JobConfigInterviewRoundBuilder()


class JobConfigInterviewRoundBuilder(object):
    def __init__(self) -> None:
        self._job_config_interview_round = JobConfigInterviewRound()

    def interviewer_list(self, interviewer_list: List[IdNameObject]) -> "JobConfigInterviewRoundBuilder":
        self._job_config_interview_round.interviewer_list = interviewer_list
        return self

    def round(self, round: int) -> "JobConfigInterviewRoundBuilder":
        self._job_config_interview_round.round = round
        return self

    def build(self) -> "JobConfigInterviewRound":
        return self._job_config_interview_round
