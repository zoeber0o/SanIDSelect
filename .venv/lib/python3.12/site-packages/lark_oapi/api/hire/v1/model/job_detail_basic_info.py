# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .job_detail_recruitment_type import JobDetailRecruitmentType
from .job_detail_department import JobDetailDepartment
from .job_detail_level import JobDetailLevel
from .job_detail_level import JobDetailLevel
from .job_detail_highlight import JobDetailHighlight
from .job_detail_category import JobDetailCategory
from .job_detail_type import JobDetailType
from .i18n import I18n
from .job_customized_data import JobCustomizedData
from .id_name_object import IdNameObject
from .id_name_object import IdNameObject
from .code_name_object import CodeNameObject
from .job_detail_target_major_info import JobDetailTargetMajorInfo


class JobDetailBasicInfo(object):
    _types = {
        "id": str,
        "title": str,
        "description": str,
        "code": str,
        "requirement": str,
        "recruitment_type": JobDetailRecruitmentType,
        "department": JobDetailDepartment,
        "min_job_level": JobDetailLevel,
        "max_job_level": JobDetailLevel,
        "highlight_list": List[JobDetailHighlight],
        "job_category": JobDetailCategory,
        "job_type": JobDetailType,
        "active_status": int,
        "creator_id": str,
        "create_time": str,
        "update_time": str,
        "process_type": int,
        "process_id": str,
        "process_name": I18n,
        "customized_data_list": List[JobCustomizedData],
        "job_function": IdNameObject,
        "subject": IdNameObject,
        "head_count": int,
        "experience": int,
        "expiry_time": str,
        "min_salary": int,
        "max_salary": int,
        "required_degree": int,
        "city_list": List[CodeNameObject],
        "job_attribute": int,
        "target_major_list": List[JobDetailTargetMajorInfo],
        "storefront_mode": int,
    }

    def __init__(self, d=None):
        self.id: Optional[str] = None
        self.title: Optional[str] = None
        self.description: Optional[str] = None
        self.code: Optional[str] = None
        self.requirement: Optional[str] = None
        self.recruitment_type: Optional[JobDetailRecruitmentType] = None
        self.department: Optional[JobDetailDepartment] = None
        self.min_job_level: Optional[JobDetailLevel] = None
        self.max_job_level: Optional[JobDetailLevel] = None
        self.highlight_list: Optional[List[JobDetailHighlight]] = None
        self.job_category: Optional[JobDetailCategory] = None
        self.job_type: Optional[JobDetailType] = None
        self.active_status: Optional[int] = None
        self.creator_id: Optional[str] = None
        self.create_time: Optional[str] = None
        self.update_time: Optional[str] = None
        self.process_type: Optional[int] = None
        self.process_id: Optional[str] = None
        self.process_name: Optional[I18n] = None
        self.customized_data_list: Optional[List[JobCustomizedData]] = None
        self.job_function: Optional[IdNameObject] = None
        self.subject: Optional[IdNameObject] = None
        self.head_count: Optional[int] = None
        self.experience: Optional[int] = None
        self.expiry_time: Optional[str] = None
        self.min_salary: Optional[int] = None
        self.max_salary: Optional[int] = None
        self.required_degree: Optional[int] = None
        self.city_list: Optional[List[CodeNameObject]] = None
        self.job_attribute: Optional[int] = None
        self.target_major_list: Optional[List[JobDetailTargetMajorInfo]] = None
        self.storefront_mode: Optional[int] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "JobDetailBasicInfoBuilder":
        return JobDetailBasicInfoBuilder()


class JobDetailBasicInfoBuilder(object):
    def __init__(self) -> None:
        self._job_detail_basic_info = JobDetailBasicInfo()

    def id(self, id: str) -> "JobDetailBasicInfoBuilder":
        self._job_detail_basic_info.id = id
        return self

    def title(self, title: str) -> "JobDetailBasicInfoBuilder":
        self._job_detail_basic_info.title = title
        return self

    def description(self, description: str) -> "JobDetailBasicInfoBuilder":
        self._job_detail_basic_info.description = description
        return self

    def code(self, code: str) -> "JobDetailBasicInfoBuilder":
        self._job_detail_basic_info.code = code
        return self

    def requirement(self, requirement: str) -> "JobDetailBasicInfoBuilder":
        self._job_detail_basic_info.requirement = requirement
        return self

    def recruitment_type(self, recruitment_type: JobDetailRecruitmentType) -> "JobDetailBasicInfoBuilder":
        self._job_detail_basic_info.recruitment_type = recruitment_type
        return self

    def department(self, department: JobDetailDepartment) -> "JobDetailBasicInfoBuilder":
        self._job_detail_basic_info.department = department
        return self

    def min_job_level(self, min_job_level: JobDetailLevel) -> "JobDetailBasicInfoBuilder":
        self._job_detail_basic_info.min_job_level = min_job_level
        return self

    def max_job_level(self, max_job_level: JobDetailLevel) -> "JobDetailBasicInfoBuilder":
        self._job_detail_basic_info.max_job_level = max_job_level
        return self

    def highlight_list(self, highlight_list: List[JobDetailHighlight]) -> "JobDetailBasicInfoBuilder":
        self._job_detail_basic_info.highlight_list = highlight_list
        return self

    def job_category(self, job_category: JobDetailCategory) -> "JobDetailBasicInfoBuilder":
        self._job_detail_basic_info.job_category = job_category
        return self

    def job_type(self, job_type: JobDetailType) -> "JobDetailBasicInfoBuilder":
        self._job_detail_basic_info.job_type = job_type
        return self

    def active_status(self, active_status: int) -> "JobDetailBasicInfoBuilder":
        self._job_detail_basic_info.active_status = active_status
        return self

    def creator_id(self, creator_id: str) -> "JobDetailBasicInfoBuilder":
        self._job_detail_basic_info.creator_id = creator_id
        return self

    def create_time(self, create_time: str) -> "JobDetailBasicInfoBuilder":
        self._job_detail_basic_info.create_time = create_time
        return self

    def update_time(self, update_time: str) -> "JobDetailBasicInfoBuilder":
        self._job_detail_basic_info.update_time = update_time
        return self

    def process_type(self, process_type: int) -> "JobDetailBasicInfoBuilder":
        self._job_detail_basic_info.process_type = process_type
        return self

    def process_id(self, process_id: str) -> "JobDetailBasicInfoBuilder":
        self._job_detail_basic_info.process_id = process_id
        return self

    def process_name(self, process_name: I18n) -> "JobDetailBasicInfoBuilder":
        self._job_detail_basic_info.process_name = process_name
        return self

    def customized_data_list(self, customized_data_list: List[JobCustomizedData]) -> "JobDetailBasicInfoBuilder":
        self._job_detail_basic_info.customized_data_list = customized_data_list
        return self

    def job_function(self, job_function: IdNameObject) -> "JobDetailBasicInfoBuilder":
        self._job_detail_basic_info.job_function = job_function
        return self

    def subject(self, subject: IdNameObject) -> "JobDetailBasicInfoBuilder":
        self._job_detail_basic_info.subject = subject
        return self

    def head_count(self, head_count: int) -> "JobDetailBasicInfoBuilder":
        self._job_detail_basic_info.head_count = head_count
        return self

    def experience(self, experience: int) -> "JobDetailBasicInfoBuilder":
        self._job_detail_basic_info.experience = experience
        return self

    def expiry_time(self, expiry_time: str) -> "JobDetailBasicInfoBuilder":
        self._job_detail_basic_info.expiry_time = expiry_time
        return self

    def min_salary(self, min_salary: int) -> "JobDetailBasicInfoBuilder":
        self._job_detail_basic_info.min_salary = min_salary
        return self

    def max_salary(self, max_salary: int) -> "JobDetailBasicInfoBuilder":
        self._job_detail_basic_info.max_salary = max_salary
        return self

    def required_degree(self, required_degree: int) -> "JobDetailBasicInfoBuilder":
        self._job_detail_basic_info.required_degree = required_degree
        return self

    def city_list(self, city_list: List[CodeNameObject]) -> "JobDetailBasicInfoBuilder":
        self._job_detail_basic_info.city_list = city_list
        return self

    def job_attribute(self, job_attribute: int) -> "JobDetailBasicInfoBuilder":
        self._job_detail_basic_info.job_attribute = job_attribute
        return self

    def target_major_list(self, target_major_list: List[JobDetailTargetMajorInfo]) -> "JobDetailBasicInfoBuilder":
        self._job_detail_basic_info.target_major_list = target_major_list
        return self

    def storefront_mode(self, storefront_mode: int) -> "JobDetailBasicInfoBuilder":
        self._job_detail_basic_info.storefront_mode = storefront_mode
        return self

    def build(self) -> "JobDetailBasicInfo":
        return self._job_detail_basic_info
