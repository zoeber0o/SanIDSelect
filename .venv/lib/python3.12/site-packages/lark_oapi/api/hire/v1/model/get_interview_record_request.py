# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.model import BaseRequest
from lark_oapi.core.enum import HttpMethod, AccessTokenType


class GetInterviewRecordRequest(BaseRequest):
    def __init__(self) -> None:
        super().__init__()
        self.user_id_type: Optional[str] = None
        self.interview_record_id: Optional[str] = None

    @staticmethod
    def builder() -> "GetInterviewRecordRequestBuilder":
        return GetInterviewRecordRequestBuilder()


class GetInterviewRecordRequestBuilder(object):

    def __init__(self) -> None:
        get_interview_record_request = GetInterviewRecordRequest()
        get_interview_record_request.http_method = HttpMethod.GET
        get_interview_record_request.uri = "/open-apis/hire/v1/interview_records/:interview_record_id"
        get_interview_record_request.token_types = {AccessTokenType.TENANT}
        self._get_interview_record_request: GetInterviewRecordRequest = get_interview_record_request

    def user_id_type(self, user_id_type: str) -> "GetInterviewRecordRequestBuilder":
        self._get_interview_record_request.user_id_type = user_id_type
        self._get_interview_record_request.add_query("user_id_type", user_id_type)
        return self

    def interview_record_id(self, interview_record_id: str) -> "GetInterviewRecordRequestBuilder":
        self._get_interview_record_request.interview_record_id = interview_record_id
        self._get_interview_record_request.paths["interview_record_id"] = str(interview_record_id)
        return self

    def build(self) -> GetInterviewRecordRequest:
        return self._get_interview_record_request
