# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .i18n import I18n
from .i18n import I18n
from .interview_feedback_form_dimension import InterviewFeedbackFormDimension


class InterviewFeedbackFormModule(object):
    _types = {
        "id": str,
        "name": I18n,
        "description": I18n,
        "type": int,
        "sequence": int,
        "weight": float,
        "dimensions": List[InterviewFeedbackFormDimension],
    }

    def __init__(self, d=None):
        self.id: Optional[str] = None
        self.name: Optional[I18n] = None
        self.description: Optional[I18n] = None
        self.type: Optional[int] = None
        self.sequence: Optional[int] = None
        self.weight: Optional[float] = None
        self.dimensions: Optional[List[InterviewFeedbackFormDimension]] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "InterviewFeedbackFormModuleBuilder":
        return InterviewFeedbackFormModuleBuilder()


class InterviewFeedbackFormModuleBuilder(object):
    def __init__(self) -> None:
        self._interview_feedback_form_module = InterviewFeedbackFormModule()

    def id(self, id: str) -> "InterviewFeedbackFormModuleBuilder":
        self._interview_feedback_form_module.id = id
        return self

    def name(self, name: I18n) -> "InterviewFeedbackFormModuleBuilder":
        self._interview_feedback_form_module.name = name
        return self

    def description(self, description: I18n) -> "InterviewFeedbackFormModuleBuilder":
        self._interview_feedback_form_module.description = description
        return self

    def type(self, type: int) -> "InterviewFeedbackFormModuleBuilder":
        self._interview_feedback_form_module.type = type
        return self

    def sequence(self, sequence: int) -> "InterviewFeedbackFormModuleBuilder":
        self._interview_feedback_form_module.sequence = sequence
        return self

    def weight(self, weight: float) -> "InterviewFeedbackFormModuleBuilder":
        self._interview_feedback_form_module.weight = weight
        return self

    def dimensions(self, dimensions: List[InterviewFeedbackFormDimension]) -> "InterviewFeedbackFormModuleBuilder":
        self._interview_feedback_form_module.dimensions = dimensions
        return self

    def build(self) -> "InterviewFeedbackFormModule":
        return self._interview_feedback_form_module
