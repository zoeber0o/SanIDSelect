# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class AwardInfo(object):
    _types = {
        "award_time": int,
        "desc": str,
        "title": str,
    }

    def __init__(self, d=None):
        self.award_time: Optional[int] = None
        self.desc: Optional[str] = None
        self.title: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "AwardInfoBuilder":
        return AwardInfoBuilder()


class AwardInfoBuilder(object):
    def __init__(self) -> None:
        self._award_info = AwardInfo()

    def award_time(self, award_time: int) -> "AwardInfoBuilder":
        self._award_info.award_time = award_time
        return self

    def desc(self, desc: str) -> "AwardInfoBuilder":
        self._award_info.desc = desc
        return self

    def title(self, title: str) -> "AwardInfoBuilder":
        self._award_info.title = title
        return self

    def build(self) -> "AwardInfo":
        return self._award_info
