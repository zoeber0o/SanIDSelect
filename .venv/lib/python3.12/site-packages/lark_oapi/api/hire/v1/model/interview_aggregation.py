# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .interview_extend_v2 import InterviewExtendV2


class InterviewAggregation(object):
    _types = {
        "interviews": List[InterviewExtendV2],
    }

    def __init__(self, d=None):
        self.interviews: Optional[List[InterviewExtendV2]] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "InterviewAggregationBuilder":
        return InterviewAggregationBuilder()


class InterviewAggregationBuilder(object):
    def __init__(self) -> None:
        self._interview_aggregation = InterviewAggregation()

    def interviews(self, interviews: List[InterviewExtendV2]) -> "InterviewAggregationBuilder":
        self._interview_aggregation.interviews = interviews
        return self

    def build(self) -> "InterviewAggregation":
        return self._interview_aggregation
