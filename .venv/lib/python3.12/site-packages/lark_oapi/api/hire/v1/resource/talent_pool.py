# Code generated by Lark OpenAPI.

import io
from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.const import UTF_8, CONTENT_TYPE, APPLICATION_JSON
from lark_oapi.core import JSON
from lark_oapi.core.token import verify
from lark_oapi.core.http import Transport
from lark_oapi.core.model import Config, RequestOption, RawResponse
from lark_oapi.core.utils import Files
from requests_toolbelt import MultipartEncoder
from ..model.batch_change_talent_pool_talent_pool_request import BatchChangeTalentPoolTalentPoolRequest
from ..model.batch_change_talent_pool_talent_pool_response import BatchChangeTalentPoolTalentPoolResponse
from ..model.move_talent_talent_pool_request import MoveTalentTalentPoolRequest
from ..model.move_talent_talent_pool_response import MoveTalentTalentPoolResponse
from ..model.search_talent_pool_request import SearchTalentPoolRequest
from ..model.search_talent_pool_response import SearchTalentPoolResponse


class TalentPool(object):
    def __init__(self, config: Config) -> None:
        self.config: Config = config

    def batch_change_talent_pool(self, request: BatchChangeTalentPoolTalentPoolRequest,
                                 option: Optional[RequestOption] = None) -> BatchChangeTalentPoolTalentPoolResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: BatchChangeTalentPoolTalentPoolResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                           BatchChangeTalentPoolTalentPoolResponse)
        response.raw = resp

        return response

    async def abatch_change_talent_pool(self, request: BatchChangeTalentPoolTalentPoolRequest, option: Optional[
        RequestOption] = None) -> BatchChangeTalentPoolTalentPoolResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: BatchChangeTalentPoolTalentPoolResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                           BatchChangeTalentPoolTalentPoolResponse)
        response.raw = resp

        return response

    def move_talent(self, request: MoveTalentTalentPoolRequest,
                    option: Optional[RequestOption] = None) -> MoveTalentTalentPoolResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: MoveTalentTalentPoolResponse = JSON.unmarshal(str(resp.content, UTF_8), MoveTalentTalentPoolResponse)
        response.raw = resp

        return response

    async def amove_talent(self, request: MoveTalentTalentPoolRequest,
                           option: Optional[RequestOption] = None) -> MoveTalentTalentPoolResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: MoveTalentTalentPoolResponse = JSON.unmarshal(str(resp.content, UTF_8), MoveTalentTalentPoolResponse)
        response.raw = resp

        return response

    def search(self, request: SearchTalentPoolRequest,
               option: Optional[RequestOption] = None) -> SearchTalentPoolResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: SearchTalentPoolResponse = JSON.unmarshal(str(resp.content, UTF_8), SearchTalentPoolResponse)
        response.raw = resp

        return response

    async def asearch(self, request: SearchTalentPoolRequest,
                      option: Optional[RequestOption] = None) -> SearchTalentPoolResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: SearchTalentPoolResponse = JSON.unmarshal(str(resp.content, UTF_8), SearchTalentPoolResponse)
        response.raw = resp

        return response
