# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class ScoreDimensionConfig(object):
    _types = {
        "score_dimension_type": int,
        "lower_limit_score": int,
        "upper_limit_score": int,
    }

    def __init__(self, d=None):
        self.score_dimension_type: Optional[int] = None
        self.lower_limit_score: Optional[int] = None
        self.upper_limit_score: Optional[int] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "ScoreDimensionConfigBuilder":
        return ScoreDimensionConfigBuilder()


class ScoreDimensionConfigBuilder(object):
    def __init__(self) -> None:
        self._score_dimension_config = ScoreDimensionConfig()

    def score_dimension_type(self, score_dimension_type: int) -> "ScoreDimensionConfigBuilder":
        self._score_dimension_config.score_dimension_type = score_dimension_type
        return self

    def lower_limit_score(self, lower_limit_score: int) -> "ScoreDimensionConfigBuilder":
        self._score_dimension_config.lower_limit_score = lower_limit_score
        return self

    def upper_limit_score(self, upper_limit_score: int) -> "ScoreDimensionConfigBuilder":
        self._score_dimension_config.upper_limit_score = upper_limit_score
        return self

    def build(self) -> "ScoreDimensionConfig":
        return self._score_dimension_config
