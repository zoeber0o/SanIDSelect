# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class CreateCardElementRequestBody(object):
    _types = {
        "type": str,
        "target_element_id": str,
        "uuid": str,
        "sequence": int,
        "elements": str,
    }

    def __init__(self, d=None):
        self.type: Optional[str] = None
        self.target_element_id: Optional[str] = None
        self.uuid: Optional[str] = None
        self.sequence: Optional[int] = None
        self.elements: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "CreateCardElementRequestBodyBuilder":
        return CreateCardElementRequestBodyBuilder()


class CreateCardElementRequestBodyBuilder(object):
    def __init__(self) -> None:
        self._create_card_element_request_body = CreateCardElementRequestBody()

    def type(self, type: str) -> "CreateCardElementRequestBodyBuilder":
        self._create_card_element_request_body.type = type
        return self

    def target_element_id(self, target_element_id: str) -> "CreateCardElementRequestBodyBuilder":
        self._create_card_element_request_body.target_element_id = target_element_id
        return self

    def uuid(self, uuid: str) -> "CreateCardElementRequestBodyBuilder":
        self._create_card_element_request_body.uuid = uuid
        return self

    def sequence(self, sequence: int) -> "CreateCardElementRequestBodyBuilder":
        self._create_card_element_request_body.sequence = sequence
        return self

    def elements(self, elements: str) -> "CreateCardElementRequestBodyBuilder":
        self._create_card_element_request_body.elements = elements
        return self

    def build(self) -> "CreateCardElementRequestBody":
        return self._create_card_element_request_body
