# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class ReportTopUser(object):
    _types = {
        "id": int,
        "name": str,
        "user_type": int,
        "meeting_count": int,
        "meeting_duration": int,
    }

    def __init__(self, d=None):
        self.id: Optional[int] = None
        self.name: Optional[str] = None
        self.user_type: Optional[int] = None
        self.meeting_count: Optional[int] = None
        self.meeting_duration: Optional[int] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "ReportTopUserBuilder":
        return ReportTopUserBuilder()


class ReportTopUserBuilder(object):
    def __init__(self) -> None:
        self._report_top_user = ReportTopUser()

    def id(self, id: int) -> "ReportTopUserBuilder":
        self._report_top_user.id = id
        return self

    def name(self, name: str) -> "ReportTopUserBuilder":
        self._report_top_user.name = name
        return self

    def user_type(self, user_type: int) -> "ReportTopUserBuilder":
        self._report_top_user.user_type = user_type
        return self

    def meeting_count(self, meeting_count: int) -> "ReportTopUserBuilder":
        self._report_top_user.meeting_count = meeting_count
        return self

    def meeting_duration(self, meeting_duration: int) -> "ReportTopUserBuilder":
        self._report_top_user.meeting_duration = meeting_duration
        return self

    def build(self) -> "ReportTopUser":
        return self._report_top_user
