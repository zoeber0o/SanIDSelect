# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .my_ai_plugin_context import MyAiPluginContext
from .my_ai_vc_room_extra import MyAiVcRoomExtra


class MyAiVcRoomScenarioContext(object):
    _types = {
        "plugins": List[MyAiPluginContext],
        "extra": MyAiVcRoomExtra,
    }

    def __init__(self, d=None):
        self.plugins: Optional[List[MyAiPluginContext]] = None
        self.extra: Optional[MyAiVcRoomExtra] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "MyAiVcRoomScenarioContextBuilder":
        return MyAiVcRoomScenarioContextBuilder()


class MyAiVcRoomScenarioContextBuilder(object):
    def __init__(self) -> None:
        self._my_ai_vc_room_scenario_context = MyAiVcRoomScenarioContext()

    def plugins(self, plugins: List[MyAiPluginContext]) -> "MyAiVcRoomScenarioContextBuilder":
        self._my_ai_vc_room_scenario_context.plugins = plugins
        return self

    def extra(self, extra: MyAiVcRoomExtra) -> "MyAiVcRoomScenarioContextBuilder":
        self._my_ai_vc_room_scenario_context.extra = extra
        return self

    def build(self) -> "MyAiVcRoomScenarioContext":
        return self._my_ai_vc_room_scenario_context
