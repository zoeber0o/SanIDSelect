# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class MeetingRelatedArtifacts(object):
    _types = {
        "note_doc_token": str,
        "verbatim_doc_token": str,
    }

    def __init__(self, d=None):
        self.note_doc_token: Optional[str] = None
        self.verbatim_doc_token: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "MeetingRelatedArtifactsBuilder":
        return MeetingRelatedArtifactsBuilder()


class MeetingRelatedArtifactsBuilder(object):
    def __init__(self) -> None:
        self._meeting_related_artifacts = MeetingRelatedArtifacts()

    def note_doc_token(self, note_doc_token: str) -> "MeetingRelatedArtifactsBuilder":
        self._meeting_related_artifacts.note_doc_token = note_doc_token
        return self

    def verbatim_doc_token(self, verbatim_doc_token: str) -> "MeetingRelatedArtifactsBuilder":
        self._meeting_related_artifacts.verbatim_doc_token = verbatim_doc_token
        return self

    def build(self) -> "MeetingRelatedArtifacts":
        return self._meeting_related_artifacts
