# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .scope_config import ScopeConfig
from .scope_config import ScopeConfig


class GetScopeConfigResponseBody(object):
    _types = {
        "current_config": ScopeConfig,
        "origin_configs": List[ScopeConfig],
    }

    def __init__(self, d=None):
        self.current_config: Optional[ScopeConfig] = None
        self.origin_configs: Optional[List[ScopeConfig]] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "GetScopeConfigResponseBodyBuilder":
        return GetScopeConfigResponseBodyBuilder()


class GetScopeConfigResponseBodyBuilder(object):
    def __init__(self) -> None:
        self._get_scope_config_response_body = GetScopeConfigResponseBody()

    def current_config(self, current_config: ScopeConfig) -> "GetScopeConfigResponseBodyBuilder":
        self._get_scope_config_response_body.current_config = current_config
        return self

    def origin_configs(self, origin_configs: List[ScopeConfig]) -> "GetScopeConfigResponseBodyBuilder":
        self._get_scope_config_response_body.origin_configs = origin_configs
        return self

    def build(self) -> "GetScopeConfigResponseBody":
        return self._get_scope_config_response_body
