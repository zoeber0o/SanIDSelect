# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class MyAiVcMeetingSuggestQuestionResult(object):
    _types = {
        "present": str,
    }

    def __init__(self, d=None):
        self.present: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "MyAiVcMeetingSuggestQuestionResultBuilder":
        return MyAiVcMeetingSuggestQuestionResultBuilder()


class MyAiVcMeetingSuggestQuestionResultBuilder(object):
    def __init__(self) -> None:
        self._my_ai_vc_meeting_suggest_question_result = MyAiVcMeetingSuggestQuestionResult()

    def present(self, present: str) -> "MyAiVcMeetingSuggestQuestionResultBuilder":
        self._my_ai_vc_meeting_suggest_question_result.present = present
        return self

    def build(self) -> "MyAiVcMeetingSuggestQuestionResult":
        return self._my_ai_vc_meeting_suggest_question_result
