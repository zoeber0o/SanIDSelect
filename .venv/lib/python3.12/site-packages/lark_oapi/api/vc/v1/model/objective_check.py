# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .objective_check_param import ObjectiveCheckParam


class ObjectiveCheck(object):
    _types = {
        "objective_check_types": List[int],
        "objective_check_params": List[ObjectiveCheckParam],
    }

    def __init__(self, d=None):
        self.objective_check_types: Optional[List[int]] = None
        self.objective_check_params: Optional[List[ObjectiveCheckParam]] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "ObjectiveCheckBuilder":
        return ObjectiveCheckBuilder()


class ObjectiveCheckBuilder(object):
    def __init__(self) -> None:
        self._objective_check = ObjectiveCheck()

    def objective_check_types(self, objective_check_types: List[int]) -> "ObjectiveCheckBuilder":
        self._objective_check.objective_check_types = objective_check_types
        return self

    def objective_check_params(self, objective_check_params: List[ObjectiveCheckParam]) -> "ObjectiveCheckBuilder":
        self._objective_check.objective_check_params = objective_check_params
        return self

    def build(self) -> "ObjectiveCheck":
        return self._objective_check
