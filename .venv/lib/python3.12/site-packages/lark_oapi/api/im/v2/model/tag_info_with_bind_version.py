# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .tag_info import TagInfo


class TagInfoWithBindVersion(object):
    _types = {
        "tag_info": TagInfo,
        "bind_version": str,
    }

    def __init__(self, d=None):
        self.tag_info: Optional[TagInfo] = None
        self.bind_version: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "TagInfoWithBindVersionBuilder":
        return TagInfoWithBindVersionBuilder()


class TagInfoWithBindVersionBuilder(object):
    def __init__(self) -> None:
        self._tag_info_with_bind_version = TagInfoWithBindVersion()

    def tag_info(self, tag_info: TagInfo) -> "TagInfoWithBindVersionBuilder":
        self._tag_info_with_bind_version.tag_info = tag_info
        return self

    def bind_version(self, bind_version: str) -> "TagInfoWithBindVersionBuilder":
        self._tag_info_with_bind_version.bind_version = bind_version
        return self

    def build(self) -> "TagInfoWithBindVersion":
        return self._tag_info_with_bind_version
