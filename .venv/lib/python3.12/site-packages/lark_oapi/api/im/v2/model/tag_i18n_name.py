# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class TagI18nName(object):
    _types = {
        "locale": str,
        "name": str,
    }

    def __init__(self, d=None):
        self.locale: Optional[str] = None
        self.name: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "TagI18nNameBuilder":
        return TagI18nNameBuilder()


class TagI18nNameBuilder(object):
    def __init__(self) -> None:
        self._tag_i18n_name = TagI18nName()

    def locale(self, locale: str) -> "TagI18nNameBuilder":
        self._tag_i18n_name.locale = locale
        return self

    def name(self, name: str) -> "TagI18nNameBuilder":
        self._tag_i18n_name.name = name
        return self

    def build(self) -> "TagI18nName":
        return self._tag_i18n_name
