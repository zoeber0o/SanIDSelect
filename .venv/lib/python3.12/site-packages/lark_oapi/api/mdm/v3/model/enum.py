# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class Enum(object):
    _types = {
        "value": str,
        "multilingual_name": Dict[str, str],
    }

    def __init__(self, d=None):
        self.value: Optional[str] = None
        self.multilingual_name: Optional[Dict[str, str]] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "EnumBuilder":
        return EnumBuilder()


class EnumBuilder(object):
    def __init__(self) -> None:
        self._enum = Enum()

    def value(self, value: str) -> "EnumBuilder":
        self._enum.value = value
        return self

    def multilingual_name(self, multilingual_name: Dict[str, str]) -> "EnumBuilder":
        self._enum.multilingual_name = multilingual_name
        return self

    def build(self) -> "Enum":
        return self._enum
