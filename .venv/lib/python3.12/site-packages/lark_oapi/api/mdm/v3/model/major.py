# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .i18n_string import I18nString


class Major(object):
    _types = {
        "mdm_code": str,
        "name": I18nString,
        "superior_major": str,
        "degree": str,
        "level": str,
        "status": str,
        "remark": str,
        "order_code": str,
    }

    def __init__(self, d=None):
        self.mdm_code: Optional[str] = None
        self.name: Optional[I18nString] = None
        self.superior_major: Optional[str] = None
        self.degree: Optional[str] = None
        self.level: Optional[str] = None
        self.status: Optional[str] = None
        self.remark: Optional[str] = None
        self.order_code: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "MajorBuilder":
        return MajorBuilder()


class MajorBuilder(object):
    def __init__(self) -> None:
        self._major = Major()

    def mdm_code(self, mdm_code: str) -> "MajorBuilder":
        self._major.mdm_code = mdm_code
        return self

    def name(self, name: I18nString) -> "MajorBuilder":
        self._major.name = name
        return self

    def superior_major(self, superior_major: str) -> "MajorBuilder":
        self._major.superior_major = superior_major
        return self

    def degree(self, degree: str) -> "MajorBuilder":
        self._major.degree = degree
        return self

    def level(self, level: str) -> "MajorBuilder":
        self._major.level = level
        return self

    def status(self, status: str) -> "MajorBuilder":
        self._major.status = status
        return self

    def remark(self, remark: str) -> "MajorBuilder":
        self._major.remark = remark
        return self

    def order_code(self, order_code: str) -> "MajorBuilder":
        self._major.order_code = order_code
        return self

    def build(self) -> "Major":
        return self._major
