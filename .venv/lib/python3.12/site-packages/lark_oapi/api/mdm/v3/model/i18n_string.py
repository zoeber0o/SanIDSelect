# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class I18nString(object):
    _types = {
        "value": str,
        "multilingual_value": Dict[str, str],
        "return_language": str,
    }

    def __init__(self, d=None):
        self.value: Optional[str] = None
        self.multilingual_value: Optional[Dict[str, str]] = None
        self.return_language: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "I18nStringBuilder":
        return I18nStringBuilder()


class I18nStringBuilder(object):
    def __init__(self) -> None:
        self._i18n_string = I18nString()

    def value(self, value: str) -> "I18nStringBuilder":
        self._i18n_string.value = value
        return self

    def multilingual_value(self, multilingual_value: Dict[str, str]) -> "I18nStringBuilder":
        self._i18n_string.multilingual_value = multilingual_value
        return self

    def return_language(self, return_language: str) -> "I18nStringBuilder":
        self._i18n_string.return_language = return_language
        return self

    def build(self) -> "I18nString":
        return self._i18n_string
