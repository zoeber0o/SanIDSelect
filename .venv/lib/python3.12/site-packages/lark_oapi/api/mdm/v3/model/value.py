# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class Value(object):
    _types = {
        "string_value": str,
        "bool_value": bool,
        "int_value": str,
        "string_list_value": List[str],
        "int_list_value": List[str],
    }

    def __init__(self, d=None):
        self.string_value: Optional[str] = None
        self.bool_value: Optional[bool] = None
        self.int_value: Optional[str] = None
        self.string_list_value: Optional[List[str]] = None
        self.int_list_value: Optional[List[str]] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "ValueBuilder":
        return ValueBuilder()


class ValueBuilder(object):
    def __init__(self) -> None:
        self._value = Value()

    def string_value(self, string_value: str) -> "ValueBuilder":
        self._value.string_value = string_value
        return self

    def bool_value(self, bool_value: bool) -> "ValueBuilder":
        self._value.bool_value = bool_value
        return self

    def int_value(self, int_value: str) -> "ValueBuilder":
        self._value.int_value = int_value
        return self

    def string_list_value(self, string_list_value: List[str]) -> "ValueBuilder":
        self._value.string_list_value = string_list_value
        return self

    def int_list_value(self, int_list_value: List[str]) -> "ValueBuilder":
        self._value.int_list_value = int_list_value
        return self

    def build(self) -> "Value":
        return self._value
