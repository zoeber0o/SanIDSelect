# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .expression import Expression


class Filter(object):
    _types = {
        "logic": str,
        "expressions": List[Expression],
    }

    def __init__(self, d=None):
        self.logic: Optional[str] = None
        self.expressions: Optional[List[Expression]] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "FilterBuilder":
        return FilterBuilder()


class FilterBuilder(object):
    def __init__(self) -> None:
        self._filter = Filter()

    def logic(self, logic: str) -> "FilterBuilder":
        self._filter.logic = logic
        return self

    def expressions(self, expressions: List[Expression]) -> "FilterBuilder":
        self._filter.expressions = expressions
        return self

    def build(self) -> "Filter":
        return self._filter
