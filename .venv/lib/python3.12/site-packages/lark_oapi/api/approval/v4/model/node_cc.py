# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class NodeCc(object):
    _types = {
        "key": str,
        "value": List[str],
    }

    def __init__(self, d=None):
        self.key: Optional[str] = None
        self.value: Optional[List[str]] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "NodeCcBuilder":
        return NodeCcBuilder()


class NodeCcBuilder(object):
    def __init__(self) -> None:
        self._node_cc = NodeCc()

    def key(self, key: str) -> "NodeCcBuilder":
        self._node_cc.key = key
        return self

    def value(self, value: List[str]) -> "NodeCcBuilder":
        self._node_cc.value = value
        return self

    def build(self) -> "NodeCc":
        return self._node_cc
