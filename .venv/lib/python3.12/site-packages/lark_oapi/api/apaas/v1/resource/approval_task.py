# Code generated by Lark OpenAPI.

import io
from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.const import UTF_8, CONTENT_TYPE, APPLICATION_JSON
from lark_oapi.core import JSON
from lark_oapi.core.token import verify
from lark_oapi.core.http import Transport
from lark_oapi.core.model import Config, RequestOption, RawResponse
from lark_oapi.core.utils import Files
from requests_toolbelt import MultipartEncoder
from ..model.add_assignee_approval_task_request import AddAssigneeApprovalTaskRequest
from ..model.add_assignee_approval_task_response import AddAssigneeApprovalTaskResponse
from ..model.agree_approval_task_request import AgreeApprovalTaskRequest
from ..model.agree_approval_task_response import AgreeApprovalTaskResponse
from ..model.reject_approval_task_request import RejectApprovalTaskRequest
from ..model.reject_approval_task_response import RejectApprovalTaskResponse
from ..model.transfer_approval_task_request import TransferApprovalTaskRequest
from ..model.transfer_approval_task_response import TransferApprovalTaskResponse


class ApprovalTask(object):
    def __init__(self, config: Config) -> None:
        self.config: Config = config

    def add_assignee(self, request: AddAssigneeApprovalTaskRequest,
                     option: Optional[RequestOption] = None) -> AddAssigneeApprovalTaskResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: AddAssigneeApprovalTaskResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                   AddAssigneeApprovalTaskResponse)
        response.raw = resp

        return response

    async def aadd_assignee(self, request: AddAssigneeApprovalTaskRequest,
                            option: Optional[RequestOption] = None) -> AddAssigneeApprovalTaskResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: AddAssigneeApprovalTaskResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                   AddAssigneeApprovalTaskResponse)
        response.raw = resp

        return response

    def agree(self, request: AgreeApprovalTaskRequest,
              option: Optional[RequestOption] = None) -> AgreeApprovalTaskResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: AgreeApprovalTaskResponse = JSON.unmarshal(str(resp.content, UTF_8), AgreeApprovalTaskResponse)
        response.raw = resp

        return response

    async def aagree(self, request: AgreeApprovalTaskRequest,
                     option: Optional[RequestOption] = None) -> AgreeApprovalTaskResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: AgreeApprovalTaskResponse = JSON.unmarshal(str(resp.content, UTF_8), AgreeApprovalTaskResponse)
        response.raw = resp

        return response

    def reject(self, request: RejectApprovalTaskRequest,
               option: Optional[RequestOption] = None) -> RejectApprovalTaskResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: RejectApprovalTaskResponse = JSON.unmarshal(str(resp.content, UTF_8), RejectApprovalTaskResponse)
        response.raw = resp

        return response

    async def areject(self, request: RejectApprovalTaskRequest,
                      option: Optional[RequestOption] = None) -> RejectApprovalTaskResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: RejectApprovalTaskResponse = JSON.unmarshal(str(resp.content, UTF_8), RejectApprovalTaskResponse)
        response.raw = resp

        return response

    def transfer(self, request: TransferApprovalTaskRequest,
                 option: Optional[RequestOption] = None) -> TransferApprovalTaskResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: TransferApprovalTaskResponse = JSON.unmarshal(str(resp.content, UTF_8), TransferApprovalTaskResponse)
        response.raw = resp

        return response

    async def atransfer(self, request: TransferApprovalTaskRequest,
                        option: Optional[RequestOption] = None) -> TransferApprovalTaskResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: TransferApprovalTaskResponse = JSON.unmarshal(str(resp.content, UTF_8), TransferApprovalTaskResponse)
        response.raw = resp

        return response
