# Code generated by Lark OpenAPI.

import io
from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.const import UTF_8, CONTENT_TYPE, APPLICATION_JSON
from lark_oapi.core import JSON
from lark_oapi.core.token import verify
from lark_oapi.core.http import Transport
from lark_oapi.core.model import Config, RequestOption, RawResponse
from lark_oapi.core.utils import Files
from requests_toolbelt import MultipartEncoder
from ..model.batch_create_authorization_application_role_member_request import \
    BatchCreateAuthorizationApplicationRoleMemberRequest
from ..model.batch_create_authorization_application_role_member_response import \
    BatchCreateAuthorizationApplicationRoleMemberResponse
from ..model.batch_remove_authorization_application_role_member_request import \
    BatchRemoveAuthorizationApplicationRoleMemberRequest
from ..model.batch_remove_authorization_application_role_member_response import \
    BatchRemoveAuthorizationApplicationRoleMemberResponse
from ..model.get_application_role_member_request import GetApplicationRoleMemberRequest
from ..model.get_application_role_member_response import GetApplicationRoleMemberResponse


class ApplicationRoleMember(object):
    def __init__(self, config: Config) -> None:
        self.config: Config = config

    def batch_create_authorization(self, request: BatchCreateAuthorizationApplicationRoleMemberRequest,
                                   option: Optional[
                                       RequestOption] = None) -> BatchCreateAuthorizationApplicationRoleMemberResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: BatchCreateAuthorizationApplicationRoleMemberResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                                         BatchCreateAuthorizationApplicationRoleMemberResponse)
        response.raw = resp

        return response

    async def abatch_create_authorization(self, request: BatchCreateAuthorizationApplicationRoleMemberRequest,
                                          option: Optional[
                                              RequestOption] = None) -> BatchCreateAuthorizationApplicationRoleMemberResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: BatchCreateAuthorizationApplicationRoleMemberResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                                         BatchCreateAuthorizationApplicationRoleMemberResponse)
        response.raw = resp

        return response

    def batch_remove_authorization(self, request: BatchRemoveAuthorizationApplicationRoleMemberRequest,
                                   option: Optional[
                                       RequestOption] = None) -> BatchRemoveAuthorizationApplicationRoleMemberResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: BatchRemoveAuthorizationApplicationRoleMemberResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                                         BatchRemoveAuthorizationApplicationRoleMemberResponse)
        response.raw = resp

        return response

    async def abatch_remove_authorization(self, request: BatchRemoveAuthorizationApplicationRoleMemberRequest,
                                          option: Optional[
                                              RequestOption] = None) -> BatchRemoveAuthorizationApplicationRoleMemberResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: BatchRemoveAuthorizationApplicationRoleMemberResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                                         BatchRemoveAuthorizationApplicationRoleMemberResponse)
        response.raw = resp

        return response

    def get(self, request: GetApplicationRoleMemberRequest,
            option: Optional[RequestOption] = None) -> GetApplicationRoleMemberResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: GetApplicationRoleMemberResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                    GetApplicationRoleMemberResponse)
        response.raw = resp

        return response

    async def aget(self, request: GetApplicationRoleMemberRequest,
                   option: Optional[RequestOption] = None) -> GetApplicationRoleMemberResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: GetApplicationRoleMemberResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                    GetApplicationRoleMemberResponse)
        response.raw = resp

        return response
