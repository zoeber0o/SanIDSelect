# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .global_option_label import GlobalOptionLabel
from .global_option_element import GlobalOptionElement


class GlobalOption(object):
    _types = {
        "api_name": str,
        "label": GlobalOptionLabel,
        "options": List[GlobalOptionElement],
        "created_at": int,
        "updated_at": int,
    }

    def __init__(self, d=None):
        self.api_name: Optional[str] = None
        self.label: Optional[GlobalOptionLabel] = None
        self.options: Optional[List[GlobalOptionElement]] = None
        self.created_at: Optional[int] = None
        self.updated_at: Optional[int] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "GlobalOptionBuilder":
        return GlobalOptionBuilder()


class GlobalOptionBuilder(object):
    def __init__(self) -> None:
        self._global_option = GlobalOption()

    def api_name(self, api_name: str) -> "GlobalOptionBuilder":
        self._global_option.api_name = api_name
        return self

    def label(self, label: GlobalOptionLabel) -> "GlobalOptionBuilder":
        self._global_option.label = label
        return self

    def options(self, options: List[GlobalOptionElement]) -> "GlobalOptionBuilder":
        self._global_option.options = options
        return self

    def created_at(self, created_at: int) -> "GlobalOptionBuilder":
        self._global_option.created_at = created_at
        return self

    def updated_at(self, updated_at: int) -> "GlobalOptionBuilder":
        self._global_option.updated_at = updated_at
        return self

    def build(self) -> "GlobalOption":
        return self._global_option
