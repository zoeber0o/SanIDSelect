# Code generated by Lark OpenAPI.

import io
from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.const import UTF_8, CONTENT_TYPE, APPLICATION_JSON
from lark_oapi.core import JSON
from lark_oapi.core.token import verify
from lark_oapi.core.http import Transport
from lark_oapi.core.model import Config, RequestOption, RawResponse
from lark_oapi.core.utils import Files
from requests_toolbelt import MultipartEncoder
from ..model.cc_user_task_request import CcUserTaskRequest
from ..model.cc_user_task_response import CcUserTaskResponse
from ..model.chat_group_user_task_request import ChatGroupUserTaskRequest
from ..model.chat_group_user_task_response import ChatGroupUserTaskResponse
from ..model.expediting_user_task_request import ExpeditingUserTaskRequest
from ..model.expediting_user_task_response import ExpeditingUserTaskResponse
from ..model.query_user_task_request import QueryUserTaskRequest
from ..model.query_user_task_response import QueryUserTaskResponse
from ..model.rollback_user_task_request import RollbackUserTaskRequest
from ..model.rollback_user_task_response import RollbackUserTaskResponse
from ..model.rollback_points_user_task_request import RollbackPointsUserTaskRequest
from ..model.rollback_points_user_task_response import RollbackPointsUserTaskResponse


class UserTask(object):
    def __init__(self, config: Config) -> None:
        self.config: Config = config

    def cc(self, request: CcUserTaskRequest, option: Optional[RequestOption] = None) -> CcUserTaskResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: CcUserTaskResponse = JSON.unmarshal(str(resp.content, UTF_8), CcUserTaskResponse)
        response.raw = resp

        return response

    async def acc(self, request: CcUserTaskRequest, option: Optional[RequestOption] = None) -> CcUserTaskResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: CcUserTaskResponse = JSON.unmarshal(str(resp.content, UTF_8), CcUserTaskResponse)
        response.raw = resp

        return response

    def chat_group(self, request: ChatGroupUserTaskRequest,
                   option: Optional[RequestOption] = None) -> ChatGroupUserTaskResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: ChatGroupUserTaskResponse = JSON.unmarshal(str(resp.content, UTF_8), ChatGroupUserTaskResponse)
        response.raw = resp

        return response

    async def achat_group(self, request: ChatGroupUserTaskRequest,
                          option: Optional[RequestOption] = None) -> ChatGroupUserTaskResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: ChatGroupUserTaskResponse = JSON.unmarshal(str(resp.content, UTF_8), ChatGroupUserTaskResponse)
        response.raw = resp

        return response

    def expediting(self, request: ExpeditingUserTaskRequest,
                   option: Optional[RequestOption] = None) -> ExpeditingUserTaskResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: ExpeditingUserTaskResponse = JSON.unmarshal(str(resp.content, UTF_8), ExpeditingUserTaskResponse)
        response.raw = resp

        return response

    async def aexpediting(self, request: ExpeditingUserTaskRequest,
                          option: Optional[RequestOption] = None) -> ExpeditingUserTaskResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: ExpeditingUserTaskResponse = JSON.unmarshal(str(resp.content, UTF_8), ExpeditingUserTaskResponse)
        response.raw = resp

        return response

    def query(self, request: QueryUserTaskRequest, option: Optional[RequestOption] = None) -> QueryUserTaskResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: QueryUserTaskResponse = JSON.unmarshal(str(resp.content, UTF_8), QueryUserTaskResponse)
        response.raw = resp

        return response

    async def aquery(self, request: QueryUserTaskRequest,
                     option: Optional[RequestOption] = None) -> QueryUserTaskResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: QueryUserTaskResponse = JSON.unmarshal(str(resp.content, UTF_8), QueryUserTaskResponse)
        response.raw = resp

        return response

    def rollback(self, request: RollbackUserTaskRequest,
                 option: Optional[RequestOption] = None) -> RollbackUserTaskResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: RollbackUserTaskResponse = JSON.unmarshal(str(resp.content, UTF_8), RollbackUserTaskResponse)
        response.raw = resp

        return response

    async def arollback(self, request: RollbackUserTaskRequest,
                        option: Optional[RequestOption] = None) -> RollbackUserTaskResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: RollbackUserTaskResponse = JSON.unmarshal(str(resp.content, UTF_8), RollbackUserTaskResponse)
        response.raw = resp

        return response

    def rollback_points(self, request: RollbackPointsUserTaskRequest,
                        option: Optional[RequestOption] = None) -> RollbackPointsUserTaskResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: RollbackPointsUserTaskResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                  RollbackPointsUserTaskResponse)
        response.raw = resp

        return response

    async def arollback_points(self, request: RollbackPointsUserTaskRequest,
                               option: Optional[RequestOption] = None) -> RollbackPointsUserTaskResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: RollbackPointsUserTaskResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                  RollbackPointsUserTaskResponse)
        response.raw = resp

        return response
