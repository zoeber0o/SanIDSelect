# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class ConditionValue(object):
    _types = {
        "type": str,
        "settings": str,
        "display_names": List[str],
    }

    def __init__(self, d=None):
        self.type: Optional[str] = None
        self.settings: Optional[str] = None
        self.display_names: Optional[List[str]] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "ConditionValueBuilder":
        return ConditionValueBuilder()


class ConditionValueBuilder(object):
    def __init__(self) -> None:
        self._condition_value = ConditionValue()

    def type(self, type: str) -> "ConditionValueBuilder":
        self._condition_value.type = type
        return self

    def settings(self, settings: str) -> "ConditionValueBuilder":
        self._condition_value.settings = settings
        return self

    def display_names(self, display_names: List[str]) -> "ConditionValueBuilder":
        self._condition_value.display_names = display_names
        return self

    def build(self) -> "ConditionValue":
        return self._condition_value
