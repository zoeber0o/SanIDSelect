# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class SandboxTenant(object):
    _types = {
        "tenant_id": str,
        "tenant_name": str,
    }

    def __init__(self, d=None):
        self.tenant_id: Optional[str] = None
        self.tenant_name: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "SandboxTenantBuilder":
        return SandboxTenantBuilder()


class SandboxTenantBuilder(object):
    def __init__(self) -> None:
        self._sandbox_tenant = SandboxTenant()

    def tenant_id(self, tenant_id: str) -> "SandboxTenantBuilder":
        self._sandbox_tenant.tenant_id = tenant_id
        return self

    def tenant_name(self, tenant_name: str) -> "SandboxTenantBuilder":
        self._sandbox_tenant.tenant_name = tenant_name
        return self

    def build(self) -> "SandboxTenant":
        return self._sandbox_tenant
