# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .object_settings import ObjectSettings


class Object(object):
    _types = {
        "id": int,
        "api_name": str,
        "label": Dict[str, str],
        "settings": ObjectSettings,
    }

    def __init__(self, d=None):
        self.id: Optional[int] = None
        self.api_name: Optional[str] = None
        self.label: Optional[Dict[str, str]] = None
        self.settings: Optional[ObjectSettings] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "ObjectBuilder":
        return ObjectBuilder()


class ObjectBuilder(object):
    def __init__(self) -> None:
        self._object = Object()

    def id(self, id: int) -> "ObjectBuilder":
        self._object.id = id
        return self

    def api_name(self, api_name: str) -> "ObjectBuilder":
        self._object.api_name = api_name
        return self

    def label(self, label: Dict[str, str]) -> "ObjectBuilder":
        self._object.label = label
        return self

    def settings(self, settings: ObjectSettings) -> "ObjectBuilder":
        self._object.settings = settings
        return self

    def build(self) -> "Object":
        return self._object
