# Code generated by Lark OpenAPI.

import io
from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.const import UTF_8, CONTENT_TYPE, APPLICATION_JSON
from lark_oapi.core import JSON
from lark_oapi.core.token import verify
from lark_oapi.core.http import Transport
from lark_oapi.core.model import Config, RequestOption, RawResponse
from lark_oapi.core.utils import Files
from requests_toolbelt import MultipartEncoder
from ..model.batch_create_application_object_record_request import BatchCreateApplicationObjectRecordRequest
from ..model.batch_create_application_object_record_response import BatchCreateApplicationObjectRecordResponse
from ..model.batch_delete_application_object_record_request import BatchDeleteApplicationObjectRecordRequest
from ..model.batch_delete_application_object_record_response import BatchDeleteApplicationObjectRecordResponse
from ..model.batch_query_application_object_record_request import BatchQueryApplicationObjectRecordRequest
from ..model.batch_query_application_object_record_response import BatchQueryApplicationObjectRecordResponse
from ..model.batch_update_application_object_record_request import BatchUpdateApplicationObjectRecordRequest
from ..model.batch_update_application_object_record_response import BatchUpdateApplicationObjectRecordResponse
from ..model.create_application_object_record_request import CreateApplicationObjectRecordRequest
from ..model.create_application_object_record_response import CreateApplicationObjectRecordResponse
from ..model.delete_application_object_record_request import DeleteApplicationObjectRecordRequest
from ..model.delete_application_object_record_response import DeleteApplicationObjectRecordResponse
from ..model.patch_application_object_record_request import PatchApplicationObjectRecordRequest
from ..model.patch_application_object_record_response import PatchApplicationObjectRecordResponse
from ..model.query_application_object_record_request import QueryApplicationObjectRecordRequest
from ..model.query_application_object_record_response import QueryApplicationObjectRecordResponse


class ApplicationObjectRecord(object):
    def __init__(self, config: Config) -> None:
        self.config: Config = config

    def batch_create(self, request: BatchCreateApplicationObjectRecordRequest,
                     option: Optional[RequestOption] = None) -> BatchCreateApplicationObjectRecordResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: BatchCreateApplicationObjectRecordResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                              BatchCreateApplicationObjectRecordResponse)
        response.raw = resp

        return response

    async def abatch_create(self, request: BatchCreateApplicationObjectRecordRequest,
                            option: Optional[RequestOption] = None) -> BatchCreateApplicationObjectRecordResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: BatchCreateApplicationObjectRecordResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                              BatchCreateApplicationObjectRecordResponse)
        response.raw = resp

        return response

    def batch_delete(self, request: BatchDeleteApplicationObjectRecordRequest,
                     option: Optional[RequestOption] = None) -> BatchDeleteApplicationObjectRecordResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: BatchDeleteApplicationObjectRecordResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                              BatchDeleteApplicationObjectRecordResponse)
        response.raw = resp

        return response

    async def abatch_delete(self, request: BatchDeleteApplicationObjectRecordRequest,
                            option: Optional[RequestOption] = None) -> BatchDeleteApplicationObjectRecordResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: BatchDeleteApplicationObjectRecordResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                              BatchDeleteApplicationObjectRecordResponse)
        response.raw = resp

        return response

    def batch_query(self, request: BatchQueryApplicationObjectRecordRequest,
                    option: Optional[RequestOption] = None) -> BatchQueryApplicationObjectRecordResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: BatchQueryApplicationObjectRecordResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                             BatchQueryApplicationObjectRecordResponse)
        response.raw = resp

        return response

    async def abatch_query(self, request: BatchQueryApplicationObjectRecordRequest,
                           option: Optional[RequestOption] = None) -> BatchQueryApplicationObjectRecordResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: BatchQueryApplicationObjectRecordResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                             BatchQueryApplicationObjectRecordResponse)
        response.raw = resp

        return response

    def batch_update(self, request: BatchUpdateApplicationObjectRecordRequest,
                     option: Optional[RequestOption] = None) -> BatchUpdateApplicationObjectRecordResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: BatchUpdateApplicationObjectRecordResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                              BatchUpdateApplicationObjectRecordResponse)
        response.raw = resp

        return response

    async def abatch_update(self, request: BatchUpdateApplicationObjectRecordRequest,
                            option: Optional[RequestOption] = None) -> BatchUpdateApplicationObjectRecordResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: BatchUpdateApplicationObjectRecordResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                              BatchUpdateApplicationObjectRecordResponse)
        response.raw = resp

        return response

    def create(self, request: CreateApplicationObjectRecordRequest,
               option: Optional[RequestOption] = None) -> CreateApplicationObjectRecordResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: CreateApplicationObjectRecordResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                         CreateApplicationObjectRecordResponse)
        response.raw = resp

        return response

    async def acreate(self, request: CreateApplicationObjectRecordRequest,
                      option: Optional[RequestOption] = None) -> CreateApplicationObjectRecordResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: CreateApplicationObjectRecordResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                         CreateApplicationObjectRecordResponse)
        response.raw = resp

        return response

    def delete(self, request: DeleteApplicationObjectRecordRequest,
               option: Optional[RequestOption] = None) -> DeleteApplicationObjectRecordResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: DeleteApplicationObjectRecordResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                         DeleteApplicationObjectRecordResponse)
        response.raw = resp

        return response

    async def adelete(self, request: DeleteApplicationObjectRecordRequest,
                      option: Optional[RequestOption] = None) -> DeleteApplicationObjectRecordResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: DeleteApplicationObjectRecordResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                         DeleteApplicationObjectRecordResponse)
        response.raw = resp

        return response

    def patch(self, request: PatchApplicationObjectRecordRequest,
              option: Optional[RequestOption] = None) -> PatchApplicationObjectRecordResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: PatchApplicationObjectRecordResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                        PatchApplicationObjectRecordResponse)
        response.raw = resp

        return response

    async def apatch(self, request: PatchApplicationObjectRecordRequest,
                     option: Optional[RequestOption] = None) -> PatchApplicationObjectRecordResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: PatchApplicationObjectRecordResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                        PatchApplicationObjectRecordResponse)
        response.raw = resp

        return response

    def query(self, request: QueryApplicationObjectRecordRequest,
              option: Optional[RequestOption] = None) -> QueryApplicationObjectRecordResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: QueryApplicationObjectRecordResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                        QueryApplicationObjectRecordResponse)
        response.raw = resp

        return response

    async def aquery(self, request: QueryApplicationObjectRecordRequest,
                     option: Optional[RequestOption] = None) -> QueryApplicationObjectRecordResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: QueryApplicationObjectRecordResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                        QueryApplicationObjectRecordResponse)
        response.raw = resp

        return response
