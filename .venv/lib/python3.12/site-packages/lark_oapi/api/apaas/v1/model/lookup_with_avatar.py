# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class LookupWithAvatar(object):
    _types = {
        "id": str,
        "name": str,
        "tenant_id": str,
        "email": str,
    }

    def __init__(self, d=None):
        self.id: Optional[str] = None
        self.name: Optional[str] = None
        self.tenant_id: Optional[str] = None
        self.email: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "LookupWithAvatarBuilder":
        return LookupWithAvatarBuilder()


class LookupWithAvatarBuilder(object):
    def __init__(self) -> None:
        self._lookup_with_avatar = LookupWithAvatar()

    def id(self, id: str) -> "LookupWithAvatarBuilder":
        self._lookup_with_avatar.id = id
        return self

    def name(self, name: str) -> "LookupWithAvatarBuilder":
        self._lookup_with_avatar.name = name
        return self

    def tenant_id(self, tenant_id: str) -> "LookupWithAvatarBuilder":
        self._lookup_with_avatar.tenant_id = tenant_id
        return self

    def email(self, email: str) -> "LookupWithAvatarBuilder":
        self._lookup_with_avatar.email = email
        return self

    def build(self) -> "LookupWithAvatar":
        return self._lookup_with_avatar
