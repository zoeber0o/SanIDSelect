# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .environment_variable_filter import EnvironmentVariableFilter


class QueryApplicationEnvironmentVariableRequestBody(object):
    _types = {
        "filter": EnvironmentVariableFilter,
        "limit": int,
        "offset": int,
    }

    def __init__(self, d=None):
        self.filter: Optional[EnvironmentVariableFilter] = None
        self.limit: Optional[int] = None
        self.offset: Optional[int] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "QueryApplicationEnvironmentVariableRequestBodyBuilder":
        return QueryApplicationEnvironmentVariableRequestBodyBuilder()


class QueryApplicationEnvironmentVariableRequestBodyBuilder(object):
    def __init__(self) -> None:
        self._query_application_environment_variable_request_body = QueryApplicationEnvironmentVariableRequestBody()

    def filter(self, filter: EnvironmentVariableFilter) -> "QueryApplicationEnvironmentVariableRequestBodyBuilder":
        self._query_application_environment_variable_request_body.filter = filter
        return self

    def limit(self, limit: int) -> "QueryApplicationEnvironmentVariableRequestBodyBuilder":
        self._query_application_environment_variable_request_body.limit = limit
        return self

    def offset(self, offset: int) -> "QueryApplicationEnvironmentVariableRequestBodyBuilder":
        self._query_application_environment_variable_request_body.offset = offset
        return self

    def build(self) -> "QueryApplicationEnvironmentVariableRequestBody":
        return self._query_application_environment_variable_request_body
