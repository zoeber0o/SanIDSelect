# Code generated by Lark OpenAPI.

import io
from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.const import UTF_8, CONTENT_TYPE, APPLICATION_JSON
from lark_oapi.core import JSON
from lark_oapi.core.token import verify
from lark_oapi.core.http import Transport
from lark_oapi.core.model import Config, RequestOption, RawResponse
from lark_oapi.core.utils import Files
from requests_toolbelt import MultipartEncoder
from ..model.download_as_image_whiteboard_request import DownloadAsImageWhiteboardRequest
from ..model.download_as_image_whiteboard_response import DownloadAsImageWhiteboardResponse
from ..model.theme_whiteboard_request import ThemeWhiteboardRequest
from ..model.theme_whiteboard_response import ThemeWhiteboardResponse


class Whiteboard(object):
    def __init__(self, config: Config) -> None:
        self.config: Config = config

    def download_as_image(self, request: DownloadAsImageWhiteboardRequest,
                          option: Optional[RequestOption] = None) -> DownloadAsImageWhiteboardResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 处理二进制流
        content_type = resp.headers.get(CONTENT_TYPE)
        response: DownloadAsImageWhiteboardResponse = DownloadAsImageWhiteboardResponse()
        if 200 <= resp.status_code < 300:
            response.code = 0
            response.file = io.BytesIO(resp.content)
            response.file_name = Files.parse_file_name(resp.headers)
        elif content_type is not None and content_type.startswith(APPLICATION_JSON):
            response = JSON.unmarshal(str(resp.content, UTF_8), DownloadAsImageWhiteboardResponse)

        response.raw = resp
        return response

    async def adownload_as_image(self, request: DownloadAsImageWhiteboardRequest,
                                 option: Optional[RequestOption] = None) -> DownloadAsImageWhiteboardResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 处理二进制流
        content_type = resp.headers.get(CONTENT_TYPE)
        response: DownloadAsImageWhiteboardResponse = DownloadAsImageWhiteboardResponse()
        if 200 <= resp.status_code < 300:
            response.code = 0
            response.file = io.BytesIO(resp.content)
            response.file_name = Files.parse_file_name(resp.headers)
        elif content_type is not None and content_type.startswith(APPLICATION_JSON):
            response = JSON.unmarshal(str(resp.content, UTF_8), DownloadAsImageWhiteboardResponse)

        response.raw = resp
        return response

    def theme(self, request: ThemeWhiteboardRequest, option: Optional[RequestOption] = None) -> ThemeWhiteboardResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: ThemeWhiteboardResponse = JSON.unmarshal(str(resp.content, UTF_8), ThemeWhiteboardResponse)
        response.raw = resp

        return response

    async def atheme(self, request: ThemeWhiteboardRequest,
                     option: Optional[RequestOption] = None) -> ThemeWhiteboardResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: ThemeWhiteboardResponse = JSON.unmarshal(str(resp.content, UTF_8), ThemeWhiteboardResponse)
        response.raw = resp

        return response
