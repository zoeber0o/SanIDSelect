# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.model import BaseRequest
from lark_oapi.core.enum import HttpMethod, AccessTokenType
from .create_whiteboard_node_request_body import CreateWhiteboardNodeRequestBody


class CreateWhiteboardNodeRequest(BaseRequest):
    def __init__(self) -> None:
        super().__init__()
        self.client_token: Optional[str] = None
        self.user_id_type: Optional[str] = None
        self.whiteboard_id: Optional[str] = None
        self.request_body: Optional[CreateWhiteboardNodeRequestBody] = None

    @staticmethod
    def builder() -> "CreateWhiteboardNodeRequestBuilder":
        return CreateWhiteboardNodeRequestBuilder()


class CreateWhiteboardNodeRequestBuilder(object):

    def __init__(self) -> None:
        create_whiteboard_node_request = CreateWhiteboardNodeRequest()
        create_whiteboard_node_request.http_method = HttpMethod.POST
        create_whiteboard_node_request.uri = "/open-apis/board/v1/whiteboards/:whiteboard_id/nodes"
        create_whiteboard_node_request.token_types = {AccessTokenType.TENANT, AccessTokenType.USER}
        self._create_whiteboard_node_request: CreateWhiteboardNodeRequest = create_whiteboard_node_request

    def client_token(self, client_token: str) -> "CreateWhiteboardNodeRequestBuilder":
        self._create_whiteboard_node_request.client_token = client_token
        self._create_whiteboard_node_request.add_query("client_token", client_token)
        return self

    def user_id_type(self, user_id_type: str) -> "CreateWhiteboardNodeRequestBuilder":
        self._create_whiteboard_node_request.user_id_type = user_id_type
        self._create_whiteboard_node_request.add_query("user_id_type", user_id_type)
        return self

    def whiteboard_id(self, whiteboard_id: str) -> "CreateWhiteboardNodeRequestBuilder":
        self._create_whiteboard_node_request.whiteboard_id = whiteboard_id
        self._create_whiteboard_node_request.paths["whiteboard_id"] = str(whiteboard_id)
        return self

    def request_body(self, request_body: CreateWhiteboardNodeRequestBody) -> "CreateWhiteboardNodeRequestBuilder":
        self._create_whiteboard_node_request.request_body = request_body
        self._create_whiteboard_node_request.body = request_body
        return self

    def build(self) -> CreateWhiteboardNodeRequest:
        return self._create_whiteboard_node_request
