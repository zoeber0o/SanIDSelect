# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .i18n_content import I18nContent


class Indicator(object):
    _types = {
        "id": str,
        "name": str,
        "value_type": str,
        "active_status": int,
        "i18n_names": List[I18nContent],
    }

    def __init__(self, d=None):
        self.id: Optional[str] = None
        self.name: Optional[str] = None
        self.value_type: Optional[str] = None
        self.active_status: Optional[int] = None
        self.i18n_names: Optional[List[I18nContent]] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "IndicatorBuilder":
        return IndicatorBuilder()


class IndicatorBuilder(object):
    def __init__(self) -> None:
        self._indicator = Indicator()

    def id(self, id: str) -> "IndicatorBuilder":
        self._indicator.id = id
        return self

    def name(self, name: str) -> "IndicatorBuilder":
        self._indicator.name = name
        return self

    def value_type(self, value_type: str) -> "IndicatorBuilder":
        self._indicator.value_type = value_type
        return self

    def active_status(self, active_status: int) -> "IndicatorBuilder":
        self._indicator.active_status = active_status
        return self

    def i18n_names(self, i18n_names: List[I18nContent]) -> "IndicatorBuilder":
        self._indicator.i18n_names = i18n_names
        return self

    def build(self) -> "Indicator":
        return self._indicator
