# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .i18n import I18n
from .salary_level import SalaryLevel


class SalaryLevelType(object):
    _types = {
        "id": str,
        "name": I18n,
        "status": bool,
        "salary_levels": List[SalaryLevel],
    }

    def __init__(self, d=None):
        self.id: Optional[str] = None
        self.name: Optional[I18n] = None
        self.status: Optional[bool] = None
        self.salary_levels: Optional[List[SalaryLevel]] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "SalaryLevelTypeBuilder":
        return SalaryLevelTypeBuilder()


class SalaryLevelTypeBuilder(object):
    def __init__(self) -> None:
        self._salary_level_type = SalaryLevelType()

    def id(self, id: str) -> "SalaryLevelTypeBuilder":
        self._salary_level_type.id = id
        return self

    def name(self, name: I18n) -> "SalaryLevelTypeBuilder":
        self._salary_level_type.name = name
        return self

    def status(self, status: bool) -> "SalaryLevelTypeBuilder":
        self._salary_level_type.status = status
        return self

    def salary_levels(self, salary_levels: List[SalaryLevel]) -> "SalaryLevelTypeBuilder":
        self._salary_level_type.salary_levels = salary_levels
        return self

    def build(self) -> "SalaryLevelType":
        return self._salary_level_type
