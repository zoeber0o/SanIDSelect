# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class ArchiveItem(object):
    _types = {
        "item_id": str,
        "item_result": str,
        "item_result_regular": str,
    }

    def __init__(self, d=None):
        self.item_id: Optional[str] = None
        self.item_result: Optional[str] = None
        self.item_result_regular: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "ArchiveItemBuilder":
        return ArchiveItemBuilder()


class ArchiveItemBuilder(object):
    def __init__(self) -> None:
        self._archive_item = ArchiveItem()

    def item_id(self, item_id: str) -> "ArchiveItemBuilder":
        self._archive_item.item_id = item_id
        return self

    def item_result(self, item_result: str) -> "ArchiveItemBuilder":
        self._archive_item.item_result = item_result
        return self

    def item_result_regular(self, item_result_regular: str) -> "ArchiveItemBuilder":
        self._archive_item.item_result_regular = item_result_regular
        return self

    def build(self) -> "ArchiveItem":
        return self._archive_item
