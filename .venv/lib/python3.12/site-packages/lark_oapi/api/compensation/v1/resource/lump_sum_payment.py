# Code generated by Lark OpenAPI.

import io
from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.const import UTF_8, CONTENT_TYPE, APPLICATION_JSON
from lark_oapi.core import JSON
from lark_oapi.core.token import verify
from lark_oapi.core.http import Transport
from lark_oapi.core.model import Config, RequestOption, RawResponse
from lark_oapi.core.utils import Files
from requests_toolbelt import MultipartEncoder
from ..model.batch_create_lump_sum_payment_request import BatchCreateLumpSumPaymentRequest
from ..model.batch_create_lump_sum_payment_response import BatchCreateLumpSumPaymentResponse
from ..model.batch_remove_lump_sum_payment_request import BatchRemoveLumpSumPaymentRequest
from ..model.batch_remove_lump_sum_payment_response import BatchRemoveLumpSumPaymentResponse
from ..model.batch_update_lump_sum_payment_request import BatchUpdateLumpSumPaymentRequest
from ..model.batch_update_lump_sum_payment_response import BatchUpdateLumpSumPaymentResponse
from ..model.query_lump_sum_payment_request import QueryLumpSumPaymentRequest
from ..model.query_lump_sum_payment_response import QueryLumpSumPaymentResponse
from ..model.query_detail_lump_sum_payment_request import QueryDetailLumpSumPaymentRequest
from ..model.query_detail_lump_sum_payment_response import QueryDetailLumpSumPaymentResponse


class LumpSumPayment(object):
    def __init__(self, config: Config) -> None:
        self.config: Config = config

    def batch_create(self, request: BatchCreateLumpSumPaymentRequest,
                     option: Optional[RequestOption] = None) -> BatchCreateLumpSumPaymentResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: BatchCreateLumpSumPaymentResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                     BatchCreateLumpSumPaymentResponse)
        response.raw = resp

        return response

    async def abatch_create(self, request: BatchCreateLumpSumPaymentRequest,
                            option: Optional[RequestOption] = None) -> BatchCreateLumpSumPaymentResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: BatchCreateLumpSumPaymentResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                     BatchCreateLumpSumPaymentResponse)
        response.raw = resp

        return response

    def batch_remove(self, request: BatchRemoveLumpSumPaymentRequest,
                     option: Optional[RequestOption] = None) -> BatchRemoveLumpSumPaymentResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: BatchRemoveLumpSumPaymentResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                     BatchRemoveLumpSumPaymentResponse)
        response.raw = resp

        return response

    async def abatch_remove(self, request: BatchRemoveLumpSumPaymentRequest,
                            option: Optional[RequestOption] = None) -> BatchRemoveLumpSumPaymentResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: BatchRemoveLumpSumPaymentResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                     BatchRemoveLumpSumPaymentResponse)
        response.raw = resp

        return response

    def batch_update(self, request: BatchUpdateLumpSumPaymentRequest,
                     option: Optional[RequestOption] = None) -> BatchUpdateLumpSumPaymentResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: BatchUpdateLumpSumPaymentResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                     BatchUpdateLumpSumPaymentResponse)
        response.raw = resp

        return response

    async def abatch_update(self, request: BatchUpdateLumpSumPaymentRequest,
                            option: Optional[RequestOption] = None) -> BatchUpdateLumpSumPaymentResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: BatchUpdateLumpSumPaymentResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                     BatchUpdateLumpSumPaymentResponse)
        response.raw = resp

        return response

    def query(self, request: QueryLumpSumPaymentRequest,
              option: Optional[RequestOption] = None) -> QueryLumpSumPaymentResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: QueryLumpSumPaymentResponse = JSON.unmarshal(str(resp.content, UTF_8), QueryLumpSumPaymentResponse)
        response.raw = resp

        return response

    async def aquery(self, request: QueryLumpSumPaymentRequest,
                     option: Optional[RequestOption] = None) -> QueryLumpSumPaymentResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: QueryLumpSumPaymentResponse = JSON.unmarshal(str(resp.content, UTF_8), QueryLumpSumPaymentResponse)
        response.raw = resp

        return response

    def query_detail(self, request: QueryDetailLumpSumPaymentRequest,
                     option: Optional[RequestOption] = None) -> QueryDetailLumpSumPaymentResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: QueryDetailLumpSumPaymentResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                     QueryDetailLumpSumPaymentResponse)
        response.raw = resp

        return response

    async def aquery_detail(self, request: QueryDetailLumpSumPaymentRequest,
                            option: Optional[RequestOption] = None) -> QueryDetailLumpSumPaymentResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: QueryDetailLumpSumPaymentResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                     QueryDetailLumpSumPaymentResponse)
        response.raw = resp

        return response
