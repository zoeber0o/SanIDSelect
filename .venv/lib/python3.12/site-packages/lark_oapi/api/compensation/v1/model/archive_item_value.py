# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class ArchiveItemValue(object):
    _types = {
        "item_id": str,
        "item_value": str,
        "item_value_regular": str,
    }

    def __init__(self, d=None):
        self.item_id: Optional[str] = None
        self.item_value: Optional[str] = None
        self.item_value_regular: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "ArchiveItemValueBuilder":
        return ArchiveItemValueBuilder()


class ArchiveItemValueBuilder(object):
    def __init__(self) -> None:
        self._archive_item_value = ArchiveItemValue()

    def item_id(self, item_id: str) -> "ArchiveItemValueBuilder":
        self._archive_item_value.item_id = item_id
        return self

    def item_value(self, item_value: str) -> "ArchiveItemValueBuilder":
        self._archive_item_value.item_value = item_value
        return self

    def item_value_regular(self, item_value_regular: str) -> "ArchiveItemValueBuilder":
        self._archive_item_value.item_value_regular = item_value_regular
        return self

    def build(self) -> "ArchiveItemValue":
        return self._archive_item_value
