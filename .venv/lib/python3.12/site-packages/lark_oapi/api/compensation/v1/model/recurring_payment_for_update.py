# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class RecurringPaymentForUpdate(object):
    _types = {
        "id": str,
        "each_amount": str,
        "start_date": str,
        "end_date": str,
        "currency_id": str,
        "issuance_type": str,
        "remark": str,
        "issuance_country_region_id": str,
    }

    def __init__(self, d=None):
        self.id: Optional[str] = None
        self.each_amount: Optional[str] = None
        self.start_date: Optional[str] = None
        self.end_date: Optional[str] = None
        self.currency_id: Optional[str] = None
        self.issuance_type: Optional[str] = None
        self.remark: Optional[str] = None
        self.issuance_country_region_id: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "RecurringPaymentForUpdateBuilder":
        return RecurringPaymentForUpdateBuilder()


class RecurringPaymentForUpdateBuilder(object):
    def __init__(self) -> None:
        self._recurring_payment_for_update = RecurringPaymentForUpdate()

    def id(self, id: str) -> "RecurringPaymentForUpdateBuilder":
        self._recurring_payment_for_update.id = id
        return self

    def each_amount(self, each_amount: str) -> "RecurringPaymentForUpdateBuilder":
        self._recurring_payment_for_update.each_amount = each_amount
        return self

    def start_date(self, start_date: str) -> "RecurringPaymentForUpdateBuilder":
        self._recurring_payment_for_update.start_date = start_date
        return self

    def end_date(self, end_date: str) -> "RecurringPaymentForUpdateBuilder":
        self._recurring_payment_for_update.end_date = end_date
        return self

    def currency_id(self, currency_id: str) -> "RecurringPaymentForUpdateBuilder":
        self._recurring_payment_for_update.currency_id = currency_id
        return self

    def issuance_type(self, issuance_type: str) -> "RecurringPaymentForUpdateBuilder":
        self._recurring_payment_for_update.issuance_type = issuance_type
        return self

    def remark(self, remark: str) -> "RecurringPaymentForUpdateBuilder":
        self._recurring_payment_for_update.remark = remark
        return self

    def issuance_country_region_id(self, issuance_country_region_id: str) -> "RecurringPaymentForUpdateBuilder":
        self._recurring_payment_for_update.issuance_country_region_id = issuance_country_region_id
        return self

    def build(self) -> "RecurringPaymentForUpdate":
        return self._recurring_payment_for_update
