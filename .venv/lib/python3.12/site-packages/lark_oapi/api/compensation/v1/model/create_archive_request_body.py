# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .archive_item_value import ArchiveItemValue


class CreateArchiveRequestBody(object):
    _types = {
        "unique_id": str,
        "operator_id": str,
        "user_id": str,
        "effective_time": str,
        "currency_id": str,
        "plan_id": str,
        "plan_tid": str,
        "change_reason_id": str,
        "item_value_lists": List[ArchiveItemValue],
        "description": str,
        "edit_remark": str,
    }

    def __init__(self, d=None):
        self.unique_id: Optional[str] = None
        self.operator_id: Optional[str] = None
        self.user_id: Optional[str] = None
        self.effective_time: Optional[str] = None
        self.currency_id: Optional[str] = None
        self.plan_id: Optional[str] = None
        self.plan_tid: Optional[str] = None
        self.change_reason_id: Optional[str] = None
        self.item_value_lists: Optional[List[ArchiveItemValue]] = None
        self.description: Optional[str] = None
        self.edit_remark: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "CreateArchiveRequestBodyBuilder":
        return CreateArchiveRequestBodyBuilder()


class CreateArchiveRequestBodyBuilder(object):
    def __init__(self) -> None:
        self._create_archive_request_body = CreateArchiveRequestBody()

    def unique_id(self, unique_id: str) -> "CreateArchiveRequestBodyBuilder":
        self._create_archive_request_body.unique_id = unique_id
        return self

    def operator_id(self, operator_id: str) -> "CreateArchiveRequestBodyBuilder":
        self._create_archive_request_body.operator_id = operator_id
        return self

    def user_id(self, user_id: str) -> "CreateArchiveRequestBodyBuilder":
        self._create_archive_request_body.user_id = user_id
        return self

    def effective_time(self, effective_time: str) -> "CreateArchiveRequestBodyBuilder":
        self._create_archive_request_body.effective_time = effective_time
        return self

    def currency_id(self, currency_id: str) -> "CreateArchiveRequestBodyBuilder":
        self._create_archive_request_body.currency_id = currency_id
        return self

    def plan_id(self, plan_id: str) -> "CreateArchiveRequestBodyBuilder":
        self._create_archive_request_body.plan_id = plan_id
        return self

    def plan_tid(self, plan_tid: str) -> "CreateArchiveRequestBodyBuilder":
        self._create_archive_request_body.plan_tid = plan_tid
        return self

    def change_reason_id(self, change_reason_id: str) -> "CreateArchiveRequestBodyBuilder":
        self._create_archive_request_body.change_reason_id = change_reason_id
        return self

    def item_value_lists(self, item_value_lists: List[ArchiveItemValue]) -> "CreateArchiveRequestBodyBuilder":
        self._create_archive_request_body.item_value_lists = item_value_lists
        return self

    def description(self, description: str) -> "CreateArchiveRequestBodyBuilder":
        self._create_archive_request_body.description = description
        return self

    def edit_remark(self, edit_remark: str) -> "CreateArchiveRequestBodyBuilder":
        self._create_archive_request_body.edit_remark = edit_remark
        return self

    def build(self) -> "CreateArchiveRequestBody":
        return self._create_archive_request_body
