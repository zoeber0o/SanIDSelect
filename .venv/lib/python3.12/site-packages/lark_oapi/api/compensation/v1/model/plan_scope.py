# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .plan_condition import PlanCondition


class PlanScope(object):
    _types = {
        "is_all": bool,
        "plan_conditions": List[PlanCondition],
    }

    def __init__(self, d=None):
        self.is_all: Optional[bool] = None
        self.plan_conditions: Optional[List[PlanCondition]] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "PlanScopeBuilder":
        return PlanScopeBuilder()


class PlanScopeBuilder(object):
    def __init__(self) -> None:
        self._plan_scope = PlanScope()

    def is_all(self, is_all: bool) -> "PlanScopeBuilder":
        self._plan_scope.is_all = is_all
        return self

    def plan_conditions(self, plan_conditions: List[PlanCondition]) -> "PlanScopeBuilder":
        self._plan_scope.plan_conditions = plan_conditions
        return self

    def build(self) -> "PlanScope":
        return self._plan_scope
