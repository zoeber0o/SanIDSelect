# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .plan import Plan


class Archive(object):
    _types = {
        "archive_id": str,
        "archive_tid": str,
        "user_id": str,
        "plan": Plan,
        "effective_date": str,
    }

    def __init__(self, d=None):
        self.archive_id: Optional[str] = None
        self.archive_tid: Optional[str] = None
        self.user_id: Optional[str] = None
        self.plan: Optional[Plan] = None
        self.effective_date: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "ArchiveBuilder":
        return ArchiveBuilder()


class ArchiveBuilder(object):
    def __init__(self) -> None:
        self._archive = Archive()

    def archive_id(self, archive_id: str) -> "ArchiveBuilder":
        self._archive.archive_id = archive_id
        return self

    def archive_tid(self, archive_tid: str) -> "ArchiveBuilder":
        self._archive.archive_tid = archive_tid
        return self

    def user_id(self, user_id: str) -> "ArchiveBuilder":
        self._archive.user_id = user_id
        return self

    def plan(self, plan: Plan) -> "ArchiveBuilder":
        self._archive.plan = plan
        return self

    def effective_date(self, effective_date: str) -> "ArchiveBuilder":
        self._archive.effective_date = effective_date
        return self

    def build(self) -> "Archive":
        return self._archive
