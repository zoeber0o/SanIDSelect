# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class ArchiveIndicator(object):
    _types = {
        "indicator_id": str,
        "indicator_result": str,
        "indicator_result_regular": str,
    }

    def __init__(self, d=None):
        self.indicator_id: Optional[str] = None
        self.indicator_result: Optional[str] = None
        self.indicator_result_regular: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "ArchiveIndicatorBuilder":
        return ArchiveIndicatorBuilder()


class ArchiveIndicatorBuilder(object):
    def __init__(self) -> None:
        self._archive_indicator = ArchiveIndicator()

    def indicator_id(self, indicator_id: str) -> "ArchiveIndicatorBuilder":
        self._archive_indicator.indicator_id = indicator_id
        return self

    def indicator_result(self, indicator_result: str) -> "ArchiveIndicatorBuilder":
        self._archive_indicator.indicator_result = indicator_result
        return self

    def indicator_result_regular(self, indicator_result_regular: str) -> "ArchiveIndicatorBuilder":
        self._archive_indicator.indicator_result_regular = indicator_result_regular
        return self

    def build(self) -> "ArchiveIndicator":
        return self._archive_indicator
