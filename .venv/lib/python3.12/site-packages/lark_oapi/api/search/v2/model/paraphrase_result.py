# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class ParaphraseResult(object):
    _types = {
        "text": str,
        "extra": str,
    }

    def __init__(self, d=None):
        self.text: Optional[str] = None
        self.extra: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "ParaphraseResultBuilder":
        return ParaphraseResultBuilder()


class ParaphraseResultBuilder(object):
    def __init__(self) -> None:
        self._paraphrase_result = ParaphraseResult()

    def text(self, text: str) -> "ParaphraseResultBuilder":
        self._paraphrase_result.text = text
        return self

    def extra(self, extra: str) -> "ParaphraseResultBuilder":
        self._paraphrase_result.extra = extra
        return self

    def build(self) -> "ParaphraseResult":
        return self._paraphrase_result
