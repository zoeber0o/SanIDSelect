# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .knowledge_source_space_filter import KnowledgeSourceSpaceFilter
from .knowledge_source_space_reject import KnowledgeSourceSpaceReject


class EnterpriseKnowledgeSourceSpaceParam(object):
    _types = {
        "searchable": bool,
        "filter": KnowledgeSourceSpaceFilter,
        "reject": KnowledgeSourceSpaceReject,
    }

    def __init__(self, d=None):
        self.searchable: Optional[bool] = None
        self.filter: Optional[KnowledgeSourceSpaceFilter] = None
        self.reject: Optional[KnowledgeSourceSpaceReject] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "EnterpriseKnowledgeSourceSpaceParamBuilder":
        return EnterpriseKnowledgeSourceSpaceParamBuilder()


class EnterpriseKnowledgeSourceSpaceParamBuilder(object):
    def __init__(self) -> None:
        self._enterprise_knowledge_source_space_param = EnterpriseKnowledgeSourceSpaceParam()

    def searchable(self, searchable: bool) -> "EnterpriseKnowledgeSourceSpaceParamBuilder":
        self._enterprise_knowledge_source_space_param.searchable = searchable
        return self

    def filter(self, filter: KnowledgeSourceSpaceFilter) -> "EnterpriseKnowledgeSourceSpaceParamBuilder":
        self._enterprise_knowledge_source_space_param.filter = filter
        return self

    def reject(self, reject: KnowledgeSourceSpaceReject) -> "EnterpriseKnowledgeSourceSpaceParamBuilder":
        self._enterprise_knowledge_source_space_param.reject = reject
        return self

    def build(self) -> "EnterpriseKnowledgeSourceSpaceParam":
        return self._enterprise_knowledge_source_space_param
