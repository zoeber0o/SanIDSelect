# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .table_role import TableRole
from .block_role import BlockRole


class Role(object):
    _types = {
        "role_name": str,
        "table_roles": List[TableRole],
        "role_id": str,
        "block_roles": List[BlockRole],
        "base_rule": Dict[str, int],
    }

    def __init__(self, d=None):
        self.role_name: Optional[str] = None
        self.table_roles: Optional[List[TableRole]] = None
        self.role_id: Optional[str] = None
        self.block_roles: Optional[List[BlockRole]] = None
        self.base_rule: Optional[Dict[str, int]] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "RoleBuilder":
        return RoleBuilder()


class RoleBuilder(object):
    def __init__(self) -> None:
        self._role = Role()

    def role_name(self, role_name: str) -> "RoleBuilder":
        self._role.role_name = role_name
        return self

    def table_roles(self, table_roles: List[TableRole]) -> "RoleBuilder":
        self._role.table_roles = table_roles
        return self

    def role_id(self, role_id: str) -> "RoleBuilder":
        self._role.role_id = role_id
        return self

    def block_roles(self, block_roles: List[BlockRole]) -> "RoleBuilder":
        self._role.block_roles = block_roles
        return self

    def base_rule(self, base_rule: Dict[str, int]) -> "RoleBuilder":
        self._role.base_rule = base_rule
        return self

    def build(self) -> "Role":
        return self._role
