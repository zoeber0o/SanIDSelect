# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.model import BaseRequest
from lark_oapi.core.enum import HttpMethod, AccessTokenType
from .batch_query_file_comment_request_body import BatchQueryFileCommentRequestBody


class BatchQueryFileCommentRequest(BaseRequest):
    def __init__(self) -> None:
        super().__init__()
        self.file_type: Optional[str] = None
        self.user_id_type: Optional[str] = None
        self.file_token: Optional[str] = None
        self.request_body: Optional[BatchQueryFileCommentRequestBody] = None

    @staticmethod
    def builder() -> "BatchQueryFileCommentRequestBuilder":
        return BatchQueryFileCommentRequestBuilder()


class BatchQueryFileCommentRequestBuilder(object):

    def __init__(self) -> None:
        batch_query_file_comment_request = BatchQueryFileCommentRequest()
        batch_query_file_comment_request.http_method = HttpMethod.POST
        batch_query_file_comment_request.uri = "/open-apis/drive/v1/files/:file_token/comments/batch_query"
        batch_query_file_comment_request.token_types = {AccessTokenType.TENANT, AccessTokenType.USER}
        self._batch_query_file_comment_request: BatchQueryFileCommentRequest = batch_query_file_comment_request

    def file_type(self, file_type: str) -> "BatchQueryFileCommentRequestBuilder":
        self._batch_query_file_comment_request.file_type = file_type
        self._batch_query_file_comment_request.add_query("file_type", file_type)
        return self

    def user_id_type(self, user_id_type: str) -> "BatchQueryFileCommentRequestBuilder":
        self._batch_query_file_comment_request.user_id_type = user_id_type
        self._batch_query_file_comment_request.add_query("user_id_type", user_id_type)
        return self

    def file_token(self, file_token: str) -> "BatchQueryFileCommentRequestBuilder":
        self._batch_query_file_comment_request.file_token = file_token
        self._batch_query_file_comment_request.paths["file_token"] = str(file_token)
        return self

    def request_body(self, request_body: BatchQueryFileCommentRequestBody) -> "BatchQueryFileCommentRequestBuilder":
        self._batch_query_file_comment_request.request_body = request_body
        self._batch_query_file_comment_request.body = request_body
        return self

    def build(self) -> BatchQueryFileCommentRequest:
        return self._batch_query_file_comment_request
