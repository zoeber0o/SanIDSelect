# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .user_id import UserId


class BitableTableRecordActionFieldIdentityUser(object):
    _types = {
        "user_id": UserId,
        "name": str,
        "en_name": str,
        "avatar_url": str,
    }

    def __init__(self, d=None):
        self.user_id: Optional[UserId] = None
        self.name: Optional[str] = None
        self.en_name: Optional[str] = None
        self.avatar_url: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "BitableTableRecordActionFieldIdentityUserBuilder":
        return BitableTableRecordActionFieldIdentityUserBuilder()


class BitableTableRecordActionFieldIdentityUserBuilder(object):
    def __init__(self) -> None:
        self._bitable_table_record_action_field_identity_user = BitableTableRecordActionFieldIdentityUser()

    def user_id(self, user_id: UserId) -> "BitableTableRecordActionFieldIdentityUserBuilder":
        self._bitable_table_record_action_field_identity_user.user_id = user_id
        return self

    def name(self, name: str) -> "BitableTableRecordActionFieldIdentityUserBuilder":
        self._bitable_table_record_action_field_identity_user.name = name
        return self

    def en_name(self, en_name: str) -> "BitableTableRecordActionFieldIdentityUserBuilder":
        self._bitable_table_record_action_field_identity_user.en_name = en_name
        return self

    def avatar_url(self, avatar_url: str) -> "BitableTableRecordActionFieldIdentityUserBuilder":
        self._bitable_table_record_action_field_identity_user.avatar_url = avatar_url
        return self

    def build(self) -> "BitableTableRecordActionFieldIdentityUser":
        return self._bitable_table_record_action_field_identity_user
