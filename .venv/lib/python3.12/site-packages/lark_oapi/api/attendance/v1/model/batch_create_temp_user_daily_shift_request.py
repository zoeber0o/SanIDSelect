# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.model import BaseRequest
from lark_oapi.core.enum import HttpMethod, AccessTokenType
from .batch_create_temp_user_daily_shift_request_body import BatchCreateTempUserDailyShiftRequestBody


class BatchCreateTempUserDailyShiftRequest(BaseRequest):
    def __init__(self) -> None:
        super().__init__()
        self.employee_type: Optional[str] = None
        self.request_body: Optional[BatchCreateTempUserDailyShiftRequestBody] = None

    @staticmethod
    def builder() -> "BatchCreateTempUserDailyShiftRequestBuilder":
        return BatchCreateTempUserDailyShiftRequestBuilder()


class BatchCreateTempUserDailyShiftRequestBuilder(object):

    def __init__(self) -> None:
        batch_create_temp_user_daily_shift_request = BatchCreateTempUserDailyShiftRequest()
        batch_create_temp_user_daily_shift_request.http_method = HttpMethod.POST
        batch_create_temp_user_daily_shift_request.uri = "/open-apis/attendance/v1/user_daily_shifts/batch_create_temp"
        batch_create_temp_user_daily_shift_request.token_types = {AccessTokenType.TENANT, AccessTokenType.USER}
        self._batch_create_temp_user_daily_shift_request: BatchCreateTempUserDailyShiftRequest = batch_create_temp_user_daily_shift_request

    def employee_type(self, employee_type: str) -> "BatchCreateTempUserDailyShiftRequestBuilder":
        self._batch_create_temp_user_daily_shift_request.employee_type = employee_type
        self._batch_create_temp_user_daily_shift_request.add_query("employee_type", employee_type)
        return self

    def request_body(self,
                     request_body: BatchCreateTempUserDailyShiftRequestBody) -> "BatchCreateTempUserDailyShiftRequestBuilder":
        self._batch_create_temp_user_daily_shift_request.request_body = request_body
        self._batch_create_temp_user_daily_shift_request.body = request_body
        return self

    def build(self) -> BatchCreateTempUserDailyShiftRequest:
        return self._batch_create_temp_user_daily_shift_request
