# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class I18nNames(object):
    _types = {
        "ch": str,
        "en": str,
        "ja": str,
    }

    def __init__(self, d=None):
        self.ch: Optional[str] = None
        self.en: Optional[str] = None
        self.ja: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "I18nNamesBuilder":
        return I18nNamesBuilder()


class I18nNamesBuilder(object):
    def __init__(self) -> None:
        self._i18n_names = I18nNames()

    def ch(self, ch: str) -> "I18nNamesBuilder":
        self._i18n_names.ch = ch
        return self

    def en(self, en: str) -> "I18nNamesBuilder":
        self._i18n_names.en = en
        return self

    def ja(self, ja: str) -> "I18nNamesBuilder":
        self._i18n_names.ja = ja
        return self

    def build(self) -> "I18nNames":
        return self._i18n_names
