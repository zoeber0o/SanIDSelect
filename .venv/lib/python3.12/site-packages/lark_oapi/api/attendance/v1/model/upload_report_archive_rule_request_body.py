# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .archive_report_data import ArchiveReportData


class UploadReportArchiveRuleRequestBody(object):
    _types = {
        "month": str,
        "operator_id": str,
        "archive_report_datas": List[ArchiveReportData],
        "archive_rule_id": str,
    }

    def __init__(self, d=None):
        self.month: Optional[str] = None
        self.operator_id: Optional[str] = None
        self.archive_report_datas: Optional[List[ArchiveReportData]] = None
        self.archive_rule_id: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "UploadReportArchiveRuleRequestBodyBuilder":
        return UploadReportArchiveRuleRequestBodyBuilder()


class UploadReportArchiveRuleRequestBodyBuilder(object):
    def __init__(self) -> None:
        self._upload_report_archive_rule_request_body = UploadReportArchiveRuleRequestBody()

    def month(self, month: str) -> "UploadReportArchiveRuleRequestBodyBuilder":
        self._upload_report_archive_rule_request_body.month = month
        return self

    def operator_id(self, operator_id: str) -> "UploadReportArchiveRuleRequestBodyBuilder":
        self._upload_report_archive_rule_request_body.operator_id = operator_id
        return self

    def archive_report_datas(self, archive_report_datas: List[
        ArchiveReportData]) -> "UploadReportArchiveRuleRequestBodyBuilder":
        self._upload_report_archive_rule_request_body.archive_report_datas = archive_report_datas
        return self

    def archive_rule_id(self, archive_rule_id: str) -> "UploadReportArchiveRuleRequestBodyBuilder":
        self._upload_report_archive_rule_request_body.archive_rule_id = archive_rule_id
        return self

    def build(self) -> "UploadReportArchiveRuleRequestBody":
        return self._upload_report_archive_rule_request_body
