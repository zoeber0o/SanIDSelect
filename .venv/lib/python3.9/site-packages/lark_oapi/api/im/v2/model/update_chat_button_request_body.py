# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .open_app_feed_card_buttons import OpenAppFeedCardButtons


class UpdateChatButtonRequestBody(object):
    _types = {
        "user_ids": List[str],
        "chat_id": str,
        "buttons": OpenAppFeedCardButtons,
        "bot_id": str,
    }

    def __init__(self, d=None):
        self.user_ids: Optional[List[str]] = None
        self.chat_id: Optional[str] = None
        self.buttons: Optional[OpenAppFeedCardButtons] = None
        self.bot_id: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "UpdateChatButtonRequestBodyBuilder":
        return UpdateChatButtonRequestBodyBuilder()


class UpdateChatButtonRequestBodyBuilder(object):
    def __init__(self) -> None:
        self._update_chat_button_request_body = UpdateChatButtonRequestBody()

    def user_ids(self, user_ids: List[str]) -> "UpdateChatButtonRequestBodyBuilder":
        self._update_chat_button_request_body.user_ids = user_ids
        return self

    def chat_id(self, chat_id: str) -> "UpdateChatButtonRequestBodyBuilder":
        self._update_chat_button_request_body.chat_id = chat_id
        return self

    def buttons(self, buttons: OpenAppFeedCardButtons) -> "UpdateChatButtonRequestBodyBuilder":
        self._update_chat_button_request_body.buttons = buttons
        return self

    def bot_id(self, bot_id: str) -> "UpdateChatButtonRequestBodyBuilder":
        self._update_chat_button_request_body.bot_id = bot_id
        return self

    def build(self) -> "UpdateChatButtonRequestBody":
        return self._update_chat_button_request_body
