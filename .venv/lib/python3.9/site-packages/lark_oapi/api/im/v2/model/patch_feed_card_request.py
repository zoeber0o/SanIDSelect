# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.model import BaseRequest
from lark_oapi.core.enum import HttpMethod, AccessTokenType
from .patch_feed_card_request_body import PatchFeedCardRequestBody


class PatchFeedCardRequest(BaseRequest):
    def __init__(self) -> None:
        super().__init__()
        self.user_id_type: Optional[str] = None
        self.feed_card_id: Optional[str] = None
        self.request_body: Optional[PatchFeedCardRequestBody] = None

    @staticmethod
    def builder() -> "PatchFeedCardRequestBuilder":
        return PatchFeedCardRequestBuilder()


class PatchFeedCardRequestBuilder(object):

    def __init__(self) -> None:
        patch_feed_card_request = PatchFeedCardRequest()
        patch_feed_card_request.http_method = HttpMethod.PATCH
        patch_feed_card_request.uri = "/open-apis/im/v2/feed_cards/:feed_card_id"
        patch_feed_card_request.token_types = {AccessTokenType.TENANT}
        self._patch_feed_card_request: PatchFeedCardRequest = patch_feed_card_request

    def user_id_type(self, user_id_type: str) -> "PatchFeedCardRequestBuilder":
        self._patch_feed_card_request.user_id_type = user_id_type
        self._patch_feed_card_request.add_query("user_id_type", user_id_type)
        return self

    def feed_card_id(self, feed_card_id: str) -> "PatchFeedCardRequestBuilder":
        self._patch_feed_card_request.feed_card_id = feed_card_id
        self._patch_feed_card_request.paths["feed_card_id"] = str(feed_card_id)
        return self

    def request_body(self, request_body: PatchFeedCardRequestBody) -> "PatchFeedCardRequestBuilder":
        self._patch_feed_card_request.request_body = request_body
        self._patch_feed_card_request.body = request_body
        return self

    def build(self) -> PatchFeedCardRequest:
        return self._patch_feed_card_request
