# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class BatchMessageRecallProgress(object):
    _types = {
        "recall": bool,
        "recall_count": int,
    }

    def __init__(self, d=None):
        self.recall: Optional[bool] = None
        self.recall_count: Optional[int] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "BatchMessageRecallProgressBuilder":
        return BatchMessageRecallProgressBuilder()


class BatchMessageRecallProgressBuilder(object):
    def __init__(self) -> None:
        self._batch_message_recall_progress = BatchMessageRecallProgress()

    def recall(self, recall: bool) -> "BatchMessageRecallProgressBuilder":
        self._batch_message_recall_progress.recall = recall
        return self

    def recall_count(self, recall_count: int) -> "BatchMessageRecallProgressBuilder":
        self._batch_message_recall_progress.recall_count = recall_count
        return self

    def build(self) -> "BatchMessageRecallProgress":
        return self._batch_message_recall_progress
