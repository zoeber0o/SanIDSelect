# Code generated by Lark OpenAPI.

import io
from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.const import UTF_8, CONTENT_TYPE, APPLICATION_JSON
from lark_oapi.core import JSON
from lark_oapi.core.token import verify
from lark_oapi.core.http import Transport
from lark_oapi.core.model import Config, RequestOption, RawResponse
from lark_oapi.core.utils import Files
from requests_toolbelt import MultipartEncoder
from ..model.create_user_mailbox_rule_request import CreateUserMailboxRuleRequest
from ..model.create_user_mailbox_rule_response import CreateUserMailboxRuleResponse
from ..model.delete_user_mailbox_rule_request import DeleteUserMailboxRuleRequest
from ..model.delete_user_mailbox_rule_response import DeleteUserMailboxRuleResponse
from ..model.list_user_mailbox_rule_request import ListUserMailboxRuleRequest
from ..model.list_user_mailbox_rule_response import ListUserMailboxRuleResponse
from ..model.reorder_user_mailbox_rule_request import ReorderUserMailboxRuleRequest
from ..model.reorder_user_mailbox_rule_response import ReorderUserMailboxRuleResponse
from ..model.update_user_mailbox_rule_request import UpdateUserMailboxRuleRequest
from ..model.update_user_mailbox_rule_response import UpdateUserMailboxRuleResponse


class UserMailboxRule(object):
    def __init__(self, config: Config) -> None:
        self.config: Config = config

    def create(self, request: CreateUserMailboxRuleRequest,
               option: Optional[RequestOption] = None) -> CreateUserMailboxRuleResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: CreateUserMailboxRuleResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                 CreateUserMailboxRuleResponse)
        response.raw = resp

        return response

    async def acreate(self, request: CreateUserMailboxRuleRequest,
                      option: Optional[RequestOption] = None) -> CreateUserMailboxRuleResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: CreateUserMailboxRuleResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                 CreateUserMailboxRuleResponse)
        response.raw = resp

        return response

    def delete(self, request: DeleteUserMailboxRuleRequest,
               option: Optional[RequestOption] = None) -> DeleteUserMailboxRuleResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: DeleteUserMailboxRuleResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                 DeleteUserMailboxRuleResponse)
        response.raw = resp

        return response

    async def adelete(self, request: DeleteUserMailboxRuleRequest,
                      option: Optional[RequestOption] = None) -> DeleteUserMailboxRuleResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: DeleteUserMailboxRuleResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                 DeleteUserMailboxRuleResponse)
        response.raw = resp

        return response

    def list(self, request: ListUserMailboxRuleRequest,
             option: Optional[RequestOption] = None) -> ListUserMailboxRuleResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: ListUserMailboxRuleResponse = JSON.unmarshal(str(resp.content, UTF_8), ListUserMailboxRuleResponse)
        response.raw = resp

        return response

    async def alist(self, request: ListUserMailboxRuleRequest,
                    option: Optional[RequestOption] = None) -> ListUserMailboxRuleResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: ListUserMailboxRuleResponse = JSON.unmarshal(str(resp.content, UTF_8), ListUserMailboxRuleResponse)
        response.raw = resp

        return response

    def reorder(self, request: ReorderUserMailboxRuleRequest,
                option: Optional[RequestOption] = None) -> ReorderUserMailboxRuleResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: ReorderUserMailboxRuleResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                  ReorderUserMailboxRuleResponse)
        response.raw = resp

        return response

    async def areorder(self, request: ReorderUserMailboxRuleRequest,
                       option: Optional[RequestOption] = None) -> ReorderUserMailboxRuleResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: ReorderUserMailboxRuleResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                  ReorderUserMailboxRuleResponse)
        response.raw = resp

        return response

    def update(self, request: UpdateUserMailboxRuleRequest,
               option: Optional[RequestOption] = None) -> UpdateUserMailboxRuleResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: UpdateUserMailboxRuleResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                 UpdateUserMailboxRuleResponse)
        response.raw = resp

        return response

    async def aupdate(self, request: UpdateUserMailboxRuleRequest,
                      option: Optional[RequestOption] = None) -> UpdateUserMailboxRuleResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: UpdateUserMailboxRuleResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                 UpdateUserMailboxRuleResponse)
        response.raw = resp

        return response
