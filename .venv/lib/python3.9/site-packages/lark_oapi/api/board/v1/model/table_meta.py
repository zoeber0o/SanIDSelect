# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .style import Style
from .text import Text


class TableMeta(object):
    _types = {
        "row_num": int,
        "col_num": int,
        "row_sizes": List[float],
        "col_sizes": List[float],
        "style": Style,
        "text": Text,
    }

    def __init__(self, d=None):
        self.row_num: Optional[int] = None
        self.col_num: Optional[int] = None
        self.row_sizes: Optional[List[float]] = None
        self.col_sizes: Optional[List[float]] = None
        self.style: Optional[Style] = None
        self.text: Optional[Text] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "TableMetaBuilder":
        return TableMetaBuilder()


class TableMetaBuilder(object):
    def __init__(self) -> None:
        self._table_meta = TableMeta()

    def row_num(self, row_num: int) -> "TableMetaBuilder":
        self._table_meta.row_num = row_num
        return self

    def col_num(self, col_num: int) -> "TableMetaBuilder":
        self._table_meta.col_num = col_num
        return self

    def row_sizes(self, row_sizes: List[float]) -> "TableMetaBuilder":
        self._table_meta.row_sizes = row_sizes
        return self

    def col_sizes(self, col_sizes: List[float]) -> "TableMetaBuilder":
        self._table_meta.col_sizes = col_sizes
        return self

    def style(self, style: Style) -> "TableMetaBuilder":
        self._table_meta.style = style
        return self

    def text(self, text: Text) -> "TableMetaBuilder":
        self._table_meta.text = text
        return self

    def build(self) -> "TableMeta":
        return self._table_meta
