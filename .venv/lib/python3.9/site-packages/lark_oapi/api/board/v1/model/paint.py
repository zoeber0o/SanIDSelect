# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .point import Point


class Paint(object):
    _types = {
        "type": str,
        "lines": List[Point],
        "width": int,
        "color": str,
    }

    def __init__(self, d=None):
        self.type: Optional[str] = None
        self.lines: Optional[List[Point]] = None
        self.width: Optional[int] = None
        self.color: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "PaintBuilder":
        return PaintBuilder()


class PaintBuilder(object):
    def __init__(self) -> None:
        self._paint = Paint()

    def type(self, type: str) -> "PaintBuilder":
        self._paint.type = type
        return self

    def lines(self, lines: List[Point]) -> "PaintBuilder":
        self._paint.lines = lines
        return self

    def width(self, width: int) -> "PaintBuilder":
        self._paint.width = width
        return self

    def color(self, color: str) -> "PaintBuilder":
        self._paint.color = color
        return self

    def build(self) -> "Paint":
        return self._paint
