# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class MyAiObjectContext(object):
    _types = {
        "type": str,
        "biz_id": str,
    }

    def __init__(self, d=None):
        self.type: Optional[str] = None
        self.biz_id: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "MyAiObjectContextBuilder":
        return MyAiObjectContextBuilder()


class MyAiObjectContextBuilder(object):
    def __init__(self) -> None:
        self._my_ai_object_context = MyAiObjectContext()

    def type(self, type: str) -> "MyAiObjectContextBuilder":
        self._my_ai_object_context.type = type
        return self

    def biz_id(self, biz_id: str) -> "MyAiObjectContextBuilder":
        self._my_ai_object_context.biz_id = biz_id
        return self

    def build(self) -> "MyAiObjectContext":
        return self._my_ai_object_context
