# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .common_schema_option import CommonSchemaOption


class EnumFieldSetting(object):
    _types = {
        "enum_field_option_list": List[CommonSchemaOption],
        "is_multiple": bool,
    }

    def __init__(self, d=None):
        self.enum_field_option_list: Optional[List[CommonSchemaOption]] = None
        self.is_multiple: Optional[bool] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "EnumFieldSettingBuilder":
        return EnumFieldSettingBuilder()


class EnumFieldSettingBuilder(object):
    def __init__(self) -> None:
        self._enum_field_setting = EnumFieldSetting()

    def enum_field_option_list(self, enum_field_option_list: List[CommonSchemaOption]) -> "EnumFieldSettingBuilder":
        self._enum_field_setting.enum_field_option_list = enum_field_option_list
        return self

    def is_multiple(self, is_multiple: bool) -> "EnumFieldSettingBuilder":
        self._enum_field_setting.is_multiple = is_multiple
        return self

    def build(self) -> "EnumFieldSetting":
        return self._enum_field_setting
