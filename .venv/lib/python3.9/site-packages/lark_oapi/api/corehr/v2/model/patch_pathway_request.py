# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.model import BaseRequest
from lark_oapi.core.enum import HttpMethod, AccessTokenType
from .pathway_update import PathwayUpdate


class PatchPathwayRequest(BaseRequest):
    def __init__(self) -> None:
        super().__init__()
        self.client_token: Optional[str] = None
        self.pathway_id: Optional[str] = None
        self.request_body: Optional[PathwayUpdate] = None

    @staticmethod
    def builder() -> "PatchPathwayRequestBuilder":
        return PatchPathwayRequestBuilder()


class PatchPathwayRequestBuilder(object):

    def __init__(self) -> None:
        patch_pathway_request = PatchPathwayRequest()
        patch_pathway_request.http_method = HttpMethod.PATCH
        patch_pathway_request.uri = "/open-apis/corehr/v2/pathways/:pathway_id"
        patch_pathway_request.token_types = {AccessTokenType.TENANT}
        self._patch_pathway_request: PatchPathwayRequest = patch_pathway_request

    def client_token(self, client_token: str) -> "PatchPathwayRequestBuilder":
        self._patch_pathway_request.client_token = client_token
        self._patch_pathway_request.add_query("client_token", client_token)
        return self

    def pathway_id(self, pathway_id: str) -> "PatchPathwayRequestBuilder":
        self._patch_pathway_request.pathway_id = pathway_id
        self._patch_pathway_request.paths["pathway_id"] = str(pathway_id)
        return self

    def request_body(self, request_body: PathwayUpdate) -> "PatchPathwayRequestBuilder":
        self._patch_pathway_request.request_body = request_body
        self._patch_pathway_request.body = request_body
        return self

    def build(self) -> PatchPathwayRequest:
        return self._patch_pathway_request
