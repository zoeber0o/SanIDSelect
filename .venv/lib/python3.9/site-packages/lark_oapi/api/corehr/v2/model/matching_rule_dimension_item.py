# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class MatchingRuleDimensionItem(object):
    _types = {
        "dimension_api_name": str,
        "value_boolean": bool,
        "value_enum_ids": List[str],
        "value_lookup_ids": List[str],
    }

    def __init__(self, d=None):
        self.dimension_api_name: Optional[str] = None
        self.value_boolean: Optional[bool] = None
        self.value_enum_ids: Optional[List[str]] = None
        self.value_lookup_ids: Optional[List[str]] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "MatchingRuleDimensionItemBuilder":
        return MatchingRuleDimensionItemBuilder()


class MatchingRuleDimensionItemBuilder(object):
    def __init__(self) -> None:
        self._matching_rule_dimension_item = MatchingRuleDimensionItem()

    def dimension_api_name(self, dimension_api_name: str) -> "MatchingRuleDimensionItemBuilder":
        self._matching_rule_dimension_item.dimension_api_name = dimension_api_name
        return self

    def value_boolean(self, value_boolean: bool) -> "MatchingRuleDimensionItemBuilder":
        self._matching_rule_dimension_item.value_boolean = value_boolean
        return self

    def value_enum_ids(self, value_enum_ids: List[str]) -> "MatchingRuleDimensionItemBuilder":
        self._matching_rule_dimension_item.value_enum_ids = value_enum_ids
        return self

    def value_lookup_ids(self, value_lookup_ids: List[str]) -> "MatchingRuleDimensionItemBuilder":
        self._matching_rule_dimension_item.value_lookup_ids = value_lookup_ids
        return self

    def build(self) -> "MatchingRuleDimensionItem":
        return self._matching_rule_dimension_item
