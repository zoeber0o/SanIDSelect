# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .profile_setting_custom_field import ProfileSettingCustomField


class SeniorityAdjustInformationForEdit(object):
    _types = {
        "id": str,
        "seniority_adjustment_type": str,
        "start_date": str,
        "end_date": str,
        "reasons_for_seniority_adjustment": str,
        "seniority_adjustment": float,
        "custom_fields": List[ProfileSettingCustomField],
    }

    def __init__(self, d=None):
        self.id: Optional[str] = None
        self.seniority_adjustment_type: Optional[str] = None
        self.start_date: Optional[str] = None
        self.end_date: Optional[str] = None
        self.reasons_for_seniority_adjustment: Optional[str] = None
        self.seniority_adjustment: Optional[float] = None
        self.custom_fields: Optional[List[ProfileSettingCustomField]] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "SeniorityAdjustInformationForEditBuilder":
        return SeniorityAdjustInformationForEditBuilder()


class SeniorityAdjustInformationForEditBuilder(object):
    def __init__(self) -> None:
        self._seniority_adjust_information_for_edit = SeniorityAdjustInformationForEdit()

    def id(self, id: str) -> "SeniorityAdjustInformationForEditBuilder":
        self._seniority_adjust_information_for_edit.id = id
        return self

    def seniority_adjustment_type(self, seniority_adjustment_type: str) -> "SeniorityAdjustInformationForEditBuilder":
        self._seniority_adjust_information_for_edit.seniority_adjustment_type = seniority_adjustment_type
        return self

    def start_date(self, start_date: str) -> "SeniorityAdjustInformationForEditBuilder":
        self._seniority_adjust_information_for_edit.start_date = start_date
        return self

    def end_date(self, end_date: str) -> "SeniorityAdjustInformationForEditBuilder":
        self._seniority_adjust_information_for_edit.end_date = end_date
        return self

    def reasons_for_seniority_adjustment(self,
                                         reasons_for_seniority_adjustment: str) -> "SeniorityAdjustInformationForEditBuilder":
        self._seniority_adjust_information_for_edit.reasons_for_seniority_adjustment = reasons_for_seniority_adjustment
        return self

    def seniority_adjustment(self, seniority_adjustment: float) -> "SeniorityAdjustInformationForEditBuilder":
        self._seniority_adjust_information_for_edit.seniority_adjustment = seniority_adjustment
        return self

    def custom_fields(self,
                      custom_fields: List[ProfileSettingCustomField]) -> "SeniorityAdjustInformationForEditBuilder":
        self._seniority_adjust_information_for_edit.custom_fields = custom_fields
        return self

    def build(self) -> "SeniorityAdjustInformationForEdit":
        return self._seniority_adjust_information_for_edit
