# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .job_data_cost_center import JobDataCostCenter
from .tranfer_employment_info import TranferEmploymentInfo


class CreateTransferInfo(object):
    _types = {
        "remark": str,
        "offer_info": str,
        "target_dotted_manager_clean": bool,
        "probation_exist": bool,
        "target_department": str,
        "target_work_location": str,
        "target_direct_manager": str,
        "target_dotted_manager": str,
        "target_job": str,
        "target_job_family": str,
        "target_job_level": str,
        "target_workforce_type": str,
        "target_employee_subtype": str,
        "target_company": str,
        "target_contract_number": str,
        "target_contract_type": str,
        "target_duration_type": str,
        "target_signing_type": str,
        "target_contract_start_date": str,
        "target_contract_end_date": str,
        "target_working_hours_type": str,
        "target_working_calendar": str,
        "target_probation_end_date": str,
        "target_weekly_working_hours": str,
        "target_work_shift": str,
        "target_cost_center_rates": List[JobDataCostCenter],
        "target_employment_change": TranferEmploymentInfo,
        "target_job_grade": str,
        "target_compensation_type": str,
        "target_service_company": str,
        "target_position": str,
        "target_social_security_city": str,
        "is_transfer_with_workforce": bool,
        "target_pathway": str,
        "target_allocation_effective_time": str,
        "target_allocation_expiration_time": str,
        "target_default_cost_center": str,
        "target_is_default_cost_center_inherited": bool,
    }

    def __init__(self, d=None):
        self.remark: Optional[str] = None
        self.offer_info: Optional[str] = None
        self.target_dotted_manager_clean: Optional[bool] = None
        self.probation_exist: Optional[bool] = None
        self.target_department: Optional[str] = None
        self.target_work_location: Optional[str] = None
        self.target_direct_manager: Optional[str] = None
        self.target_dotted_manager: Optional[str] = None
        self.target_job: Optional[str] = None
        self.target_job_family: Optional[str] = None
        self.target_job_level: Optional[str] = None
        self.target_workforce_type: Optional[str] = None
        self.target_employee_subtype: Optional[str] = None
        self.target_company: Optional[str] = None
        self.target_contract_number: Optional[str] = None
        self.target_contract_type: Optional[str] = None
        self.target_duration_type: Optional[str] = None
        self.target_signing_type: Optional[str] = None
        self.target_contract_start_date: Optional[str] = None
        self.target_contract_end_date: Optional[str] = None
        self.target_working_hours_type: Optional[str] = None
        self.target_working_calendar: Optional[str] = None
        self.target_probation_end_date: Optional[str] = None
        self.target_weekly_working_hours: Optional[str] = None
        self.target_work_shift: Optional[str] = None
        self.target_cost_center_rates: Optional[List[JobDataCostCenter]] = None
        self.target_employment_change: Optional[TranferEmploymentInfo] = None
        self.target_job_grade: Optional[str] = None
        self.target_compensation_type: Optional[str] = None
        self.target_service_company: Optional[str] = None
        self.target_position: Optional[str] = None
        self.target_social_security_city: Optional[str] = None
        self.is_transfer_with_workforce: Optional[bool] = None
        self.target_pathway: Optional[str] = None
        self.target_allocation_effective_time: Optional[str] = None
        self.target_allocation_expiration_time: Optional[str] = None
        self.target_default_cost_center: Optional[str] = None
        self.target_is_default_cost_center_inherited: Optional[bool] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "CreateTransferInfoBuilder":
        return CreateTransferInfoBuilder()


class CreateTransferInfoBuilder(object):
    def __init__(self) -> None:
        self._create_transfer_info = CreateTransferInfo()

    def remark(self, remark: str) -> "CreateTransferInfoBuilder":
        self._create_transfer_info.remark = remark
        return self

    def offer_info(self, offer_info: str) -> "CreateTransferInfoBuilder":
        self._create_transfer_info.offer_info = offer_info
        return self

    def target_dotted_manager_clean(self, target_dotted_manager_clean: bool) -> "CreateTransferInfoBuilder":
        self._create_transfer_info.target_dotted_manager_clean = target_dotted_manager_clean
        return self

    def probation_exist(self, probation_exist: bool) -> "CreateTransferInfoBuilder":
        self._create_transfer_info.probation_exist = probation_exist
        return self

    def target_department(self, target_department: str) -> "CreateTransferInfoBuilder":
        self._create_transfer_info.target_department = target_department
        return self

    def target_work_location(self, target_work_location: str) -> "CreateTransferInfoBuilder":
        self._create_transfer_info.target_work_location = target_work_location
        return self

    def target_direct_manager(self, target_direct_manager: str) -> "CreateTransferInfoBuilder":
        self._create_transfer_info.target_direct_manager = target_direct_manager
        return self

    def target_dotted_manager(self, target_dotted_manager: str) -> "CreateTransferInfoBuilder":
        self._create_transfer_info.target_dotted_manager = target_dotted_manager
        return self

    def target_job(self, target_job: str) -> "CreateTransferInfoBuilder":
        self._create_transfer_info.target_job = target_job
        return self

    def target_job_family(self, target_job_family: str) -> "CreateTransferInfoBuilder":
        self._create_transfer_info.target_job_family = target_job_family
        return self

    def target_job_level(self, target_job_level: str) -> "CreateTransferInfoBuilder":
        self._create_transfer_info.target_job_level = target_job_level
        return self

    def target_workforce_type(self, target_workforce_type: str) -> "CreateTransferInfoBuilder":
        self._create_transfer_info.target_workforce_type = target_workforce_type
        return self

    def target_employee_subtype(self, target_employee_subtype: str) -> "CreateTransferInfoBuilder":
        self._create_transfer_info.target_employee_subtype = target_employee_subtype
        return self

    def target_company(self, target_company: str) -> "CreateTransferInfoBuilder":
        self._create_transfer_info.target_company = target_company
        return self

    def target_contract_number(self, target_contract_number: str) -> "CreateTransferInfoBuilder":
        self._create_transfer_info.target_contract_number = target_contract_number
        return self

    def target_contract_type(self, target_contract_type: str) -> "CreateTransferInfoBuilder":
        self._create_transfer_info.target_contract_type = target_contract_type
        return self

    def target_duration_type(self, target_duration_type: str) -> "CreateTransferInfoBuilder":
        self._create_transfer_info.target_duration_type = target_duration_type
        return self

    def target_signing_type(self, target_signing_type: str) -> "CreateTransferInfoBuilder":
        self._create_transfer_info.target_signing_type = target_signing_type
        return self

    def target_contract_start_date(self, target_contract_start_date: str) -> "CreateTransferInfoBuilder":
        self._create_transfer_info.target_contract_start_date = target_contract_start_date
        return self

    def target_contract_end_date(self, target_contract_end_date: str) -> "CreateTransferInfoBuilder":
        self._create_transfer_info.target_contract_end_date = target_contract_end_date
        return self

    def target_working_hours_type(self, target_working_hours_type: str) -> "CreateTransferInfoBuilder":
        self._create_transfer_info.target_working_hours_type = target_working_hours_type
        return self

    def target_working_calendar(self, target_working_calendar: str) -> "CreateTransferInfoBuilder":
        self._create_transfer_info.target_working_calendar = target_working_calendar
        return self

    def target_probation_end_date(self, target_probation_end_date: str) -> "CreateTransferInfoBuilder":
        self._create_transfer_info.target_probation_end_date = target_probation_end_date
        return self

    def target_weekly_working_hours(self, target_weekly_working_hours: str) -> "CreateTransferInfoBuilder":
        self._create_transfer_info.target_weekly_working_hours = target_weekly_working_hours
        return self

    def target_work_shift(self, target_work_shift: str) -> "CreateTransferInfoBuilder":
        self._create_transfer_info.target_work_shift = target_work_shift
        return self

    def target_cost_center_rates(self,
                                 target_cost_center_rates: List[JobDataCostCenter]) -> "CreateTransferInfoBuilder":
        self._create_transfer_info.target_cost_center_rates = target_cost_center_rates
        return self

    def target_employment_change(self, target_employment_change: TranferEmploymentInfo) -> "CreateTransferInfoBuilder":
        self._create_transfer_info.target_employment_change = target_employment_change
        return self

    def target_job_grade(self, target_job_grade: str) -> "CreateTransferInfoBuilder":
        self._create_transfer_info.target_job_grade = target_job_grade
        return self

    def target_compensation_type(self, target_compensation_type: str) -> "CreateTransferInfoBuilder":
        self._create_transfer_info.target_compensation_type = target_compensation_type
        return self

    def target_service_company(self, target_service_company: str) -> "CreateTransferInfoBuilder":
        self._create_transfer_info.target_service_company = target_service_company
        return self

    def target_position(self, target_position: str) -> "CreateTransferInfoBuilder":
        self._create_transfer_info.target_position = target_position
        return self

    def target_social_security_city(self, target_social_security_city: str) -> "CreateTransferInfoBuilder":
        self._create_transfer_info.target_social_security_city = target_social_security_city
        return self

    def is_transfer_with_workforce(self, is_transfer_with_workforce: bool) -> "CreateTransferInfoBuilder":
        self._create_transfer_info.is_transfer_with_workforce = is_transfer_with_workforce
        return self

    def target_pathway(self, target_pathway: str) -> "CreateTransferInfoBuilder":
        self._create_transfer_info.target_pathway = target_pathway
        return self

    def target_allocation_effective_time(self, target_allocation_effective_time: str) -> "CreateTransferInfoBuilder":
        self._create_transfer_info.target_allocation_effective_time = target_allocation_effective_time
        return self

    def target_allocation_expiration_time(self, target_allocation_expiration_time: str) -> "CreateTransferInfoBuilder":
        self._create_transfer_info.target_allocation_expiration_time = target_allocation_expiration_time
        return self

    def target_default_cost_center(self, target_default_cost_center: str) -> "CreateTransferInfoBuilder":
        self._create_transfer_info.target_default_cost_center = target_default_cost_center
        return self

    def target_is_default_cost_center_inherited(self,
                                                target_is_default_cost_center_inherited: bool) -> "CreateTransferInfoBuilder":
        self._create_transfer_info.target_is_default_cost_center_inherited = target_is_default_cost_center_inherited
        return self

    def build(self) -> "CreateTransferInfo":
        return self._create_transfer_info
