# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .i18n import I18n


class TimeZone(object):
    _types = {
        "time_zone_id": str,
        "name": List[I18n],
        "time_zone_code": str,
        "utc_offset": str,
        "status": int,
    }

    def __init__(self, d=None):
        self.time_zone_id: Optional[str] = None
        self.name: Optional[List[I18n]] = None
        self.time_zone_code: Optional[str] = None
        self.utc_offset: Optional[str] = None
        self.status: Optional[int] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "TimeZoneBuilder":
        return TimeZoneBuilder()


class TimeZoneBuilder(object):
    def __init__(self) -> None:
        self._time_zone = TimeZone()

    def time_zone_id(self, time_zone_id: str) -> "TimeZoneBuilder":
        self._time_zone.time_zone_id = time_zone_id
        return self

    def name(self, name: List[I18n]) -> "TimeZoneBuilder":
        self._time_zone.name = name
        return self

    def time_zone_code(self, time_zone_code: str) -> "TimeZoneBuilder":
        self._time_zone.time_zone_code = time_zone_code
        return self

    def utc_offset(self, utc_offset: str) -> "TimeZoneBuilder":
        self._time_zone.utc_offset = utc_offset
        return self

    def status(self, status: int) -> "TimeZoneBuilder":
        self._time_zone.status = status
        return self

    def build(self) -> "TimeZone":
        return self._time_zone
