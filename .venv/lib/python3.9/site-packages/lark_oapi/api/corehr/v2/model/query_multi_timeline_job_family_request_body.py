# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class QueryMultiTimelineJobFamilyRequestBody(object):
    _types = {
        "job_family_ids": List[str],
        "start_date": str,
        "end_date": str,
        "fields": List[str],
    }

    def __init__(self, d=None):
        self.job_family_ids: Optional[List[str]] = None
        self.start_date: Optional[str] = None
        self.end_date: Optional[str] = None
        self.fields: Optional[List[str]] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "QueryMultiTimelineJobFamilyRequestBodyBuilder":
        return QueryMultiTimelineJobFamilyRequestBodyBuilder()


class QueryMultiTimelineJobFamilyRequestBodyBuilder(object):
    def __init__(self) -> None:
        self._query_multi_timeline_job_family_request_body = QueryMultiTimelineJobFamilyRequestBody()

    def job_family_ids(self, job_family_ids: List[str]) -> "QueryMultiTimelineJobFamilyRequestBodyBuilder":
        self._query_multi_timeline_job_family_request_body.job_family_ids = job_family_ids
        return self

    def start_date(self, start_date: str) -> "QueryMultiTimelineJobFamilyRequestBodyBuilder":
        self._query_multi_timeline_job_family_request_body.start_date = start_date
        return self

    def end_date(self, end_date: str) -> "QueryMultiTimelineJobFamilyRequestBodyBuilder":
        self._query_multi_timeline_job_family_request_body.end_date = end_date
        return self

    def fields(self, fields: List[str]) -> "QueryMultiTimelineJobFamilyRequestBodyBuilder":
        self._query_multi_timeline_job_family_request_body.fields = fields
        return self

    def build(self) -> "QueryMultiTimelineJobFamilyRequestBody":
        return self._query_multi_timeline_job_family_request_body
