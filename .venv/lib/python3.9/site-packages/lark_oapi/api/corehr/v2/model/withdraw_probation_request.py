# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.model import BaseRequest
from lark_oapi.core.enum import HttpMethod, AccessTokenType
from .withdraw_probation_request_body import WithdrawProbationRequestBody


class WithdrawProbationRequest(BaseRequest):
    def __init__(self) -> None:
        super().__init__()
        self.client_token: Optional[str] = None
        self.user_id_type: Optional[str] = None
        self.request_body: Optional[WithdrawProbationRequestBody] = None

    @staticmethod
    def builder() -> "WithdrawProbationRequestBuilder":
        return WithdrawProbationRequestBuilder()


class WithdrawProbationRequestBuilder(object):

    def __init__(self) -> None:
        withdraw_probation_request = WithdrawProbationRequest()
        withdraw_probation_request.http_method = HttpMethod.POST
        withdraw_probation_request.uri = "/open-apis/corehr/v2/probation/withdraw"
        withdraw_probation_request.token_types = {AccessTokenType.TENANT}
        self._withdraw_probation_request: WithdrawProbationRequest = withdraw_probation_request

    def client_token(self, client_token: str) -> "WithdrawProbationRequestBuilder":
        self._withdraw_probation_request.client_token = client_token
        self._withdraw_probation_request.add_query("client_token", client_token)
        return self

    def user_id_type(self, user_id_type: str) -> "WithdrawProbationRequestBuilder":
        self._withdraw_probation_request.user_id_type = user_id_type
        self._withdraw_probation_request.add_query("user_id_type", user_id_type)
        return self

    def request_body(self, request_body: WithdrawProbationRequestBody) -> "WithdrawProbationRequestBuilder":
        self._withdraw_probation_request.request_body = request_body
        self._withdraw_probation_request.body = request_body
        return self

    def build(self) -> WithdrawProbationRequest:
        return self._withdraw_probation_request
