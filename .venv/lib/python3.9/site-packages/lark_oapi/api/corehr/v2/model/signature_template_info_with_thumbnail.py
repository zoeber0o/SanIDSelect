# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .i18n import I18n
from .enum import Enum
from .enum import Enum
from .signature_user_info import SignatureUserInfo
from .signature_user_info import SignatureUserInfo
from .signature_signatory_label import SignatureSignatoryLabel
from .signature_template_region_info import SignatureTemplateRegionInfo


class SignatureTemplateInfoWithThumbnail(object):
    _types = {
        "id": str,
        "label": List[I18n],
        "category": Enum,
        "usage": Enum,
        "create_time": str,
        "modify_time": str,
        "created_by": SignatureUserInfo,
        "updated_by": SignatureUserInfo,
        "thumbnail_url": str,
        "signatory_labels": List[SignatureSignatoryLabel],
        "template_code": str,
        "template_desc": str,
        "template_region_info": SignatureTemplateRegionInfo,
    }

    def __init__(self, d=None):
        self.id: Optional[str] = None
        self.label: Optional[List[I18n]] = None
        self.category: Optional[Enum] = None
        self.usage: Optional[Enum] = None
        self.create_time: Optional[str] = None
        self.modify_time: Optional[str] = None
        self.created_by: Optional[SignatureUserInfo] = None
        self.updated_by: Optional[SignatureUserInfo] = None
        self.thumbnail_url: Optional[str] = None
        self.signatory_labels: Optional[List[SignatureSignatoryLabel]] = None
        self.template_code: Optional[str] = None
        self.template_desc: Optional[str] = None
        self.template_region_info: Optional[SignatureTemplateRegionInfo] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "SignatureTemplateInfoWithThumbnailBuilder":
        return SignatureTemplateInfoWithThumbnailBuilder()


class SignatureTemplateInfoWithThumbnailBuilder(object):
    def __init__(self) -> None:
        self._signature_template_info_with_thumbnail = SignatureTemplateInfoWithThumbnail()

    def id(self, id: str) -> "SignatureTemplateInfoWithThumbnailBuilder":
        self._signature_template_info_with_thumbnail.id = id
        return self

    def label(self, label: List[I18n]) -> "SignatureTemplateInfoWithThumbnailBuilder":
        self._signature_template_info_with_thumbnail.label = label
        return self

    def category(self, category: Enum) -> "SignatureTemplateInfoWithThumbnailBuilder":
        self._signature_template_info_with_thumbnail.category = category
        return self

    def usage(self, usage: Enum) -> "SignatureTemplateInfoWithThumbnailBuilder":
        self._signature_template_info_with_thumbnail.usage = usage
        return self

    def create_time(self, create_time: str) -> "SignatureTemplateInfoWithThumbnailBuilder":
        self._signature_template_info_with_thumbnail.create_time = create_time
        return self

    def modify_time(self, modify_time: str) -> "SignatureTemplateInfoWithThumbnailBuilder":
        self._signature_template_info_with_thumbnail.modify_time = modify_time
        return self

    def created_by(self, created_by: SignatureUserInfo) -> "SignatureTemplateInfoWithThumbnailBuilder":
        self._signature_template_info_with_thumbnail.created_by = created_by
        return self

    def updated_by(self, updated_by: SignatureUserInfo) -> "SignatureTemplateInfoWithThumbnailBuilder":
        self._signature_template_info_with_thumbnail.updated_by = updated_by
        return self

    def thumbnail_url(self, thumbnail_url: str) -> "SignatureTemplateInfoWithThumbnailBuilder":
        self._signature_template_info_with_thumbnail.thumbnail_url = thumbnail_url
        return self

    def signatory_labels(self, signatory_labels: List[
        SignatureSignatoryLabel]) -> "SignatureTemplateInfoWithThumbnailBuilder":
        self._signature_template_info_with_thumbnail.signatory_labels = signatory_labels
        return self

    def template_code(self, template_code: str) -> "SignatureTemplateInfoWithThumbnailBuilder":
        self._signature_template_info_with_thumbnail.template_code = template_code
        return self

    def template_desc(self, template_desc: str) -> "SignatureTemplateInfoWithThumbnailBuilder":
        self._signature_template_info_with_thumbnail.template_desc = template_desc
        return self

    def template_region_info(self,
                             template_region_info: SignatureTemplateRegionInfo) -> "SignatureTemplateInfoWithThumbnailBuilder":
        self._signature_template_info_with_thumbnail.template_region_info = template_region_info
        return self

    def build(self) -> "SignatureTemplateInfoWithThumbnail":
        return self._signature_template_info_with_thumbnail
