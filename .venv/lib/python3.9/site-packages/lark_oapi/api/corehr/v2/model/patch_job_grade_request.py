# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.model import BaseRequest
from lark_oapi.core.enum import HttpMethod, AccessTokenType
from .job_grade_update import JobGradeUpdate


class PatchJobGradeRequest(BaseRequest):
    def __init__(self) -> None:
        super().__init__()
        self.client_token: Optional[str] = None
        self.job_grade_id: Optional[str] = None
        self.request_body: Optional[JobGradeUpdate] = None

    @staticmethod
    def builder() -> "PatchJobGradeRequestBuilder":
        return PatchJobGradeRequestBuilder()


class PatchJobGradeRequestBuilder(object):

    def __init__(self) -> None:
        patch_job_grade_request = PatchJobGradeRequest()
        patch_job_grade_request.http_method = HttpMethod.PATCH
        patch_job_grade_request.uri = "/open-apis/corehr/v2/job_grades/:job_grade_id"
        patch_job_grade_request.token_types = {AccessTokenType.TENANT}
        self._patch_job_grade_request: PatchJobGradeRequest = patch_job_grade_request

    def client_token(self, client_token: str) -> "PatchJobGradeRequestBuilder":
        self._patch_job_grade_request.client_token = client_token
        self._patch_job_grade_request.add_query("client_token", client_token)
        return self

    def job_grade_id(self, job_grade_id: str) -> "PatchJobGradeRequestBuilder":
        self._patch_job_grade_request.job_grade_id = job_grade_id
        self._patch_job_grade_request.paths["job_grade_id"] = str(job_grade_id)
        return self

    def request_body(self, request_body: JobGradeUpdate) -> "PatchJobGradeRequestBuilder":
        self._patch_job_grade_request.request_body = request_body
        self._patch_job_grade_request.body = request_body
        return self

    def build(self) -> PatchJobGradeRequest:
        return self._patch_job_grade_request
