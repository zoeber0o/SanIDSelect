# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class ProcessTransfer(object):
    _types = {
        "operator": str,
        "to_user_id": str,
        "approver_ids": List[str],
        "remark": str,
        "system_user": bool,
    }

    def __init__(self, d=None):
        self.operator: Optional[str] = None
        self.to_user_id: Optional[str] = None
        self.approver_ids: Optional[List[str]] = None
        self.remark: Optional[str] = None
        self.system_user: Optional[bool] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "ProcessTransferBuilder":
        return ProcessTransferBuilder()


class ProcessTransferBuilder(object):
    def __init__(self) -> None:
        self._process_transfer = ProcessTransfer()

    def operator(self, operator: str) -> "ProcessTransferBuilder":
        self._process_transfer.operator = operator
        return self

    def to_user_id(self, to_user_id: str) -> "ProcessTransferBuilder":
        self._process_transfer.to_user_id = to_user_id
        return self

    def approver_ids(self, approver_ids: List[str]) -> "ProcessTransferBuilder":
        self._process_transfer.approver_ids = approver_ids
        return self

    def remark(self, remark: str) -> "ProcessTransferBuilder":
        self._process_transfer.remark = remark
        return self

    def system_user(self, system_user: bool) -> "ProcessTransferBuilder":
        self._process_transfer.system_user = system_user
        return self

    def build(self) -> "ProcessTransfer":
        return self._process_transfer
