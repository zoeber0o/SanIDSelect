# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .name import Name
from .name import Name
from .name import Name
from .resident_tax_for_update import ResidentTaxForUpdate
from .dependent_for_update import DependentForUpdate
from .bank_account_for_update import BankAccountForUpdate
from .national_id_for_update import NationalIdForUpdate
from .personal_profile_for_update import PersonalProfileForUpdate
from .emergency_contact_for_update import EmergencyContactForUpdate
from .address_for_update import AddressForUpdate
from .object_field_data import ObjectFieldData


class BasicInfo(object):
    _types = {
        "name": Name,
        "phone_number": str,
        "international_area_code": str,
        "email": str,
        "date_of_birth": str,
        "personal_id_number": str,
        "personal_id_type": str,
        "date_entered_workforce": str,
        "gender_id": str,
        "nationality_id": str,
        "nationality_v2_id": str,
        "additional_nationality_id_list": List[str],
        "citizenship_status_id_list": List[str],
        "home_address": str,
        "worker_id": str,
        "user_geo": str,
        "legal_name": Name,
        "additional_name": Name,
        "resident_tax_list": List[ResidentTaxForUpdate],
        "born_country_region": str,
        "is_disabled": bool,
        "disable_card_number": str,
        "is_old_alone": bool,
        "is_martyr_family": bool,
        "martyr_card_number": str,
        "dependent_list": List[DependentForUpdate],
        "religion": str,
        "bank_account_list": List[BankAccountForUpdate],
        "national_id_list": List[NationalIdForUpdate],
        "personal_profile_list": List[PersonalProfileForUpdate],
        "emergency_contact_list": List[EmergencyContactForUpdate],
        "address_list": List[AddressForUpdate],
        "marital_status": str,
        "ethnicity_race": str,
        "native_region": str,
        "hukou_type": str,
        "hukou_location": str,
        "custom_fields": List[ObjectFieldData],
        "expected_graduate_date": str,
    }

    def __init__(self, d=None):
        self.name: Optional[Name] = None
        self.phone_number: Optional[str] = None
        self.international_area_code: Optional[str] = None
        self.email: Optional[str] = None
        self.date_of_birth: Optional[str] = None
        self.personal_id_number: Optional[str] = None
        self.personal_id_type: Optional[str] = None
        self.date_entered_workforce: Optional[str] = None
        self.gender_id: Optional[str] = None
        self.nationality_id: Optional[str] = None
        self.nationality_v2_id: Optional[str] = None
        self.additional_nationality_id_list: Optional[List[str]] = None
        self.citizenship_status_id_list: Optional[List[str]] = None
        self.home_address: Optional[str] = None
        self.worker_id: Optional[str] = None
        self.user_geo: Optional[str] = None
        self.legal_name: Optional[Name] = None
        self.additional_name: Optional[Name] = None
        self.resident_tax_list: Optional[List[ResidentTaxForUpdate]] = None
        self.born_country_region: Optional[str] = None
        self.is_disabled: Optional[bool] = None
        self.disable_card_number: Optional[str] = None
        self.is_old_alone: Optional[bool] = None
        self.is_martyr_family: Optional[bool] = None
        self.martyr_card_number: Optional[str] = None
        self.dependent_list: Optional[List[DependentForUpdate]] = None
        self.religion: Optional[str] = None
        self.bank_account_list: Optional[List[BankAccountForUpdate]] = None
        self.national_id_list: Optional[List[NationalIdForUpdate]] = None
        self.personal_profile_list: Optional[List[PersonalProfileForUpdate]] = None
        self.emergency_contact_list: Optional[List[EmergencyContactForUpdate]] = None
        self.address_list: Optional[List[AddressForUpdate]] = None
        self.marital_status: Optional[str] = None
        self.ethnicity_race: Optional[str] = None
        self.native_region: Optional[str] = None
        self.hukou_type: Optional[str] = None
        self.hukou_location: Optional[str] = None
        self.custom_fields: Optional[List[ObjectFieldData]] = None
        self.expected_graduate_date: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "BasicInfoBuilder":
        return BasicInfoBuilder()


class BasicInfoBuilder(object):
    def __init__(self) -> None:
        self._basic_info = BasicInfo()

    def name(self, name: Name) -> "BasicInfoBuilder":
        self._basic_info.name = name
        return self

    def phone_number(self, phone_number: str) -> "BasicInfoBuilder":
        self._basic_info.phone_number = phone_number
        return self

    def international_area_code(self, international_area_code: str) -> "BasicInfoBuilder":
        self._basic_info.international_area_code = international_area_code
        return self

    def email(self, email: str) -> "BasicInfoBuilder":
        self._basic_info.email = email
        return self

    def date_of_birth(self, date_of_birth: str) -> "BasicInfoBuilder":
        self._basic_info.date_of_birth = date_of_birth
        return self

    def personal_id_number(self, personal_id_number: str) -> "BasicInfoBuilder":
        self._basic_info.personal_id_number = personal_id_number
        return self

    def personal_id_type(self, personal_id_type: str) -> "BasicInfoBuilder":
        self._basic_info.personal_id_type = personal_id_type
        return self

    def date_entered_workforce(self, date_entered_workforce: str) -> "BasicInfoBuilder":
        self._basic_info.date_entered_workforce = date_entered_workforce
        return self

    def gender_id(self, gender_id: str) -> "BasicInfoBuilder":
        self._basic_info.gender_id = gender_id
        return self

    def nationality_id(self, nationality_id: str) -> "BasicInfoBuilder":
        self._basic_info.nationality_id = nationality_id
        return self

    def nationality_v2_id(self, nationality_v2_id: str) -> "BasicInfoBuilder":
        self._basic_info.nationality_v2_id = nationality_v2_id
        return self

    def additional_nationality_id_list(self, additional_nationality_id_list: List[str]) -> "BasicInfoBuilder":
        self._basic_info.additional_nationality_id_list = additional_nationality_id_list
        return self

    def citizenship_status_id_list(self, citizenship_status_id_list: List[str]) -> "BasicInfoBuilder":
        self._basic_info.citizenship_status_id_list = citizenship_status_id_list
        return self

    def home_address(self, home_address: str) -> "BasicInfoBuilder":
        self._basic_info.home_address = home_address
        return self

    def worker_id(self, worker_id: str) -> "BasicInfoBuilder":
        self._basic_info.worker_id = worker_id
        return self

    def user_geo(self, user_geo: str) -> "BasicInfoBuilder":
        self._basic_info.user_geo = user_geo
        return self

    def legal_name(self, legal_name: Name) -> "BasicInfoBuilder":
        self._basic_info.legal_name = legal_name
        return self

    def additional_name(self, additional_name: Name) -> "BasicInfoBuilder":
        self._basic_info.additional_name = additional_name
        return self

    def resident_tax_list(self, resident_tax_list: List[ResidentTaxForUpdate]) -> "BasicInfoBuilder":
        self._basic_info.resident_tax_list = resident_tax_list
        return self

    def born_country_region(self, born_country_region: str) -> "BasicInfoBuilder":
        self._basic_info.born_country_region = born_country_region
        return self

    def is_disabled(self, is_disabled: bool) -> "BasicInfoBuilder":
        self._basic_info.is_disabled = is_disabled
        return self

    def disable_card_number(self, disable_card_number: str) -> "BasicInfoBuilder":
        self._basic_info.disable_card_number = disable_card_number
        return self

    def is_old_alone(self, is_old_alone: bool) -> "BasicInfoBuilder":
        self._basic_info.is_old_alone = is_old_alone
        return self

    def is_martyr_family(self, is_martyr_family: bool) -> "BasicInfoBuilder":
        self._basic_info.is_martyr_family = is_martyr_family
        return self

    def martyr_card_number(self, martyr_card_number: str) -> "BasicInfoBuilder":
        self._basic_info.martyr_card_number = martyr_card_number
        return self

    def dependent_list(self, dependent_list: List[DependentForUpdate]) -> "BasicInfoBuilder":
        self._basic_info.dependent_list = dependent_list
        return self

    def religion(self, religion: str) -> "BasicInfoBuilder":
        self._basic_info.religion = religion
        return self

    def bank_account_list(self, bank_account_list: List[BankAccountForUpdate]) -> "BasicInfoBuilder":
        self._basic_info.bank_account_list = bank_account_list
        return self

    def national_id_list(self, national_id_list: List[NationalIdForUpdate]) -> "BasicInfoBuilder":
        self._basic_info.national_id_list = national_id_list
        return self

    def personal_profile_list(self, personal_profile_list: List[PersonalProfileForUpdate]) -> "BasicInfoBuilder":
        self._basic_info.personal_profile_list = personal_profile_list
        return self

    def emergency_contact_list(self, emergency_contact_list: List[EmergencyContactForUpdate]) -> "BasicInfoBuilder":
        self._basic_info.emergency_contact_list = emergency_contact_list
        return self

    def address_list(self, address_list: List[AddressForUpdate]) -> "BasicInfoBuilder":
        self._basic_info.address_list = address_list
        return self

    def marital_status(self, marital_status: str) -> "BasicInfoBuilder":
        self._basic_info.marital_status = marital_status
        return self

    def ethnicity_race(self, ethnicity_race: str) -> "BasicInfoBuilder":
        self._basic_info.ethnicity_race = ethnicity_race
        return self

    def native_region(self, native_region: str) -> "BasicInfoBuilder":
        self._basic_info.native_region = native_region
        return self

    def hukou_type(self, hukou_type: str) -> "BasicInfoBuilder":
        self._basic_info.hukou_type = hukou_type
        return self

    def hukou_location(self, hukou_location: str) -> "BasicInfoBuilder":
        self._basic_info.hukou_location = hukou_location
        return self

    def custom_fields(self, custom_fields: List[ObjectFieldData]) -> "BasicInfoBuilder":
        self._basic_info.custom_fields = custom_fields
        return self

    def expected_graduate_date(self, expected_graduate_date: str) -> "BasicInfoBuilder":
        self._basic_info.expected_graduate_date = expected_graduate_date
        return self

    def build(self) -> "BasicInfo":
        return self._basic_info
