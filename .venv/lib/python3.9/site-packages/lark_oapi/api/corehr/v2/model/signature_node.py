# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .signature_user_info import SignatureUserInfo
from .signature_enum_info_label import SignatureEnumInfoLabel


class SignatureNode(object):
    _types = {
        "user_infos": List[SignatureUserInfo],
        "state": str,
        "finish_time": str,
        "updated_time": str,
        "is_ongoing": bool,
        "role_label": SignatureEnumInfoLabel,
        "sign_role": str,
    }

    def __init__(self, d=None):
        self.user_infos: Optional[List[SignatureUserInfo]] = None
        self.state: Optional[str] = None
        self.finish_time: Optional[str] = None
        self.updated_time: Optional[str] = None
        self.is_ongoing: Optional[bool] = None
        self.role_label: Optional[SignatureEnumInfoLabel] = None
        self.sign_role: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "SignatureNodeBuilder":
        return SignatureNodeBuilder()


class SignatureNodeBuilder(object):
    def __init__(self) -> None:
        self._signature_node = SignatureNode()

    def user_infos(self, user_infos: List[SignatureUserInfo]) -> "SignatureNodeBuilder":
        self._signature_node.user_infos = user_infos
        return self

    def state(self, state: str) -> "SignatureNodeBuilder":
        self._signature_node.state = state
        return self

    def finish_time(self, finish_time: str) -> "SignatureNodeBuilder":
        self._signature_node.finish_time = finish_time
        return self

    def updated_time(self, updated_time: str) -> "SignatureNodeBuilder":
        self._signature_node.updated_time = updated_time
        return self

    def is_ongoing(self, is_ongoing: bool) -> "SignatureNodeBuilder":
        self._signature_node.is_ongoing = is_ongoing
        return self

    def role_label(self, role_label: SignatureEnumInfoLabel) -> "SignatureNodeBuilder":
        self._signature_node.role_label = role_label
        return self

    def sign_role(self, sign_role: str) -> "SignatureNodeBuilder":
        self._signature_node.sign_role = sign_role
        return self

    def build(self) -> "SignatureNode":
        return self._signature_node
