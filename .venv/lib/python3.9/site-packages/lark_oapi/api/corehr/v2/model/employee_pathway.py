# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .i18n import I18n
from .i18n import I18n
from .custom_field_data import CustomFieldData


class EmployeePathway(object):
    _types = {
        "id": str,
        "code": str,
        "name": List[I18n],
        "description": List[I18n],
        "active": bool,
        "custom_fields": List[CustomFieldData],
    }

    def __init__(self, d=None):
        self.id: Optional[str] = None
        self.code: Optional[str] = None
        self.name: Optional[List[I18n]] = None
        self.description: Optional[List[I18n]] = None
        self.active: Optional[bool] = None
        self.custom_fields: Optional[List[CustomFieldData]] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "EmployeePathwayBuilder":
        return EmployeePathwayBuilder()


class EmployeePathwayBuilder(object):
    def __init__(self) -> None:
        self._employee_pathway = EmployeePathway()

    def id(self, id: str) -> "EmployeePathwayBuilder":
        self._employee_pathway.id = id
        return self

    def code(self, code: str) -> "EmployeePathwayBuilder":
        self._employee_pathway.code = code
        return self

    def name(self, name: List[I18n]) -> "EmployeePathwayBuilder":
        self._employee_pathway.name = name
        return self

    def description(self, description: List[I18n]) -> "EmployeePathwayBuilder":
        self._employee_pathway.description = description
        return self

    def active(self, active: bool) -> "EmployeePathwayBuilder":
        self._employee_pathway.active = active
        return self

    def custom_fields(self, custom_fields: List[CustomFieldData]) -> "EmployeePathwayBuilder":
        self._employee_pathway.custom_fields = custom_fields
        return self

    def build(self) -> "EmployeePathway":
        return self._employee_pathway
