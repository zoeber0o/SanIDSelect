# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class TreeDepartmentRequestBody(object):
    _types = {
        "department_id": str,
        "need_inactive": bool,
        "effective_date": str,
    }

    def __init__(self, d=None):
        self.department_id: Optional[str] = None
        self.need_inactive: Optional[bool] = None
        self.effective_date: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "TreeDepartmentRequestBodyBuilder":
        return TreeDepartmentRequestBodyBuilder()


class TreeDepartmentRequestBodyBuilder(object):
    def __init__(self) -> None:
        self._tree_department_request_body = TreeDepartmentRequestBody()

    def department_id(self, department_id: str) -> "TreeDepartmentRequestBodyBuilder":
        self._tree_department_request_body.department_id = department_id
        return self

    def need_inactive(self, need_inactive: bool) -> "TreeDepartmentRequestBodyBuilder":
        self._tree_department_request_body.need_inactive = need_inactive
        return self

    def effective_date(self, effective_date: str) -> "TreeDepartmentRequestBodyBuilder":
        self._tree_department_request_body.effective_date = effective_date
        return self

    def build(self) -> "TreeDepartmentRequestBody":
        return self._tree_department_request_body
