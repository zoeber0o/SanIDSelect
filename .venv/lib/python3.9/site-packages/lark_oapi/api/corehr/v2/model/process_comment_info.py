# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .dataengine_i18n import DataengineI18n


class ProcessCommentInfo(object):
    _types = {
        "commentor_id": str,
        "commentor_name": DataengineI18n,
        "comment_time": str,
        "comment_msg": str,
    }

    def __init__(self, d=None):
        self.commentor_id: Optional[str] = None
        self.commentor_name: Optional[DataengineI18n] = None
        self.comment_time: Optional[str] = None
        self.comment_msg: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "ProcessCommentInfoBuilder":
        return ProcessCommentInfoBuilder()


class ProcessCommentInfoBuilder(object):
    def __init__(self) -> None:
        self._process_comment_info = ProcessCommentInfo()

    def commentor_id(self, commentor_id: str) -> "ProcessCommentInfoBuilder":
        self._process_comment_info.commentor_id = commentor_id
        return self

    def commentor_name(self, commentor_name: DataengineI18n) -> "ProcessCommentInfoBuilder":
        self._process_comment_info.commentor_name = commentor_name
        return self

    def comment_time(self, comment_time: str) -> "ProcessCommentInfoBuilder":
        self._process_comment_info.comment_time = comment_time
        return self

    def comment_msg(self, comment_msg: str) -> "ProcessCommentInfoBuilder":
        self._process_comment_info.comment_msg = comment_msg
        return self

    def build(self) -> "ProcessCommentInfo":
        return self._process_comment_info
