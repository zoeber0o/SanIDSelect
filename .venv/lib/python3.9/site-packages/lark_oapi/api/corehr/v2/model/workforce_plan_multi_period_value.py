# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class WorkforcePlanMultiPeriodValue(object):
    _types = {
        "period_date": str,
        "workforce_plan": str,
        "individuals_to_be_added": str,
        "individuals_to_be_removed": str,
    }

    def __init__(self, d=None):
        self.period_date: Optional[str] = None
        self.workforce_plan: Optional[str] = None
        self.individuals_to_be_added: Optional[str] = None
        self.individuals_to_be_removed: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "WorkforcePlanMultiPeriodValueBuilder":
        return WorkforcePlanMultiPeriodValueBuilder()


class WorkforcePlanMultiPeriodValueBuilder(object):
    def __init__(self) -> None:
        self._workforce_plan_multi_period_value = WorkforcePlanMultiPeriodValue()

    def period_date(self, period_date: str) -> "WorkforcePlanMultiPeriodValueBuilder":
        self._workforce_plan_multi_period_value.period_date = period_date
        return self

    def workforce_plan(self, workforce_plan: str) -> "WorkforcePlanMultiPeriodValueBuilder":
        self._workforce_plan_multi_period_value.workforce_plan = workforce_plan
        return self

    def individuals_to_be_added(self, individuals_to_be_added: str) -> "WorkforcePlanMultiPeriodValueBuilder":
        self._workforce_plan_multi_period_value.individuals_to_be_added = individuals_to_be_added
        return self

    def individuals_to_be_removed(self, individuals_to_be_removed: str) -> "WorkforcePlanMultiPeriodValueBuilder":
        self._workforce_plan_multi_period_value.individuals_to_be_removed = individuals_to_be_removed
        return self

    def build(self) -> "WorkforcePlanMultiPeriodValue":
        return self._workforce_plan_multi_period_value
