# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .job_data_cost_center import JobDataCostCenter


class CostAllocation(object):
    _types = {
        "effective_time": str,
        "expiration_time": str,
        "cost_center_rates": List[JobDataCostCenter],
    }

    def __init__(self, d=None):
        self.effective_time: Optional[str] = None
        self.expiration_time: Optional[str] = None
        self.cost_center_rates: Optional[List[JobDataCostCenter]] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "CostAllocationBuilder":
        return CostAllocationBuilder()


class CostAllocationBuilder(object):
    def __init__(self) -> None:
        self._cost_allocation = CostAllocation()

    def effective_time(self, effective_time: str) -> "CostAllocationBuilder":
        self._cost_allocation.effective_time = effective_time
        return self

    def expiration_time(self, expiration_time: str) -> "CostAllocationBuilder":
        self._cost_allocation.expiration_time = expiration_time
        return self

    def cost_center_rates(self, cost_center_rates: List[JobDataCostCenter]) -> "CostAllocationBuilder":
        self._cost_allocation.cost_center_rates = cost_center_rates
        return self

    def build(self) -> "CostAllocation":
        return self._cost_allocation
