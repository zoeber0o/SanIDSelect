# Code generated by Lark OpenAPI.

import io
from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.const import UTF_8, CONTENT_TYPE, APPLICATION_JSON
from lark_oapi.core import JSON
from lark_oapi.core.token import verify
from lark_oapi.core.http import Transport
from lark_oapi.core.model import Config, RequestOption, RawResponse
from lark_oapi.core.utils import Files
from requests_toolbelt import MultipartEncoder
from ..model.batch_query_cost_allocation_request import BatchQueryCostAllocationRequest
from ..model.batch_query_cost_allocation_response import BatchQueryCostAllocationResponse
from ..model.create_version_cost_allocation_request import CreateVersionCostAllocationRequest
from ..model.create_version_cost_allocation_response import CreateVersionCostAllocationResponse
from ..model.remove_version_cost_allocation_request import RemoveVersionCostAllocationRequest
from ..model.remove_version_cost_allocation_response import RemoveVersionCostAllocationResponse
from ..model.update_version_cost_allocation_request import UpdateVersionCostAllocationRequest
from ..model.update_version_cost_allocation_response import UpdateVersionCostAllocationResponse


class CostAllocation(object):
    def __init__(self, config: Config) -> None:
        self.config: Config = config

    def batch_query(self, request: BatchQueryCostAllocationRequest,
                    option: Optional[RequestOption] = None) -> BatchQueryCostAllocationResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: BatchQueryCostAllocationResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                    BatchQueryCostAllocationResponse)
        response.raw = resp

        return response

    async def abatch_query(self, request: BatchQueryCostAllocationRequest,
                           option: Optional[RequestOption] = None) -> BatchQueryCostAllocationResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: BatchQueryCostAllocationResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                    BatchQueryCostAllocationResponse)
        response.raw = resp

        return response

    def create_version(self, request: CreateVersionCostAllocationRequest,
                       option: Optional[RequestOption] = None) -> CreateVersionCostAllocationResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: CreateVersionCostAllocationResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                       CreateVersionCostAllocationResponse)
        response.raw = resp

        return response

    async def acreate_version(self, request: CreateVersionCostAllocationRequest,
                              option: Optional[RequestOption] = None) -> CreateVersionCostAllocationResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: CreateVersionCostAllocationResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                       CreateVersionCostAllocationResponse)
        response.raw = resp

        return response

    def remove_version(self, request: RemoveVersionCostAllocationRequest,
                       option: Optional[RequestOption] = None) -> RemoveVersionCostAllocationResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: RemoveVersionCostAllocationResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                       RemoveVersionCostAllocationResponse)
        response.raw = resp

        return response

    async def aremove_version(self, request: RemoveVersionCostAllocationRequest,
                              option: Optional[RequestOption] = None) -> RemoveVersionCostAllocationResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: RemoveVersionCostAllocationResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                       RemoveVersionCostAllocationResponse)
        response.raw = resp

        return response

    def update_version(self, request: UpdateVersionCostAllocationRequest,
                       option: Optional[RequestOption] = None) -> UpdateVersionCostAllocationResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: UpdateVersionCostAllocationResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                       UpdateVersionCostAllocationResponse)
        response.raw = resp

        return response

    async def aupdate_version(self, request: UpdateVersionCostAllocationRequest,
                              option: Optional[RequestOption] = None) -> UpdateVersionCostAllocationResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: UpdateVersionCostAllocationResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                       UpdateVersionCostAllocationResponse)
        response.raw = resp

        return response
