# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .matching_rule_dimension_item import MatchingRuleDimensionItem


class MatchingRuleScopeSetting(object):
    _types = {
        "is_all_scope": bool,
        "matching_rule_dimensions": List[MatchingRuleDimensionItem],
    }

    def __init__(self, d=None):
        self.is_all_scope: Optional[bool] = None
        self.matching_rule_dimensions: Optional[List[MatchingRuleDimensionItem]] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "MatchingRuleScopeSettingBuilder":
        return MatchingRuleScopeSettingBuilder()


class MatchingRuleScopeSettingBuilder(object):
    def __init__(self) -> None:
        self._matching_rule_scope_setting = MatchingRuleScopeSetting()

    def is_all_scope(self, is_all_scope: bool) -> "MatchingRuleScopeSettingBuilder":
        self._matching_rule_scope_setting.is_all_scope = is_all_scope
        return self

    def matching_rule_dimensions(self, matching_rule_dimensions: List[
        MatchingRuleDimensionItem]) -> "MatchingRuleScopeSettingBuilder":
        self._matching_rule_scope_setting.matching_rule_dimensions = matching_rule_dimensions
        return self

    def build(self) -> "MatchingRuleScopeSetting":
        return self._matching_rule_scope_setting
