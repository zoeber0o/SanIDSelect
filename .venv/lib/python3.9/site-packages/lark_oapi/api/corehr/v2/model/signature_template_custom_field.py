# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .i18n import I18n
from .enum import Enum
from .signature_template_common_field_info import SignatureTemplateCommonFieldInfo


class SignatureTemplateCustomField(object):
    _types = {
        "label": List[I18n],
        "apiname": str,
        "custom_field_type": Enum,
        "used": bool,
        "is_required": bool,
        "custom_desc": str,
        "common_info": SignatureTemplateCommonFieldInfo,
    }

    def __init__(self, d=None):
        self.label: Optional[List[I18n]] = None
        self.apiname: Optional[str] = None
        self.custom_field_type: Optional[Enum] = None
        self.used: Optional[bool] = None
        self.is_required: Optional[bool] = None
        self.custom_desc: Optional[str] = None
        self.common_info: Optional[SignatureTemplateCommonFieldInfo] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "SignatureTemplateCustomFieldBuilder":
        return SignatureTemplateCustomFieldBuilder()


class SignatureTemplateCustomFieldBuilder(object):
    def __init__(self) -> None:
        self._signature_template_custom_field = SignatureTemplateCustomField()

    def label(self, label: List[I18n]) -> "SignatureTemplateCustomFieldBuilder":
        self._signature_template_custom_field.label = label
        return self

    def apiname(self, apiname: str) -> "SignatureTemplateCustomFieldBuilder":
        self._signature_template_custom_field.apiname = apiname
        return self

    def custom_field_type(self, custom_field_type: Enum) -> "SignatureTemplateCustomFieldBuilder":
        self._signature_template_custom_field.custom_field_type = custom_field_type
        return self

    def used(self, used: bool) -> "SignatureTemplateCustomFieldBuilder":
        self._signature_template_custom_field.used = used
        return self

    def is_required(self, is_required: bool) -> "SignatureTemplateCustomFieldBuilder":
        self._signature_template_custom_field.is_required = is_required
        return self

    def custom_desc(self, custom_desc: str) -> "SignatureTemplateCustomFieldBuilder":
        self._signature_template_custom_field.custom_desc = custom_desc
        return self

    def common_info(self, common_info: SignatureTemplateCommonFieldInfo) -> "SignatureTemplateCustomFieldBuilder":
        self._signature_template_custom_field.common_info = common_info
        return self

    def build(self) -> "SignatureTemplateCustomField":
        return self._signature_template_custom_field
