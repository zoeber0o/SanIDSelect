# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .i18n import I18n
from .enum import Enum
from .i18n import I18n
from .custom_field_data import CustomFieldData


class DepartmentTimeline(object):
    _types = {
        "id": str,
        "version_id": str,
        "names": List[I18n],
        "sub_type": Enum,
        "parent_department_id": str,
        "manager": str,
        "code": str,
        "effective_date": str,
        "active": bool,
        "descriptions": List[I18n],
        "custom_fields": List[CustomFieldData],
    }

    def __init__(self, d=None):
        self.id: Optional[str] = None
        self.version_id: Optional[str] = None
        self.names: Optional[List[I18n]] = None
        self.sub_type: Optional[Enum] = None
        self.parent_department_id: Optional[str] = None
        self.manager: Optional[str] = None
        self.code: Optional[str] = None
        self.effective_date: Optional[str] = None
        self.active: Optional[bool] = None
        self.descriptions: Optional[List[I18n]] = None
        self.custom_fields: Optional[List[CustomFieldData]] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "DepartmentTimelineBuilder":
        return DepartmentTimelineBuilder()


class DepartmentTimelineBuilder(object):
    def __init__(self) -> None:
        self._department_timeline = DepartmentTimeline()

    def id(self, id: str) -> "DepartmentTimelineBuilder":
        self._department_timeline.id = id
        return self

    def version_id(self, version_id: str) -> "DepartmentTimelineBuilder":
        self._department_timeline.version_id = version_id
        return self

    def names(self, names: List[I18n]) -> "DepartmentTimelineBuilder":
        self._department_timeline.names = names
        return self

    def sub_type(self, sub_type: Enum) -> "DepartmentTimelineBuilder":
        self._department_timeline.sub_type = sub_type
        return self

    def parent_department_id(self, parent_department_id: str) -> "DepartmentTimelineBuilder":
        self._department_timeline.parent_department_id = parent_department_id
        return self

    def manager(self, manager: str) -> "DepartmentTimelineBuilder":
        self._department_timeline.manager = manager
        return self

    def code(self, code: str) -> "DepartmentTimelineBuilder":
        self._department_timeline.code = code
        return self

    def effective_date(self, effective_date: str) -> "DepartmentTimelineBuilder":
        self._department_timeline.effective_date = effective_date
        return self

    def active(self, active: bool) -> "DepartmentTimelineBuilder":
        self._department_timeline.active = active
        return self

    def descriptions(self, descriptions: List[I18n]) -> "DepartmentTimelineBuilder":
        self._department_timeline.descriptions = descriptions
        return self

    def custom_fields(self, custom_fields: List[CustomFieldData]) -> "DepartmentTimelineBuilder":
        self._department_timeline.custom_fields = custom_fields
        return self

    def build(self) -> "DepartmentTimeline":
        return self._department_timeline
