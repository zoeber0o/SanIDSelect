# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .profile_setting_name import ProfileSettingName
from .profile_setting_name import ProfileSettingName
from .profile_setting_phone import ProfileSettingPhone
from .profile_setting_custom_field import ProfileSettingCustomField


class ProfileSettingPersonalBasicInfo(object):
    _types = {
        "legal_name": ProfileSettingName,
        "preferred_name": ProfileSettingName,
        "additional_name": str,
        "gender": str,
        "nationality_v2": str,
        "ethnicity_race": str,
        "phone": ProfileSettingPhone,
        "email": str,
        "date_of_birth": str,
        "marital_status": str,
        "is_disabled": bool,
        "disable_card_number": str,
        "is_martyr_family": bool,
        "martyr_card_number": str,
        "is_old_alone": bool,
        "born_country_region": str,
        "political_affiliation": str,
        "native_region": str,
        "date_entered_workforce": str,
        "first_entry_time": str,
        "leave_time": str,
        "custom_fields": List[ProfileSettingCustomField],
        "additional_nationalities": List[str],
    }

    def __init__(self, d=None):
        self.legal_name: Optional[ProfileSettingName] = None
        self.preferred_name: Optional[ProfileSettingName] = None
        self.additional_name: Optional[str] = None
        self.gender: Optional[str] = None
        self.nationality_v2: Optional[str] = None
        self.ethnicity_race: Optional[str] = None
        self.phone: Optional[ProfileSettingPhone] = None
        self.email: Optional[str] = None
        self.date_of_birth: Optional[str] = None
        self.marital_status: Optional[str] = None
        self.is_disabled: Optional[bool] = None
        self.disable_card_number: Optional[str] = None
        self.is_martyr_family: Optional[bool] = None
        self.martyr_card_number: Optional[str] = None
        self.is_old_alone: Optional[bool] = None
        self.born_country_region: Optional[str] = None
        self.political_affiliation: Optional[str] = None
        self.native_region: Optional[str] = None
        self.date_entered_workforce: Optional[str] = None
        self.first_entry_time: Optional[str] = None
        self.leave_time: Optional[str] = None
        self.custom_fields: Optional[List[ProfileSettingCustomField]] = None
        self.additional_nationalities: Optional[List[str]] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "ProfileSettingPersonalBasicInfoBuilder":
        return ProfileSettingPersonalBasicInfoBuilder()


class ProfileSettingPersonalBasicInfoBuilder(object):
    def __init__(self) -> None:
        self._profile_setting_personal_basic_info = ProfileSettingPersonalBasicInfo()

    def legal_name(self, legal_name: ProfileSettingName) -> "ProfileSettingPersonalBasicInfoBuilder":
        self._profile_setting_personal_basic_info.legal_name = legal_name
        return self

    def preferred_name(self, preferred_name: ProfileSettingName) -> "ProfileSettingPersonalBasicInfoBuilder":
        self._profile_setting_personal_basic_info.preferred_name = preferred_name
        return self

    def additional_name(self, additional_name: str) -> "ProfileSettingPersonalBasicInfoBuilder":
        self._profile_setting_personal_basic_info.additional_name = additional_name
        return self

    def gender(self, gender: str) -> "ProfileSettingPersonalBasicInfoBuilder":
        self._profile_setting_personal_basic_info.gender = gender
        return self

    def nationality_v2(self, nationality_v2: str) -> "ProfileSettingPersonalBasicInfoBuilder":
        self._profile_setting_personal_basic_info.nationality_v2 = nationality_v2
        return self

    def ethnicity_race(self, ethnicity_race: str) -> "ProfileSettingPersonalBasicInfoBuilder":
        self._profile_setting_personal_basic_info.ethnicity_race = ethnicity_race
        return self

    def phone(self, phone: ProfileSettingPhone) -> "ProfileSettingPersonalBasicInfoBuilder":
        self._profile_setting_personal_basic_info.phone = phone
        return self

    def email(self, email: str) -> "ProfileSettingPersonalBasicInfoBuilder":
        self._profile_setting_personal_basic_info.email = email
        return self

    def date_of_birth(self, date_of_birth: str) -> "ProfileSettingPersonalBasicInfoBuilder":
        self._profile_setting_personal_basic_info.date_of_birth = date_of_birth
        return self

    def marital_status(self, marital_status: str) -> "ProfileSettingPersonalBasicInfoBuilder":
        self._profile_setting_personal_basic_info.marital_status = marital_status
        return self

    def is_disabled(self, is_disabled: bool) -> "ProfileSettingPersonalBasicInfoBuilder":
        self._profile_setting_personal_basic_info.is_disabled = is_disabled
        return self

    def disable_card_number(self, disable_card_number: str) -> "ProfileSettingPersonalBasicInfoBuilder":
        self._profile_setting_personal_basic_info.disable_card_number = disable_card_number
        return self

    def is_martyr_family(self, is_martyr_family: bool) -> "ProfileSettingPersonalBasicInfoBuilder":
        self._profile_setting_personal_basic_info.is_martyr_family = is_martyr_family
        return self

    def martyr_card_number(self, martyr_card_number: str) -> "ProfileSettingPersonalBasicInfoBuilder":
        self._profile_setting_personal_basic_info.martyr_card_number = martyr_card_number
        return self

    def is_old_alone(self, is_old_alone: bool) -> "ProfileSettingPersonalBasicInfoBuilder":
        self._profile_setting_personal_basic_info.is_old_alone = is_old_alone
        return self

    def born_country_region(self, born_country_region: str) -> "ProfileSettingPersonalBasicInfoBuilder":
        self._profile_setting_personal_basic_info.born_country_region = born_country_region
        return self

    def political_affiliation(self, political_affiliation: str) -> "ProfileSettingPersonalBasicInfoBuilder":
        self._profile_setting_personal_basic_info.political_affiliation = political_affiliation
        return self

    def native_region(self, native_region: str) -> "ProfileSettingPersonalBasicInfoBuilder":
        self._profile_setting_personal_basic_info.native_region = native_region
        return self

    def date_entered_workforce(self, date_entered_workforce: str) -> "ProfileSettingPersonalBasicInfoBuilder":
        self._profile_setting_personal_basic_info.date_entered_workforce = date_entered_workforce
        return self

    def first_entry_time(self, first_entry_time: str) -> "ProfileSettingPersonalBasicInfoBuilder":
        self._profile_setting_personal_basic_info.first_entry_time = first_entry_time
        return self

    def leave_time(self, leave_time: str) -> "ProfileSettingPersonalBasicInfoBuilder":
        self._profile_setting_personal_basic_info.leave_time = leave_time
        return self

    def custom_fields(self, custom_fields: List[ProfileSettingCustomField]) -> "ProfileSettingPersonalBasicInfoBuilder":
        self._profile_setting_personal_basic_info.custom_fields = custom_fields
        return self

    def additional_nationalities(self, additional_nationalities: List[str]) -> "ProfileSettingPersonalBasicInfoBuilder":
        self._profile_setting_personal_basic_info.additional_nationalities = additional_nationalities
        return self

    def build(self) -> "ProfileSettingPersonalBasicInfo":
        return self._profile_setting_personal_basic_info
