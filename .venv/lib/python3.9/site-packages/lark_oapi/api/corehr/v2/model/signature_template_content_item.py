# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .enum import Enum
from .i18n import I18n


class SignatureTemplateContentItem(object):
    _types = {
        "content_type": Enum,
        "filter_apiname": str,
        "content": str,
        "label": List[I18n],
        "content_desc": str,
    }

    def __init__(self, d=None):
        self.content_type: Optional[Enum] = None
        self.filter_apiname: Optional[str] = None
        self.content: Optional[str] = None
        self.label: Optional[List[I18n]] = None
        self.content_desc: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "SignatureTemplateContentItemBuilder":
        return SignatureTemplateContentItemBuilder()


class SignatureTemplateContentItemBuilder(object):
    def __init__(self) -> None:
        self._signature_template_content_item = SignatureTemplateContentItem()

    def content_type(self, content_type: Enum) -> "SignatureTemplateContentItemBuilder":
        self._signature_template_content_item.content_type = content_type
        return self

    def filter_apiname(self, filter_apiname: str) -> "SignatureTemplateContentItemBuilder":
        self._signature_template_content_item.filter_apiname = filter_apiname
        return self

    def content(self, content: str) -> "SignatureTemplateContentItemBuilder":
        self._signature_template_content_item.content = content
        return self

    def label(self, label: List[I18n]) -> "SignatureTemplateContentItemBuilder":
        self._signature_template_content_item.label = label
        return self

    def content_desc(self, content_desc: str) -> "SignatureTemplateContentItemBuilder":
        self._signature_template_content_item.content_desc = content_desc
        return self

    def build(self) -> "SignatureTemplateContentItem":
        return self._signature_template_content_item
