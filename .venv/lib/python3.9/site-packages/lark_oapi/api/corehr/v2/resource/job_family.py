# Code generated by Lark OpenAPI.

import io
from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.const import UTF_8, CONTENT_TYPE, APPLICATION_JSON
from lark_oapi.core import JSON
from lark_oapi.core.token import verify
from lark_oapi.core.http import Transport
from lark_oapi.core.model import Config, RequestOption, RawResponse
from lark_oapi.core.utils import Files
from requests_toolbelt import MultipartEncoder
from ..model.batch_get_job_family_request import BatchGetJobFamilyRequest
from ..model.batch_get_job_family_response import BatchGetJobFamilyResponse
from ..model.query_multi_timeline_job_family_request import QueryMultiTimelineJobFamilyRequest
from ..model.query_multi_timeline_job_family_response import QueryMultiTimelineJobFamilyResponse
from ..model.query_recent_change_job_family_request import QueryRecentChangeJobFamilyRequest
from ..model.query_recent_change_job_family_response import QueryRecentChangeJobFamilyResponse


class JobFamily(object):
    def __init__(self, config: Config) -> None:
        self.config: Config = config

    def batch_get(self, request: BatchGetJobFamilyRequest,
                  option: Optional[RequestOption] = None) -> BatchGetJobFamilyResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: BatchGetJobFamilyResponse = JSON.unmarshal(str(resp.content, UTF_8), BatchGetJobFamilyResponse)
        response.raw = resp

        return response

    async def abatch_get(self, request: BatchGetJobFamilyRequest,
                         option: Optional[RequestOption] = None) -> BatchGetJobFamilyResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: BatchGetJobFamilyResponse = JSON.unmarshal(str(resp.content, UTF_8), BatchGetJobFamilyResponse)
        response.raw = resp

        return response

    def query_multi_timeline(self, request: QueryMultiTimelineJobFamilyRequest,
                             option: Optional[RequestOption] = None) -> QueryMultiTimelineJobFamilyResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: QueryMultiTimelineJobFamilyResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                       QueryMultiTimelineJobFamilyResponse)
        response.raw = resp

        return response

    async def aquery_multi_timeline(self, request: QueryMultiTimelineJobFamilyRequest,
                                    option: Optional[RequestOption] = None) -> QueryMultiTimelineJobFamilyResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: QueryMultiTimelineJobFamilyResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                       QueryMultiTimelineJobFamilyResponse)
        response.raw = resp

        return response

    def query_recent_change(self, request: QueryRecentChangeJobFamilyRequest,
                            option: Optional[RequestOption] = None) -> QueryRecentChangeJobFamilyResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: QueryRecentChangeJobFamilyResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                      QueryRecentChangeJobFamilyResponse)
        response.raw = resp

        return response

    async def aquery_recent_change(self, request: QueryRecentChangeJobFamilyRequest,
                                   option: Optional[RequestOption] = None) -> QueryRecentChangeJobFamilyResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: QueryRecentChangeJobFamilyResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                      QueryRecentChangeJobFamilyResponse)
        response.raw = resp

        return response
