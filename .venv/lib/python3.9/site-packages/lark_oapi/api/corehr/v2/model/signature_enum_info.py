# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .signature_enum_info_label import SignatureEnumInfoLabel


class SignatureEnumInfo(object):
    _types = {
        "label": SignatureEnumInfoLabel,
        "apiname": str,
        "active": bool,
    }

    def __init__(self, d=None):
        self.label: Optional[SignatureEnumInfoLabel] = None
        self.apiname: Optional[str] = None
        self.active: Optional[bool] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "SignatureEnumInfoBuilder":
        return SignatureEnumInfoBuilder()


class SignatureEnumInfoBuilder(object):
    def __init__(self) -> None:
        self._signature_enum_info = SignatureEnumInfo()

    def label(self, label: SignatureEnumInfoLabel) -> "SignatureEnumInfoBuilder":
        self._signature_enum_info.label = label
        return self

    def apiname(self, apiname: str) -> "SignatureEnumInfoBuilder":
        self._signature_enum_info.apiname = apiname
        return self

    def active(self, active: bool) -> "SignatureEnumInfoBuilder":
        self._signature_enum_info.active = active
        return self

    def build(self) -> "SignatureEnumInfo":
        return self._signature_enum_info
