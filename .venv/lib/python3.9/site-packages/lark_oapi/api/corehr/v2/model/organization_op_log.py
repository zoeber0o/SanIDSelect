# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .operation_log_entity_field import OperationLogEntityField


class OrganizationOpLog(object):
    _types = {
        "object_id": str,
        "changes": List[OperationLogEntityField],
        "operator": str,
        "operation_type": int,
        "operation_time": str,
        "effective_time": str,
        "operation_reason": str,
        "change_reasons": List[str],
    }

    def __init__(self, d=None):
        self.object_id: Optional[str] = None
        self.changes: Optional[List[OperationLogEntityField]] = None
        self.operator: Optional[str] = None
        self.operation_type: Optional[int] = None
        self.operation_time: Optional[str] = None
        self.effective_time: Optional[str] = None
        self.operation_reason: Optional[str] = None
        self.change_reasons: Optional[List[str]] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "OrganizationOpLogBuilder":
        return OrganizationOpLogBuilder()


class OrganizationOpLogBuilder(object):
    def __init__(self) -> None:
        self._organization_op_log = OrganizationOpLog()

    def object_id(self, object_id: str) -> "OrganizationOpLogBuilder":
        self._organization_op_log.object_id = object_id
        return self

    def changes(self, changes: List[OperationLogEntityField]) -> "OrganizationOpLogBuilder":
        self._organization_op_log.changes = changes
        return self

    def operator(self, operator: str) -> "OrganizationOpLogBuilder":
        self._organization_op_log.operator = operator
        return self

    def operation_type(self, operation_type: int) -> "OrganizationOpLogBuilder":
        self._organization_op_log.operation_type = operation_type
        return self

    def operation_time(self, operation_time: str) -> "OrganizationOpLogBuilder":
        self._organization_op_log.operation_time = operation_time
        return self

    def effective_time(self, effective_time: str) -> "OrganizationOpLogBuilder":
        self._organization_op_log.effective_time = effective_time
        return self

    def operation_reason(self, operation_reason: str) -> "OrganizationOpLogBuilder":
        self._organization_op_log.operation_reason = operation_reason
        return self

    def change_reasons(self, change_reasons: List[str]) -> "OrganizationOpLogBuilder":
        self._organization_op_log.change_reasons = change_reasons
        return self

    def build(self) -> "OrganizationOpLog":
        return self._organization_op_log
