# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .enum import Enum


class SignatureTemplateCombinationFieldInfoV2(object):
    _types = {
        "total_apiname": str,
        "apiname": str,
        "source": Enum,
    }

    def __init__(self, d=None):
        self.total_apiname: Optional[str] = None
        self.apiname: Optional[str] = None
        self.source: Optional[Enum] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "SignatureTemplateCombinationFieldInfoV2Builder":
        return SignatureTemplateCombinationFieldInfoV2Builder()


class SignatureTemplateCombinationFieldInfoV2Builder(object):
    def __init__(self) -> None:
        self._signature_template_combination_field_info_v2 = SignatureTemplateCombinationFieldInfoV2()

    def total_apiname(self, total_apiname: str) -> "SignatureTemplateCombinationFieldInfoV2Builder":
        self._signature_template_combination_field_info_v2.total_apiname = total_apiname
        return self

    def apiname(self, apiname: str) -> "SignatureTemplateCombinationFieldInfoV2Builder":
        self._signature_template_combination_field_info_v2.apiname = apiname
        return self

    def source(self, source: Enum) -> "SignatureTemplateCombinationFieldInfoV2Builder":
        self._signature_template_combination_field_info_v2.source = source
        return self

    def build(self) -> "SignatureTemplateCombinationFieldInfoV2":
        return self._signature_template_combination_field_info_v2
