# Code generated by Lark OpenAPI.

import io
from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.const import UTF_8, CONTENT_TYPE, APPLICATION_JSON
from lark_oapi.core import JSON
from lark_oapi.core.token import verify
from lark_oapi.core.http import Transport
from lark_oapi.core.model import Config, RequestOption, RawResponse
from lark_oapi.core.utils import Files
from requests_toolbelt import MultipartEncoder
from ..model.create_job_change_request import CreateJobChangeRequest
from ..model.create_job_change_response import CreateJobChangeResponse
from ..model.revoke_job_change_request import RevokeJobChangeRequest
from ..model.revoke_job_change_response import RevokeJobChangeResponse
from ..model.search_job_change_request import SearchJobChangeRequest
from ..model.search_job_change_response import SearchJobChangeResponse


class JobChange(object):
    def __init__(self, config: Config) -> None:
        self.config: Config = config

    def create(self, request: CreateJobChangeRequest,
               option: Optional[RequestOption] = None) -> CreateJobChangeResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: CreateJobChangeResponse = JSON.unmarshal(str(resp.content, UTF_8), CreateJobChangeResponse)
        response.raw = resp

        return response

    async def acreate(self, request: CreateJobChangeRequest,
                      option: Optional[RequestOption] = None) -> CreateJobChangeResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: CreateJobChangeResponse = JSON.unmarshal(str(resp.content, UTF_8), CreateJobChangeResponse)
        response.raw = resp

        return response

    def revoke(self, request: RevokeJobChangeRequest,
               option: Optional[RequestOption] = None) -> RevokeJobChangeResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: RevokeJobChangeResponse = JSON.unmarshal(str(resp.content, UTF_8), RevokeJobChangeResponse)
        response.raw = resp

        return response

    async def arevoke(self, request: RevokeJobChangeRequest,
                      option: Optional[RequestOption] = None) -> RevokeJobChangeResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: RevokeJobChangeResponse = JSON.unmarshal(str(resp.content, UTF_8), RevokeJobChangeResponse)
        response.raw = resp

        return response

    def search(self, request: SearchJobChangeRequest,
               option: Optional[RequestOption] = None) -> SearchJobChangeResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: SearchJobChangeResponse = JSON.unmarshal(str(resp.content, UTF_8), SearchJobChangeResponse)
        response.raw = resp

        return response

    async def asearch(self, request: SearchJobChangeRequest,
                      option: Optional[RequestOption] = None) -> SearchJobChangeResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: SearchJobChangeResponse = JSON.unmarshal(str(resp.content, UTF_8), SearchJobChangeResponse)
        response.raw = resp

        return response
