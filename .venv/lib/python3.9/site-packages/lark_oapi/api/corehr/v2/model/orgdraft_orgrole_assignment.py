# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .orgrole_assignment_org import OrgroleAssignmentOrg


class OrgdraftOrgroleAssignment(object):
    _types = {
        "grantee_id": str,
        "management_scopes": List[OrgroleAssignmentOrg],
    }

    def __init__(self, d=None):
        self.grantee_id: Optional[str] = None
        self.management_scopes: Optional[List[OrgroleAssignmentOrg]] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "OrgdraftOrgroleAssignmentBuilder":
        return OrgdraftOrgroleAssignmentBuilder()


class OrgdraftOrgroleAssignmentBuilder(object):
    def __init__(self) -> None:
        self._orgdraft_orgrole_assignment = OrgdraftOrgroleAssignment()

    def grantee_id(self, grantee_id: str) -> "OrgdraftOrgroleAssignmentBuilder":
        self._orgdraft_orgrole_assignment.grantee_id = grantee_id
        return self

    def management_scopes(self, management_scopes: List[OrgroleAssignmentOrg]) -> "OrgdraftOrgroleAssignmentBuilder":
        self._orgdraft_orgrole_assignment.management_scopes = management_scopes
        return self

    def build(self) -> "OrgdraftOrgroleAssignment":
        return self._orgdraft_orgrole_assignment
