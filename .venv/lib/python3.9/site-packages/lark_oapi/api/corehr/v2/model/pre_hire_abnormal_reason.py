# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .i18n import I18n


class PreHireAbnormalReason(object):
    _types = {
        "descriptions": List[I18n],
    }

    def __init__(self, d=None):
        self.descriptions: Optional[List[I18n]] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "PreHireAbnormalReasonBuilder":
        return PreHireAbnormalReasonBuilder()


class PreHireAbnormalReasonBuilder(object):
    def __init__(self) -> None:
        self._pre_hire_abnormal_reason = PreHireAbnormalReason()

    def descriptions(self, descriptions: List[I18n]) -> "PreHireAbnormalReasonBuilder":
        self._pre_hire_abnormal_reason.descriptions = descriptions
        return self

    def build(self) -> "PreHireAbnormalReason":
        return self._pre_hire_abnormal_reason
