# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .signature_meta_info import SignatureMetaInfo


class SignatureTemplateRegionInfo(object):
    _types = {
        "is_global_scope": str,
        "meta_infos": List[SignatureMetaInfo],
    }

    def __init__(self, d=None):
        self.is_global_scope: Optional[str] = None
        self.meta_infos: Optional[List[SignatureMetaInfo]] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "SignatureTemplateRegionInfoBuilder":
        return SignatureTemplateRegionInfoBuilder()


class SignatureTemplateRegionInfoBuilder(object):
    def __init__(self) -> None:
        self._signature_template_region_info = SignatureTemplateRegionInfo()

    def is_global_scope(self, is_global_scope: str) -> "SignatureTemplateRegionInfoBuilder":
        self._signature_template_region_info.is_global_scope = is_global_scope
        return self

    def meta_infos(self, meta_infos: List[SignatureMetaInfo]) -> "SignatureTemplateRegionInfoBuilder":
        self._signature_template_region_info.meta_infos = meta_infos
        return self

    def build(self) -> "SignatureTemplateRegionInfo":
        return self._signature_template_region_info
