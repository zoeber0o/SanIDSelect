# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class Element(object):
    _types = {
        "tag": str,
        "element_id": str,
    }

    def __init__(self, d=None):
        self.tag: Optional[str] = None
        self.element_id: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "ElementBuilder":
        return ElementBuilder()


class ElementBuilder(object):
    def __init__(self) -> None:
        self._element = Element()

    def tag(self, tag: str) -> "ElementBuilder":
        self._element.tag = tag
        return self

    def element_id(self, element_id: str) -> "ElementBuilder":
        self._element.element_id = element_id
        return self

    def build(self) -> "Element":
        return self._element
