# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class MyAiTask(object):
    _types = {
        "user_name": str,
        "type": str,
        "node_name": str,
    }

    def __init__(self, d=None):
        self.user_name: Optional[str] = None
        self.type: Optional[str] = None
        self.node_name: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "MyAiTaskBuilder":
        return MyAiTaskBuilder()


class MyAiTaskBuilder(object):
    def __init__(self) -> None:
        self._my_ai_task = MyAiTask()

    def user_name(self, user_name: str) -> "MyAiTaskBuilder":
        self._my_ai_task.user_name = user_name
        return self

    def type(self, type: str) -> "MyAiTaskBuilder":
        self._my_ai_task.type = type
        return self

    def node_name(self, node_name: str) -> "MyAiTaskBuilder":
        self._my_ai_task.node_name = node_name
        return self

    def build(self) -> "MyAiTask":
        return self._my_ai_task
