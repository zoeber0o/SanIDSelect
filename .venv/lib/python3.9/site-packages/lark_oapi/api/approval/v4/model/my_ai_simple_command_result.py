# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class MyAiSimpleCommandResult(object):
    _types = {
        "content": str,
    }

    def __init__(self, d=None):
        self.content: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "MyAiSimpleCommandResultBuilder":
        return MyAiSimpleCommandResultBuilder()


class MyAiSimpleCommandResultBuilder(object):
    def __init__(self) -> None:
        self._my_ai_simple_command_result = MyAiSimpleCommandResult()

    def content(self, content: str) -> "MyAiSimpleCommandResultBuilder":
        self._my_ai_simple_command_result.content = content
        return self

    def build(self) -> "MyAiSimpleCommandResult":
        return self._my_ai_simple_command_result
