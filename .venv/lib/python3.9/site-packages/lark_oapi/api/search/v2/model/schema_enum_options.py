# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class SchemaEnumOptions(object):
    _types = {
        "possible_values": List[str],
    }

    def __init__(self, d=None):
        self.possible_values: Optional[List[str]] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "SchemaEnumOptionsBuilder":
        return SchemaEnumOptionsBuilder()


class SchemaEnumOptionsBuilder(object):
    def __init__(self) -> None:
        self._schema_enum_options = SchemaEnumOptions()

    def possible_values(self, possible_values: List[str]) -> "SchemaEnumOptionsBuilder":
        self._schema_enum_options.possible_values = possible_values
        return self

    def build(self) -> "SchemaEnumOptions":
        return self._schema_enum_options
