# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .lump_sum_payment_detail_for_create import LumpSumPaymentDetailForCreate


class LumpSumPaymentForCreate(object):
    _types = {
        "unique_id": str,
        "user_id": str,
        "total_amount": str,
        "binding_period": int,
        "currency_id": str,
        "issuance_frequency": int,
        "item_id": str,
        "reference_period_start_date": str,
        "reference_period_end_date": str,
        "details": List[LumpSumPaymentDetailForCreate],
        "remark": str,
    }

    def __init__(self, d=None):
        self.unique_id: Optional[str] = None
        self.user_id: Optional[str] = None
        self.total_amount: Optional[str] = None
        self.binding_period: Optional[int] = None
        self.currency_id: Optional[str] = None
        self.issuance_frequency: Optional[int] = None
        self.item_id: Optional[str] = None
        self.reference_period_start_date: Optional[str] = None
        self.reference_period_end_date: Optional[str] = None
        self.details: Optional[List[LumpSumPaymentDetailForCreate]] = None
        self.remark: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "LumpSumPaymentForCreateBuilder":
        return LumpSumPaymentForCreateBuilder()


class LumpSumPaymentForCreateBuilder(object):
    def __init__(self) -> None:
        self._lump_sum_payment_for_create = LumpSumPaymentForCreate()

    def unique_id(self, unique_id: str) -> "LumpSumPaymentForCreateBuilder":
        self._lump_sum_payment_for_create.unique_id = unique_id
        return self

    def user_id(self, user_id: str) -> "LumpSumPaymentForCreateBuilder":
        self._lump_sum_payment_for_create.user_id = user_id
        return self

    def total_amount(self, total_amount: str) -> "LumpSumPaymentForCreateBuilder":
        self._lump_sum_payment_for_create.total_amount = total_amount
        return self

    def binding_period(self, binding_period: int) -> "LumpSumPaymentForCreateBuilder":
        self._lump_sum_payment_for_create.binding_period = binding_period
        return self

    def currency_id(self, currency_id: str) -> "LumpSumPaymentForCreateBuilder":
        self._lump_sum_payment_for_create.currency_id = currency_id
        return self

    def issuance_frequency(self, issuance_frequency: int) -> "LumpSumPaymentForCreateBuilder":
        self._lump_sum_payment_for_create.issuance_frequency = issuance_frequency
        return self

    def item_id(self, item_id: str) -> "LumpSumPaymentForCreateBuilder":
        self._lump_sum_payment_for_create.item_id = item_id
        return self

    def reference_period_start_date(self, reference_period_start_date: str) -> "LumpSumPaymentForCreateBuilder":
        self._lump_sum_payment_for_create.reference_period_start_date = reference_period_start_date
        return self

    def reference_period_end_date(self, reference_period_end_date: str) -> "LumpSumPaymentForCreateBuilder":
        self._lump_sum_payment_for_create.reference_period_end_date = reference_period_end_date
        return self

    def details(self, details: List[LumpSumPaymentDetailForCreate]) -> "LumpSumPaymentForCreateBuilder":
        self._lump_sum_payment_for_create.details = details
        return self

    def remark(self, remark: str) -> "LumpSumPaymentForCreateBuilder":
        self._lump_sum_payment_for_create.remark = remark
        return self

    def build(self) -> "LumpSumPaymentForCreate":
        return self._lump_sum_payment_for_create
