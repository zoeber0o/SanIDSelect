# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class QueryArchiveRequestBody(object):
    _types = {
        "user_id_list": List[str],
        "tid_list": List[str],
        "effective_start_date": str,
        "effective_end_date": str,
    }

    def __init__(self, d=None):
        self.user_id_list: Optional[List[str]] = None
        self.tid_list: Optional[List[str]] = None
        self.effective_start_date: Optional[str] = None
        self.effective_end_date: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "QueryArchiveRequestBodyBuilder":
        return QueryArchiveRequestBodyBuilder()


class QueryArchiveRequestBodyBuilder(object):
    def __init__(self) -> None:
        self._query_archive_request_body = QueryArchiveRequestBody()

    def user_id_list(self, user_id_list: List[str]) -> "QueryArchiveRequestBodyBuilder":
        self._query_archive_request_body.user_id_list = user_id_list
        return self

    def tid_list(self, tid_list: List[str]) -> "QueryArchiveRequestBodyBuilder":
        self._query_archive_request_body.tid_list = tid_list
        return self

    def effective_start_date(self, effective_start_date: str) -> "QueryArchiveRequestBodyBuilder":
        self._query_archive_request_body.effective_start_date = effective_start_date
        return self

    def effective_end_date(self, effective_end_date: str) -> "QueryArchiveRequestBodyBuilder":
        self._query_archive_request_body.effective_end_date = effective_end_date
        return self

    def build(self) -> "QueryArchiveRequestBody":
        return self._query_archive_request_body
