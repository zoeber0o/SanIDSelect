# Code generated by Lark OpenAPI.

import io
from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.const import UTF_8, CONTENT_TYPE, APPLICATION_JSON
from lark_oapi.core import JSON
from lark_oapi.core.token import verify
from lark_oapi.core.http import Transport
from lark_oapi.core.model import Config, RequestOption, RawResponse
from lark_oapi.core.utils import Files
from requests_toolbelt import MultipartEncoder
from ..model.batch_create_recurring_payment_request import BatchCreateRecurringPaymentRequest
from ..model.batch_create_recurring_payment_response import BatchCreateRecurringPaymentResponse
from ..model.batch_remove_recurring_payment_request import BatchRemoveRecurringPaymentRequest
from ..model.batch_remove_recurring_payment_response import BatchRemoveRecurringPaymentResponse
from ..model.batch_update_recurring_payment_request import BatchUpdateRecurringPaymentRequest
from ..model.batch_update_recurring_payment_response import BatchUpdateRecurringPaymentResponse
from ..model.query_recurring_payment_request import QueryRecurringPaymentRequest
from ..model.query_recurring_payment_response import QueryRecurringPaymentResponse


class RecurringPayment(object):
    def __init__(self, config: Config) -> None:
        self.config: Config = config

    def batch_create(self, request: BatchCreateRecurringPaymentRequest,
                     option: Optional[RequestOption] = None) -> BatchCreateRecurringPaymentResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: BatchCreateRecurringPaymentResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                       BatchCreateRecurringPaymentResponse)
        response.raw = resp

        return response

    async def abatch_create(self, request: BatchCreateRecurringPaymentRequest,
                            option: Optional[RequestOption] = None) -> BatchCreateRecurringPaymentResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: BatchCreateRecurringPaymentResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                       BatchCreateRecurringPaymentResponse)
        response.raw = resp

        return response

    def batch_remove(self, request: BatchRemoveRecurringPaymentRequest,
                     option: Optional[RequestOption] = None) -> BatchRemoveRecurringPaymentResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: BatchRemoveRecurringPaymentResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                       BatchRemoveRecurringPaymentResponse)
        response.raw = resp

        return response

    async def abatch_remove(self, request: BatchRemoveRecurringPaymentRequest,
                            option: Optional[RequestOption] = None) -> BatchRemoveRecurringPaymentResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: BatchRemoveRecurringPaymentResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                       BatchRemoveRecurringPaymentResponse)
        response.raw = resp

        return response

    def batch_update(self, request: BatchUpdateRecurringPaymentRequest,
                     option: Optional[RequestOption] = None) -> BatchUpdateRecurringPaymentResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: BatchUpdateRecurringPaymentResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                       BatchUpdateRecurringPaymentResponse)
        response.raw = resp

        return response

    async def abatch_update(self, request: BatchUpdateRecurringPaymentRequest,
                            option: Optional[RequestOption] = None) -> BatchUpdateRecurringPaymentResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: BatchUpdateRecurringPaymentResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                       BatchUpdateRecurringPaymentResponse)
        response.raw = resp

        return response

    def query(self, request: QueryRecurringPaymentRequest,
              option: Optional[RequestOption] = None) -> QueryRecurringPaymentResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: QueryRecurringPaymentResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                 QueryRecurringPaymentResponse)
        response.raw = resp

        return response

    async def aquery(self, request: QueryRecurringPaymentRequest,
                     option: Optional[RequestOption] = None) -> QueryRecurringPaymentResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: QueryRecurringPaymentResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                 QueryRecurringPaymentResponse)
        response.raw = resp

        return response
