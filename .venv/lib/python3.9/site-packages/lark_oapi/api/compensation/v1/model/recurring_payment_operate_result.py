# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class RecurringPaymentOperateResult(object):
    _types = {
        "id": str,
        "unique_id": str,
        "code": int,
        "message": str,
    }

    def __init__(self, d=None):
        self.id: Optional[str] = None
        self.unique_id: Optional[str] = None
        self.code: Optional[int] = None
        self.message: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "RecurringPaymentOperateResultBuilder":
        return RecurringPaymentOperateResultBuilder()


class RecurringPaymentOperateResultBuilder(object):
    def __init__(self) -> None:
        self._recurring_payment_operate_result = RecurringPaymentOperateResult()

    def id(self, id: str) -> "RecurringPaymentOperateResultBuilder":
        self._recurring_payment_operate_result.id = id
        return self

    def unique_id(self, unique_id: str) -> "RecurringPaymentOperateResultBuilder":
        self._recurring_payment_operate_result.unique_id = unique_id
        return self

    def code(self, code: int) -> "RecurringPaymentOperateResultBuilder":
        self._recurring_payment_operate_result.code = code
        return self

    def message(self, message: str) -> "RecurringPaymentOperateResultBuilder":
        self._recurring_payment_operate_result.message = message
        return self

    def build(self) -> "RecurringPaymentOperateResult":
        return self._recurring_payment_operate_result
