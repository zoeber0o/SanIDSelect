# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.model import BaseRequest
from lark_oapi.core.enum import HttpMethod, AccessTokenType
from .query_social_archive_request_body import QuerySocialArchiveRequestBody


class QuerySocialArchiveRequest(BaseRequest):
    def __init__(self) -> None:
        super().__init__()
        self.user_id_type: Optional[str] = None
        self.request_body: Optional[QuerySocialArchiveRequestBody] = None

    @staticmethod
    def builder() -> "QuerySocialArchiveRequestBuilder":
        return QuerySocialArchiveRequestBuilder()


class QuerySocialArchiveRequestBuilder(object):

    def __init__(self) -> None:
        query_social_archive_request = QuerySocialArchiveRequest()
        query_social_archive_request.http_method = HttpMethod.POST
        query_social_archive_request.uri = "/open-apis/compensation/v1/social_archive/query"
        query_social_archive_request.token_types = {AccessTokenType.TENANT}
        self._query_social_archive_request: QuerySocialArchiveRequest = query_social_archive_request

    def user_id_type(self, user_id_type: str) -> "QuerySocialArchiveRequestBuilder":
        self._query_social_archive_request.user_id_type = user_id_type
        self._query_social_archive_request.add_query("user_id_type", user_id_type)
        return self

    def request_body(self, request_body: QuerySocialArchiveRequestBody) -> "QuerySocialArchiveRequestBuilder":
        self._query_social_archive_request.request_body = request_body
        self._query_social_archive_request.body = request_body
        return self

    def build(self) -> QuerySocialArchiveRequest:
        return self._query_social_archive_request
