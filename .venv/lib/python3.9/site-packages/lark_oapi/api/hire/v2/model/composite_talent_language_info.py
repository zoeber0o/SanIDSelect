# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .talent_customized_data_child import TalentCustomizedDataChild


class CompositeTalentLanguageInfo(object):
    _types = {
        "language": int,
        "proficiency": int,
        "customized_data_list": List[TalentCustomizedDataChild],
    }

    def __init__(self, d=None):
        self.language: Optional[int] = None
        self.proficiency: Optional[int] = None
        self.customized_data_list: Optional[List[TalentCustomizedDataChild]] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "CompositeTalentLanguageInfoBuilder":
        return CompositeTalentLanguageInfoBuilder()


class CompositeTalentLanguageInfoBuilder(object):
    def __init__(self) -> None:
        self._composite_talent_language_info = CompositeTalentLanguageInfo()

    def language(self, language: int) -> "CompositeTalentLanguageInfoBuilder":
        self._composite_talent_language_info.language = language
        return self

    def proficiency(self, proficiency: int) -> "CompositeTalentLanguageInfoBuilder":
        self._composite_talent_language_info.proficiency = proficiency
        return self

    def customized_data_list(self, customized_data_list: List[
        TalentCustomizedDataChild]) -> "CompositeTalentLanguageInfoBuilder":
        self._composite_talent_language_info.customized_data_list = customized_data_list
        return self

    def build(self) -> "CompositeTalentLanguageInfo":
        return self._composite_talent_language_info
