# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class Acceptance(object):
    _types = {
        "operator_type": int,
        "conclusion": int,
        "memo": str,
        "operate_time": str,
    }

    def __init__(self, d=None):
        self.operator_type: Optional[int] = None
        self.conclusion: Optional[int] = None
        self.memo: Optional[str] = None
        self.operate_time: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "AcceptanceBuilder":
        return AcceptanceBuilder()


class AcceptanceBuilder(object):
    def __init__(self) -> None:
        self._acceptance = Acceptance()

    def operator_type(self, operator_type: int) -> "AcceptanceBuilder":
        self._acceptance.operator_type = operator_type
        return self

    def conclusion(self, conclusion: int) -> "AcceptanceBuilder":
        self._acceptance.conclusion = conclusion
        return self

    def memo(self, memo: str) -> "AcceptanceBuilder":
        self._acceptance.memo = memo
        return self

    def operate_time(self, operate_time: str) -> "AcceptanceBuilder":
        self._acceptance.operate_time = operate_time
        return self

    def build(self) -> "Acceptance":
        return self._acceptance
