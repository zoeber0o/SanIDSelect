# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.model import BaseRequest
from lark_oapi.core.enum import HttpMethod, AccessTokenType
from .tripartite_agreement_info import TripartiteAgreementInfo


class CreateTripartiteAgreementRequest(BaseRequest):
    def __init__(self) -> None:
        super().__init__()
        self.request_body: Optional[TripartiteAgreementInfo] = None

    @staticmethod
    def builder() -> "CreateTripartiteAgreementRequestBuilder":
        return CreateTripartiteAgreementRequestBuilder()


class CreateTripartiteAgreementRequestBuilder(object):

    def __init__(self) -> None:
        create_tripartite_agreement_request = CreateTripartiteAgreementRequest()
        create_tripartite_agreement_request.http_method = HttpMethod.POST
        create_tripartite_agreement_request.uri = "/open-apis/hire/v1/tripartite_agreements"
        create_tripartite_agreement_request.token_types = {AccessTokenType.TENANT}
        self._create_tripartite_agreement_request: CreateTripartiteAgreementRequest = create_tripartite_agreement_request

    def request_body(self, request_body: TripartiteAgreementInfo) -> "CreateTripartiteAgreementRequestBuilder":
        self._create_tripartite_agreement_request.request_body = request_body
        self._create_tripartite_agreement_request.body = request_body
        return self

    def build(self) -> CreateTripartiteAgreementRequest:
        return self._create_tripartite_agreement_request
