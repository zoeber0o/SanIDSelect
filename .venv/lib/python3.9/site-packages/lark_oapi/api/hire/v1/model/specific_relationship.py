# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class SpecificRelationship(object):
    _types = {
        "relation_with_candidate": int,
        "extra": str,
    }

    def __init__(self, d=None):
        self.relation_with_candidate: Optional[int] = None
        self.extra: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "SpecificRelationshipBuilder":
        return SpecificRelationshipBuilder()


class SpecificRelationshipBuilder(object):
    def __init__(self) -> None:
        self._specific_relationship = SpecificRelationship()

    def relation_with_candidate(self, relation_with_candidate: int) -> "SpecificRelationshipBuilder":
        self._specific_relationship.relation_with_candidate = relation_with_candidate
        return self

    def extra(self, extra: str) -> "SpecificRelationshipBuilder":
        self._specific_relationship.extra = extra
        return self

    def build(self) -> "SpecificRelationship":
        return self._specific_relationship
