# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class CandidateTagFilter(object):
    _types = {
        "match_type": int,
        "candidate_tag_id": List[str],
    }

    def __init__(self, d=None):
        self.match_type: Optional[int] = None
        self.candidate_tag_id: Optional[List[str]] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "CandidateTagFilterBuilder":
        return CandidateTagFilterBuilder()


class CandidateTagFilterBuilder(object):
    def __init__(self) -> None:
        self._candidate_tag_filter = CandidateTagFilter()

    def match_type(self, match_type: int) -> "CandidateTagFilterBuilder":
        self._candidate_tag_filter.match_type = match_type
        return self

    def candidate_tag_id(self, candidate_tag_id: List[str]) -> "CandidateTagFilterBuilder":
        self._candidate_tag_filter.candidate_tag_id = candidate_tag_id
        return self

    def build(self) -> "CandidateTagFilter":
        return self._candidate_tag_filter
