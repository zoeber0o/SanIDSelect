# Code generated by Lark OpenAPI.

import io
from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.const import UTF_8, CONTENT_TYPE, APPLICATION_JSON
from lark_oapi.core import JSON
from lark_oapi.core.token import verify
from lark_oapi.core.http import Transport
from lark_oapi.core.model import Config, RequestOption, RawResponse
from lark_oapi.core.utils import Files
from requests_toolbelt import MultipartEncoder
from ..model.create_referral_account_request import CreateReferralAccountRequest
from ..model.create_referral_account_response import CreateReferralAccountResponse
from ..model.deactivate_referral_account_request import DeactivateReferralAccountRequest
from ..model.deactivate_referral_account_response import DeactivateReferralAccountResponse
from ..model.enable_referral_account_request import EnableReferralAccountRequest
from ..model.enable_referral_account_response import EnableReferralAccountResponse
from ..model.get_account_assets_referral_account_request import GetAccountAssetsReferralAccountRequest
from ..model.get_account_assets_referral_account_response import GetAccountAssetsReferralAccountResponse
from ..model.reconciliation_referral_account_request import ReconciliationReferralAccountRequest
from ..model.reconciliation_referral_account_response import ReconciliationReferralAccountResponse
from ..model.withdraw_referral_account_request import WithdrawReferralAccountRequest
from ..model.withdraw_referral_account_response import WithdrawReferralAccountResponse


class ReferralAccount(object):
    def __init__(self, config: Config) -> None:
        self.config: Config = config

    def create(self, request: CreateReferralAccountRequest,
               option: Optional[RequestOption] = None) -> CreateReferralAccountResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: CreateReferralAccountResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                 CreateReferralAccountResponse)
        response.raw = resp

        return response

    async def acreate(self, request: CreateReferralAccountRequest,
                      option: Optional[RequestOption] = None) -> CreateReferralAccountResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: CreateReferralAccountResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                 CreateReferralAccountResponse)
        response.raw = resp

        return response

    def deactivate(self, request: DeactivateReferralAccountRequest,
                   option: Optional[RequestOption] = None) -> DeactivateReferralAccountResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: DeactivateReferralAccountResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                     DeactivateReferralAccountResponse)
        response.raw = resp

        return response

    async def adeactivate(self, request: DeactivateReferralAccountRequest,
                          option: Optional[RequestOption] = None) -> DeactivateReferralAccountResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: DeactivateReferralAccountResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                     DeactivateReferralAccountResponse)
        response.raw = resp

        return response

    def enable(self, request: EnableReferralAccountRequest,
               option: Optional[RequestOption] = None) -> EnableReferralAccountResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: EnableReferralAccountResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                 EnableReferralAccountResponse)
        response.raw = resp

        return response

    async def aenable(self, request: EnableReferralAccountRequest,
                      option: Optional[RequestOption] = None) -> EnableReferralAccountResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: EnableReferralAccountResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                 EnableReferralAccountResponse)
        response.raw = resp

        return response

    def get_account_assets(self, request: GetAccountAssetsReferralAccountRequest,
                           option: Optional[RequestOption] = None) -> GetAccountAssetsReferralAccountResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: GetAccountAssetsReferralAccountResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                           GetAccountAssetsReferralAccountResponse)
        response.raw = resp

        return response

    async def aget_account_assets(self, request: GetAccountAssetsReferralAccountRequest,
                                  option: Optional[RequestOption] = None) -> GetAccountAssetsReferralAccountResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: GetAccountAssetsReferralAccountResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                           GetAccountAssetsReferralAccountResponse)
        response.raw = resp

        return response

    def reconciliation(self, request: ReconciliationReferralAccountRequest,
                       option: Optional[RequestOption] = None) -> ReconciliationReferralAccountResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: ReconciliationReferralAccountResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                         ReconciliationReferralAccountResponse)
        response.raw = resp

        return response

    async def areconciliation(self, request: ReconciliationReferralAccountRequest,
                              option: Optional[RequestOption] = None) -> ReconciliationReferralAccountResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: ReconciliationReferralAccountResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                         ReconciliationReferralAccountResponse)
        response.raw = resp

        return response

    def withdraw(self, request: WithdrawReferralAccountRequest,
                 option: Optional[RequestOption] = None) -> WithdrawReferralAccountResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: WithdrawReferralAccountResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                   WithdrawReferralAccountResponse)
        response.raw = resp

        return response

    async def awithdraw(self, request: WithdrawReferralAccountRequest,
                        option: Optional[RequestOption] = None) -> WithdrawReferralAccountResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: WithdrawReferralAccountResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                   WithdrawReferralAccountResponse)
        response.raw = resp

        return response
