# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.model import BaseRequest
from lark_oapi.core.enum import HttpMethod, AccessTokenType
from .create_website_channel_request_body import CreateWebsiteChannelRequestBody


class CreateWebsiteChannelRequest(BaseRequest):
    def __init__(self) -> None:
        super().__init__()
        self.website_id: Optional[str] = None
        self.request_body: Optional[CreateWebsiteChannelRequestBody] = None

    @staticmethod
    def builder() -> "CreateWebsiteChannelRequestBuilder":
        return CreateWebsiteChannelRequestBuilder()


class CreateWebsiteChannelRequestBuilder(object):

    def __init__(self) -> None:
        create_website_channel_request = CreateWebsiteChannelRequest()
        create_website_channel_request.http_method = HttpMethod.POST
        create_website_channel_request.uri = "/open-apis/hire/v1/websites/:website_id/channels"
        create_website_channel_request.token_types = {AccessTokenType.TENANT}
        self._create_website_channel_request: CreateWebsiteChannelRequest = create_website_channel_request

    def website_id(self, website_id: str) -> "CreateWebsiteChannelRequestBuilder":
        self._create_website_channel_request.website_id = website_id
        self._create_website_channel_request.paths["website_id"] = str(website_id)
        return self

    def request_body(self, request_body: CreateWebsiteChannelRequestBody) -> "CreateWebsiteChannelRequestBuilder":
        self._create_website_channel_request.request_body = request_body
        self._create_website_channel_request.body = request_body
        return self

    def build(self) -> CreateWebsiteChannelRequest:
        return self._create_website_channel_request
