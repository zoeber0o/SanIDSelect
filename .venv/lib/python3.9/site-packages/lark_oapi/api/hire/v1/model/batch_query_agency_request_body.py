# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .common_filter import CommonFilter


class BatchQueryAgencyRequestBody(object):
    _types = {
        "agency_supplier_id_list": List[str],
        "keyword": str,
        "filter_list": List[CommonFilter],
    }

    def __init__(self, d=None):
        self.agency_supplier_id_list: Optional[List[str]] = None
        self.keyword: Optional[str] = None
        self.filter_list: Optional[List[CommonFilter]] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "BatchQueryAgencyRequestBodyBuilder":
        return BatchQueryAgencyRequestBodyBuilder()


class BatchQueryAgencyRequestBodyBuilder(object):
    def __init__(self) -> None:
        self._batch_query_agency_request_body = BatchQueryAgencyRequestBody()

    def agency_supplier_id_list(self, agency_supplier_id_list: List[str]) -> "BatchQueryAgencyRequestBodyBuilder":
        self._batch_query_agency_request_body.agency_supplier_id_list = agency_supplier_id_list
        return self

    def keyword(self, keyword: str) -> "BatchQueryAgencyRequestBodyBuilder":
        self._batch_query_agency_request_body.keyword = keyword
        return self

    def filter_list(self, filter_list: List[CommonFilter]) -> "BatchQueryAgencyRequestBodyBuilder":
        self._batch_query_agency_request_body.filter_list = filter_list
        return self

    def build(self) -> "BatchQueryAgencyRequestBody":
        return self._batch_query_agency_request_body
