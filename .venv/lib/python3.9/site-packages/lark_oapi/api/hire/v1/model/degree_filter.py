# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class DegreeFilter(object):
    _types = {
        "hide_option": int,
        "degree": List[str],
    }

    def __init__(self, d=None):
        self.hide_option: Optional[int] = None
        self.degree: Optional[List[str]] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "DegreeFilterBuilder":
        return DegreeFilterBuilder()


class DegreeFilterBuilder(object):
    def __init__(self) -> None:
        self._degree_filter = DegreeFilter()

    def hide_option(self, hide_option: int) -> "DegreeFilterBuilder":
        self._degree_filter.hide_option = hide_option
        return self

    def degree(self, degree: List[str]) -> "DegreeFilterBuilder":
        self._degree_filter.degree = degree
        return self

    def build(self) -> "DegreeFilter":
        return self._degree_filter
