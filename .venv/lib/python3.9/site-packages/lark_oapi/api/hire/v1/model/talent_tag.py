# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .i18n import I18n
from .i18n import I18n


class TalentTag(object):
    _types = {
        "id": str,
        "name": I18n,
        "description": I18n,
        "type": int,
        "active_status": int,
    }

    def __init__(self, d=None):
        self.id: Optional[str] = None
        self.name: Optional[I18n] = None
        self.description: Optional[I18n] = None
        self.type: Optional[int] = None
        self.active_status: Optional[int] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "TalentTagBuilder":
        return TalentTagBuilder()


class TalentTagBuilder(object):
    def __init__(self) -> None:
        self._talent_tag = TalentTag()

    def id(self, id: str) -> "TalentTagBuilder":
        self._talent_tag.id = id
        return self

    def name(self, name: I18n) -> "TalentTagBuilder":
        self._talent_tag.name = name
        return self

    def description(self, description: I18n) -> "TalentTagBuilder":
        self._talent_tag.description = description
        return self

    def type(self, type: int) -> "TalentTagBuilder":
        self._talent_tag.type = type
        return self

    def active_status(self, active_status: int) -> "TalentTagBuilder":
        self._talent_tag.active_status = active_status
        return self

    def build(self) -> "TalentTag":
        return self._talent_tag
