# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class CombinedCreateTalentResponseBody(object):
    _types = {
        "talent_id": str,
        "creator_id": str,
        "creator_account_type": int,
    }

    def __init__(self, d=None):
        self.talent_id: Optional[str] = None
        self.creator_id: Optional[str] = None
        self.creator_account_type: Optional[int] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "CombinedCreateTalentResponseBodyBuilder":
        return CombinedCreateTalentResponseBodyBuilder()


class CombinedCreateTalentResponseBodyBuilder(object):
    def __init__(self) -> None:
        self._combined_create_talent_response_body = CombinedCreateTalentResponseBody()

    def talent_id(self, talent_id: str) -> "CombinedCreateTalentResponseBodyBuilder":
        self._combined_create_talent_response_body.talent_id = talent_id
        return self

    def creator_id(self, creator_id: str) -> "CombinedCreateTalentResponseBodyBuilder":
        self._combined_create_talent_response_body.creator_id = creator_id
        return self

    def creator_account_type(self, creator_account_type: int) -> "CombinedCreateTalentResponseBodyBuilder":
        self._combined_create_talent_response_body.creator_account_type = creator_account_type
        return self

    def build(self) -> "CombinedCreateTalentResponseBody":
        return self._combined_create_talent_response_body
