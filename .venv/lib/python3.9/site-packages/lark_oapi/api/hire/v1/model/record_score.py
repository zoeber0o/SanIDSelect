# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class RecordScore(object):
    _types = {
        "score": float,
        "total_score": float,
    }

    def __init__(self, d=None):
        self.score: Optional[float] = None
        self.total_score: Optional[float] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "RecordScoreBuilder":
        return RecordScoreBuilder()


class RecordScoreBuilder(object):
    def __init__(self) -> None:
        self._record_score = RecordScore()

    def score(self, score: float) -> "RecordScoreBuilder":
        self._record_score.score = score
        return self

    def total_score(self, total_score: float) -> "RecordScoreBuilder":
        self._record_score.total_score = total_score
        return self

    def build(self) -> "RecordScore":
        return self._record_score
