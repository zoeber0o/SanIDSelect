# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class InterviewAttachment(object):
    _types = {
        "file_id": str,
        "file_name": str,
        "content_type": str,
        "create_time": str,
    }

    def __init__(self, d=None):
        self.file_id: Optional[str] = None
        self.file_name: Optional[str] = None
        self.content_type: Optional[str] = None
        self.create_time: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "InterviewAttachmentBuilder":
        return InterviewAttachmentBuilder()


class InterviewAttachmentBuilder(object):
    def __init__(self) -> None:
        self._interview_attachment = InterviewAttachment()

    def file_id(self, file_id: str) -> "InterviewAttachmentBuilder":
        self._interview_attachment.file_id = file_id
        return self

    def file_name(self, file_name: str) -> "InterviewAttachmentBuilder":
        self._interview_attachment.file_name = file_name
        return self

    def content_type(self, content_type: str) -> "InterviewAttachmentBuilder":
        self._interview_attachment.content_type = content_type
        return self

    def create_time(self, create_time: str) -> "InterviewAttachmentBuilder":
        self._interview_attachment.create_time = create_time
        return self

    def build(self) -> "InterviewAttachment":
        return self._interview_attachment
