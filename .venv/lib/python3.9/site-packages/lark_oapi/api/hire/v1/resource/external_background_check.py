# Code generated by Lark OpenAPI.

import io
from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.const import UTF_8, CONTENT_TYPE, APPLICATION_JSON
from lark_oapi.core import JSON
from lark_oapi.core.token import verify
from lark_oapi.core.http import Transport
from lark_oapi.core.model import Config, RequestOption, RawResponse
from lark_oapi.core.utils import Files
from requests_toolbelt import MultipartEncoder
from ..model.batch_query_external_background_check_request import BatchQueryExternalBackgroundCheckRequest
from ..model.batch_query_external_background_check_response import BatchQueryExternalBackgroundCheckResponse
from ..model.create_external_background_check_request import CreateExternalBackgroundCheckRequest
from ..model.create_external_background_check_response import CreateExternalBackgroundCheckResponse
from ..model.delete_external_background_check_request import DeleteExternalBackgroundCheckRequest
from ..model.delete_external_background_check_response import DeleteExternalBackgroundCheckResponse
from ..model.update_external_background_check_request import UpdateExternalBackgroundCheckRequest
from ..model.update_external_background_check_response import UpdateExternalBackgroundCheckResponse


class ExternalBackgroundCheck(object):
    def __init__(self, config: Config) -> None:
        self.config: Config = config

    def batch_query(self, request: BatchQueryExternalBackgroundCheckRequest,
                    option: Optional[RequestOption] = None) -> BatchQueryExternalBackgroundCheckResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: BatchQueryExternalBackgroundCheckResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                             BatchQueryExternalBackgroundCheckResponse)
        response.raw = resp

        return response

    async def abatch_query(self, request: BatchQueryExternalBackgroundCheckRequest,
                           option: Optional[RequestOption] = None) -> BatchQueryExternalBackgroundCheckResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: BatchQueryExternalBackgroundCheckResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                             BatchQueryExternalBackgroundCheckResponse)
        response.raw = resp

        return response

    def create(self, request: CreateExternalBackgroundCheckRequest,
               option: Optional[RequestOption] = None) -> CreateExternalBackgroundCheckResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: CreateExternalBackgroundCheckResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                         CreateExternalBackgroundCheckResponse)
        response.raw = resp

        return response

    async def acreate(self, request: CreateExternalBackgroundCheckRequest,
                      option: Optional[RequestOption] = None) -> CreateExternalBackgroundCheckResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: CreateExternalBackgroundCheckResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                         CreateExternalBackgroundCheckResponse)
        response.raw = resp

        return response

    def delete(self, request: DeleteExternalBackgroundCheckRequest,
               option: Optional[RequestOption] = None) -> DeleteExternalBackgroundCheckResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: DeleteExternalBackgroundCheckResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                         DeleteExternalBackgroundCheckResponse)
        response.raw = resp

        return response

    async def adelete(self, request: DeleteExternalBackgroundCheckRequest,
                      option: Optional[RequestOption] = None) -> DeleteExternalBackgroundCheckResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: DeleteExternalBackgroundCheckResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                         DeleteExternalBackgroundCheckResponse)
        response.raw = resp

        return response

    def update(self, request: UpdateExternalBackgroundCheckRequest,
               option: Optional[RequestOption] = None) -> UpdateExternalBackgroundCheckResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 添加 content-type
        if request.body is not None:
            option.headers[CONTENT_TYPE] = f"{APPLICATION_JSON}; charset=utf-8"

        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)

        # 反序列化
        response: UpdateExternalBackgroundCheckResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                         UpdateExternalBackgroundCheckResponse)
        response.raw = resp

        return response

    async def aupdate(self, request: UpdateExternalBackgroundCheckRequest,
                      option: Optional[RequestOption] = None) -> UpdateExternalBackgroundCheckResponse:
        if option is None:
            option = RequestOption()

        # 鉴权、获取 token
        verify(self.config, request, option)

        # 发起请求
        resp: RawResponse = await Transport.aexecute(self.config, request, option)

        # 反序列化
        response: UpdateExternalBackgroundCheckResponse = JSON.unmarshal(str(resp.content, UTF_8),
                                                                         UpdateExternalBackgroundCheckResponse)
        response.raw = resp

        return response
