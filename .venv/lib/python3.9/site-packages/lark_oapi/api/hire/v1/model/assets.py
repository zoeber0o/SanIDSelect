# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .bonus_amount import BonusAmount
from .bonus_amount import BonusAmount


class Assets(object):
    _types = {
        "confirmed_bonus": BonusAmount,
        "paid_bonus": BonusAmount,
    }

    def __init__(self, d=None):
        self.confirmed_bonus: Optional[BonusAmount] = None
        self.paid_bonus: Optional[BonusAmount] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "AssetsBuilder":
        return AssetsBuilder()


class AssetsBuilder(object):
    def __init__(self) -> None:
        self._assets = Assets()

    def confirmed_bonus(self, confirmed_bonus: BonusAmount) -> "AssetsBuilder":
        self._assets.confirmed_bonus = confirmed_bonus
        return self

    def paid_bonus(self, paid_bonus: BonusAmount) -> "AssetsBuilder":
        self._assets.paid_bonus = paid_bonus
        return self

    def build(self) -> "Assets":
        return self._assets
