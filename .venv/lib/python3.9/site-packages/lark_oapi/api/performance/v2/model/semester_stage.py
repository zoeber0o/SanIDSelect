# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .i18n import I18n
from .template_stage import TemplateStage


class SemesterStage(object):
    _types = {
        "id": str,
        "name": I18n,
        "stages": List[TemplateStage],
    }

    def __init__(self, d=None):
        self.id: Optional[str] = None
        self.name: Optional[I18n] = None
        self.stages: Optional[List[TemplateStage]] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "SemesterStageBuilder":
        return SemesterStageBuilder()


class SemesterStageBuilder(object):
    def __init__(self) -> None:
        self._semester_stage = SemesterStage()

    def id(self, id: str) -> "SemesterStageBuilder":
        self._semester_stage.id = id
        return self

    def name(self, name: I18n) -> "SemesterStageBuilder":
        self._semester_stage.name = name
        return self

    def stages(self, stages: List[TemplateStage]) -> "SemesterStageBuilder":
        self._semester_stage.stages = stages
        return self

    def build(self) -> "SemesterStage":
        return self._semester_stage
