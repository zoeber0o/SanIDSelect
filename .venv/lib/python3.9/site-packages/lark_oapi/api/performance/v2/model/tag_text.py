# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class TagText(object):
    _types = {
        "tag_text_id": str,
        "tag_text": str,
        "tag_richtext": str,
    }

    def __init__(self, d=None):
        self.tag_text_id: Optional[str] = None
        self.tag_text: Optional[str] = None
        self.tag_richtext: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "TagTextBuilder":
        return TagTextBuilder()


class TagTextBuilder(object):
    def __init__(self) -> None:
        self._tag_text = TagText()

    def tag_text_id(self, tag_text_id: str) -> "TagTextBuilder":
        self._tag_text.tag_text_id = tag_text_id
        return self

    def tag_text(self, tag_text: str) -> "TagTextBuilder":
        self._tag_text.tag_text = tag_text
        return self

    def tag_richtext(self, tag_richtext: str) -> "TagTextBuilder":
        self._tag_text.tag_richtext = tag_richtext
        return self

    def build(self) -> "TagText":
        return self._tag_text
