# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.model import BaseRequest
from lark_oapi.core.enum import HttpMethod, AccessTokenType
from .query_indicator_request_body import QueryIndicatorRequestBody


class QueryIndicatorRequest(BaseRequest):
    def __init__(self) -> None:
        super().__init__()
        self.page_token: Optional[str] = None
        self.page_size: Optional[int] = None
        self.request_body: Optional[QueryIndicatorRequestBody] = None

    @staticmethod
    def builder() -> "QueryIndicatorRequestBuilder":
        return QueryIndicatorRequestBuilder()


class QueryIndicatorRequestBuilder(object):

    def __init__(self) -> None:
        query_indicator_request = QueryIndicatorRequest()
        query_indicator_request.http_method = HttpMethod.POST
        query_indicator_request.uri = "/open-apis/performance/v2/indicators/query"
        query_indicator_request.token_types = {AccessTokenType.TENANT}
        self._query_indicator_request: QueryIndicatorRequest = query_indicator_request

    def page_token(self, page_token: str) -> "QueryIndicatorRequestBuilder":
        self._query_indicator_request.page_token = page_token
        self._query_indicator_request.add_query("page_token", page_token)
        return self

    def page_size(self, page_size: int) -> "QueryIndicatorRequestBuilder":
        self._query_indicator_request.page_size = page_size
        self._query_indicator_request.add_query("page_size", page_size)
        return self

    def request_body(self, request_body: QueryIndicatorRequestBody) -> "QueryIndicatorRequestBuilder":
        self._query_indicator_request.request_body = request_body
        self._query_indicator_request.body = request_body
        return self

    def build(self) -> QueryIndicatorRequest:
        return self._query_indicator_request
