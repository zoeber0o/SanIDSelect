# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .metric_field_in_template import MetricFieldInTemplate
from .user import User
from .metric_review_rule_config import MetricReviewRuleConfig


class MetricInTemplate(object):
    _types = {
        "group_id": int,
        "metric_id": int,
        "name": str,
        "type_id": str,
        "fields": List[MetricFieldInTemplate],
        "is_from_library": bool,
        "scoring_setting_type": str,
        "data_source_inputters": List[User],
        "metric_dimension_id": int,
        "review_rule_config": MetricReviewRuleConfig,
    }

    def __init__(self, d=None):
        self.group_id: Optional[int] = None
        self.metric_id: Optional[int] = None
        self.name: Optional[str] = None
        self.type_id: Optional[str] = None
        self.fields: Optional[List[MetricFieldInTemplate]] = None
        self.is_from_library: Optional[bool] = None
        self.scoring_setting_type: Optional[str] = None
        self.data_source_inputters: Optional[List[User]] = None
        self.metric_dimension_id: Optional[int] = None
        self.review_rule_config: Optional[MetricReviewRuleConfig] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "MetricInTemplateBuilder":
        return MetricInTemplateBuilder()


class MetricInTemplateBuilder(object):
    def __init__(self) -> None:
        self._metric_in_template = MetricInTemplate()

    def group_id(self, group_id: int) -> "MetricInTemplateBuilder":
        self._metric_in_template.group_id = group_id
        return self

    def metric_id(self, metric_id: int) -> "MetricInTemplateBuilder":
        self._metric_in_template.metric_id = metric_id
        return self

    def name(self, name: str) -> "MetricInTemplateBuilder":
        self._metric_in_template.name = name
        return self

    def type_id(self, type_id: str) -> "MetricInTemplateBuilder":
        self._metric_in_template.type_id = type_id
        return self

    def fields(self, fields: List[MetricFieldInTemplate]) -> "MetricInTemplateBuilder":
        self._metric_in_template.fields = fields
        return self

    def is_from_library(self, is_from_library: bool) -> "MetricInTemplateBuilder":
        self._metric_in_template.is_from_library = is_from_library
        return self

    def scoring_setting_type(self, scoring_setting_type: str) -> "MetricInTemplateBuilder":
        self._metric_in_template.scoring_setting_type = scoring_setting_type
        return self

    def data_source_inputters(self, data_source_inputters: List[User]) -> "MetricInTemplateBuilder":
        self._metric_in_template.data_source_inputters = data_source_inputters
        return self

    def metric_dimension_id(self, metric_dimension_id: int) -> "MetricInTemplateBuilder":
        self._metric_in_template.metric_dimension_id = metric_dimension_id
        return self

    def review_rule_config(self, review_rule_config: MetricReviewRuleConfig) -> "MetricInTemplateBuilder":
        self._metric_in_template.review_rule_config = review_rule_config
        return self

    def build(self) -> "MetricInTemplate":
        return self._metric_in_template
