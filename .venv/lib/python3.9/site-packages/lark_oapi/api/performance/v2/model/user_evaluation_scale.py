# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class UserEvaluationScale(object):
    _types = {
        "indicator_id": str,
        "distribute_type": int,
        "avg_diff": str,
    }

    def __init__(self, d=None):
        self.indicator_id: Optional[str] = None
        self.distribute_type: Optional[int] = None
        self.avg_diff: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "UserEvaluationScaleBuilder":
        return UserEvaluationScaleBuilder()


class UserEvaluationScaleBuilder(object):
    def __init__(self) -> None:
        self._user_evaluation_scale = UserEvaluationScale()

    def indicator_id(self, indicator_id: str) -> "UserEvaluationScaleBuilder":
        self._user_evaluation_scale.indicator_id = indicator_id
        return self

    def distribute_type(self, distribute_type: int) -> "UserEvaluationScaleBuilder":
        self._user_evaluation_scale.distribute_type = distribute_type
        return self

    def avg_diff(self, avg_diff: str) -> "UserEvaluationScaleBuilder":
        self._user_evaluation_scale.avg_diff = avg_diff
        return self

    def build(self) -> "UserEvaluationScale":
        return self._user_evaluation_scale
