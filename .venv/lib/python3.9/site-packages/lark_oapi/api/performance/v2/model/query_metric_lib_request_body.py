# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class QueryMetricLibRequestBody(object):
    _types = {
        "is_active": bool,
        "tag_ids": List[int],
        "type_ids": List[int],
        "range_of_availability": str,
        "scoring_setting_type": str,
    }

    def __init__(self, d=None):
        self.is_active: Optional[bool] = None
        self.tag_ids: Optional[List[int]] = None
        self.type_ids: Optional[List[int]] = None
        self.range_of_availability: Optional[str] = None
        self.scoring_setting_type: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "QueryMetricLibRequestBodyBuilder":
        return QueryMetricLibRequestBodyBuilder()


class QueryMetricLibRequestBodyBuilder(object):
    def __init__(self) -> None:
        self._query_metric_lib_request_body = QueryMetricLibRequestBody()

    def is_active(self, is_active: bool) -> "QueryMetricLibRequestBodyBuilder":
        self._query_metric_lib_request_body.is_active = is_active
        return self

    def tag_ids(self, tag_ids: List[int]) -> "QueryMetricLibRequestBodyBuilder":
        self._query_metric_lib_request_body.tag_ids = tag_ids
        return self

    def type_ids(self, type_ids: List[int]) -> "QueryMetricLibRequestBodyBuilder":
        self._query_metric_lib_request_body.type_ids = type_ids
        return self

    def range_of_availability(self, range_of_availability: str) -> "QueryMetricLibRequestBodyBuilder":
        self._query_metric_lib_request_body.range_of_availability = range_of_availability
        return self

    def scoring_setting_type(self, scoring_setting_type: str) -> "QueryMetricLibRequestBodyBuilder":
        self._query_metric_lib_request_body.scoring_setting_type = scoring_setting_type
        return self

    def build(self) -> "QueryMetricLibRequestBody":
        return self._query_metric_lib_request_body
