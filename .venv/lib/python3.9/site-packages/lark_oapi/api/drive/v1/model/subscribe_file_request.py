# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.model import BaseRequest
from lark_oapi.core.enum import HttpMethod, AccessTokenType


class SubscribeFileRequest(BaseRequest):
    def __init__(self) -> None:
        super().__init__()
        self.file_type: Optional[str] = None
        self.event_type: Optional[str] = None
        self.file_token: Optional[str] = None

    @staticmethod
    def builder() -> "SubscribeFileRequestBuilder":
        return SubscribeFileRequestBuilder()


class SubscribeFileRequestBuilder(object):

    def __init__(self) -> None:
        subscribe_file_request = SubscribeFileRequest()
        subscribe_file_request.http_method = HttpMethod.POST
        subscribe_file_request.uri = "/open-apis/drive/v1/files/:file_token/subscribe"
        subscribe_file_request.token_types = {AccessTokenType.USER, AccessTokenType.TENANT}
        self._subscribe_file_request: SubscribeFileRequest = subscribe_file_request

    def file_type(self, file_type: str) -> "SubscribeFileRequestBuilder":
        self._subscribe_file_request.file_type = file_type
        self._subscribe_file_request.add_query("file_type", file_type)
        return self

    def event_type(self, event_type: str) -> "SubscribeFileRequestBuilder":
        self._subscribe_file_request.event_type = event_type
        self._subscribe_file_request.add_query("event_type", event_type)
        return self

    def file_token(self, file_token: str) -> "SubscribeFileRequestBuilder":
        self._subscribe_file_request.file_token = file_token
        self._subscribe_file_request.paths["file_token"] = str(file_token)
        return self

    def build(self) -> SubscribeFileRequest:
        return self._subscribe_file_request
