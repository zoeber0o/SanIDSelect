# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class AppRolesInfo(object):
    _types = {
        "admins": List[int],
        "developers": List[int],
        "test_users": List[int],
        "data_admins": List[int],
    }

    def __init__(self, d=None):
        self.admins: Optional[List[int]] = None
        self.developers: Optional[List[int]] = None
        self.test_users: Optional[List[int]] = None
        self.data_admins: Optional[List[int]] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "AppRolesInfoBuilder":
        return AppRolesInfoBuilder()


class AppRolesInfoBuilder(object):
    def __init__(self) -> None:
        self._app_roles_info = AppRolesInfo()

    def admins(self, admins: List[int]) -> "AppRolesInfoBuilder":
        self._app_roles_info.admins = admins
        return self

    def developers(self, developers: List[int]) -> "AppRolesInfoBuilder":
        self._app_roles_info.developers = developers
        return self

    def test_users(self, test_users: List[int]) -> "AppRolesInfoBuilder":
        self._app_roles_info.test_users = test_users
        return self

    def data_admins(self, data_admins: List[int]) -> "AppRolesInfoBuilder":
        self._app_roles_info.data_admins = data_admins
        return self

    def build(self) -> "AppRolesInfo":
        return self._app_roles_info
