# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .user_task import UserTask


class QueryUserTaskResponseBody(object):
    _types = {
        "count": str,
        "tasks": List[UserTask],
    }

    def __init__(self, d=None):
        self.count: Optional[str] = None
        self.tasks: Optional[List[UserTask]] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "QueryUserTaskResponseBodyBuilder":
        return QueryUserTaskResponseBodyBuilder()


class QueryUserTaskResponseBodyBuilder(object):
    def __init__(self) -> None:
        self._query_user_task_response_body = QueryUserTaskResponseBody()

    def count(self, count: str) -> "QueryUserTaskResponseBodyBuilder":
        self._query_user_task_response_body.count = count
        return self

    def tasks(self, tasks: List[UserTask]) -> "QueryUserTaskResponseBodyBuilder":
        self._query_user_task_response_body.tasks = tasks
        return self

    def build(self) -> "QueryUserTaskResponseBody":
        return self._query_user_task_response_body
