# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class RoleBasic(object):
    _types = {
        "api_id": str,
        "api_name": str,
        "name": Dict[str, str],
        "description": Dict[str, str],
        "enabled": bool,
        "created_by": str,
        "created_at": int,
        "updated_by": str,
        "updated_at": int,
        "created_env": str,
        "created_way": str,
    }

    def __init__(self, d=None):
        self.api_id: Optional[str] = None
        self.api_name: Optional[str] = None
        self.name: Optional[Dict[str, str]] = None
        self.description: Optional[Dict[str, str]] = None
        self.enabled: Optional[bool] = None
        self.created_by: Optional[str] = None
        self.created_at: Optional[int] = None
        self.updated_by: Optional[str] = None
        self.updated_at: Optional[int] = None
        self.created_env: Optional[str] = None
        self.created_way: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "RoleBasicBuilder":
        return RoleBasicBuilder()


class RoleBasicBuilder(object):
    def __init__(self) -> None:
        self._role_basic = RoleBasic()

    def api_id(self, api_id: str) -> "RoleBasicBuilder":
        self._role_basic.api_id = api_id
        return self

    def api_name(self, api_name: str) -> "RoleBasicBuilder":
        self._role_basic.api_name = api_name
        return self

    def name(self, name: Dict[str, str]) -> "RoleBasicBuilder":
        self._role_basic.name = name
        return self

    def description(self, description: Dict[str, str]) -> "RoleBasicBuilder":
        self._role_basic.description = description
        return self

    def enabled(self, enabled: bool) -> "RoleBasicBuilder":
        self._role_basic.enabled = enabled
        return self

    def created_by(self, created_by: str) -> "RoleBasicBuilder":
        self._role_basic.created_by = created_by
        return self

    def created_at(self, created_at: int) -> "RoleBasicBuilder":
        self._role_basic.created_at = created_at
        return self

    def updated_by(self, updated_by: str) -> "RoleBasicBuilder":
        self._role_basic.updated_by = updated_by
        return self

    def updated_at(self, updated_at: int) -> "RoleBasicBuilder":
        self._role_basic.updated_at = updated_at
        return self

    def created_env(self, created_env: str) -> "RoleBasicBuilder":
        self._role_basic.created_env = created_env
        return self

    def created_way(self, created_way: str) -> "RoleBasicBuilder":
        self._role_basic.created_way = created_way
        return self

    def build(self) -> "RoleBasic":
        return self._role_basic
