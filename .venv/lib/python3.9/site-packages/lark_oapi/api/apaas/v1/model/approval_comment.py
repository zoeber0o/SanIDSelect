# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class ApprovalComment(object):
    _types = {
        "id": str,
        "commenter": str,
        "content": str,
        "create_at": str,
        "update_at": str,
    }

    def __init__(self, d=None):
        self.id: Optional[str] = None
        self.commenter: Optional[str] = None
        self.content: Optional[str] = None
        self.create_at: Optional[str] = None
        self.update_at: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "ApprovalCommentBuilder":
        return ApprovalCommentBuilder()


class ApprovalCommentBuilder(object):
    def __init__(self) -> None:
        self._approval_comment = ApprovalComment()

    def id(self, id: str) -> "ApprovalCommentBuilder":
        self._approval_comment.id = id
        return self

    def commenter(self, commenter: str) -> "ApprovalCommentBuilder":
        self._approval_comment.commenter = commenter
        return self

    def content(self, content: str) -> "ApprovalCommentBuilder":
        self._approval_comment.content = content
        return self

    def create_at(self, create_at: str) -> "ApprovalCommentBuilder":
        self._approval_comment.create_at = create_at
        return self

    def update_at(self, update_at: str) -> "ApprovalCommentBuilder":
        self._approval_comment.update_at = update_at
        return self

    def build(self) -> "ApprovalComment":
        return self._approval_comment
