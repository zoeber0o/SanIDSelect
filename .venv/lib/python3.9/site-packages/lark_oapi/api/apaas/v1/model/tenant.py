# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class Tenant(object):
    _types = {
        "tenant_id": str,
        "tenant_name": str,
        "domain": str,
        "type": str,
    }

    def __init__(self, d=None):
        self.tenant_id: Optional[str] = None
        self.tenant_name: Optional[str] = None
        self.domain: Optional[str] = None
        self.type: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "TenantBuilder":
        return TenantBuilder()


class TenantBuilder(object):
    def __init__(self) -> None:
        self._tenant = Tenant()

    def tenant_id(self, tenant_id: str) -> "TenantBuilder":
        self._tenant.tenant_id = tenant_id
        return self

    def tenant_name(self, tenant_name: str) -> "TenantBuilder":
        self._tenant.tenant_name = tenant_name
        return self

    def domain(self, domain: str) -> "TenantBuilder":
        self._tenant.domain = domain
        return self

    def type(self, type: str) -> "TenantBuilder":
        self._tenant.type = type
        return self

    def build(self) -> "Tenant":
        return self._tenant
