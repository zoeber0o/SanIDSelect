# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class AddAssigneeApprovalTaskRequestBody(object):
    _types = {
        "user_id": str,
        "approvers": List[int],
        "add_assignee_type": str,
        "opinion": str,
    }

    def __init__(self, d=None):
        self.user_id: Optional[str] = None
        self.approvers: Optional[List[int]] = None
        self.add_assignee_type: Optional[str] = None
        self.opinion: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "AddAssigneeApprovalTaskRequestBodyBuilder":
        return AddAssigneeApprovalTaskRequestBodyBuilder()


class AddAssigneeApprovalTaskRequestBodyBuilder(object):
    def __init__(self) -> None:
        self._add_assignee_approval_task_request_body = AddAssigneeApprovalTaskRequestBody()

    def user_id(self, user_id: str) -> "AddAssigneeApprovalTaskRequestBodyBuilder":
        self._add_assignee_approval_task_request_body.user_id = user_id
        return self

    def approvers(self, approvers: List[int]) -> "AddAssigneeApprovalTaskRequestBodyBuilder":
        self._add_assignee_approval_task_request_body.approvers = approvers
        return self

    def add_assignee_type(self, add_assignee_type: str) -> "AddAssigneeApprovalTaskRequestBodyBuilder":
        self._add_assignee_approval_task_request_body.add_assignee_type = add_assignee_type
        return self

    def opinion(self, opinion: str) -> "AddAssigneeApprovalTaskRequestBodyBuilder":
        self._add_assignee_approval_task_request_body.opinion = opinion
        return self

    def build(self) -> "AddAssigneeApprovalTaskRequestBody":
        return self._add_assignee_approval_task_request_body
