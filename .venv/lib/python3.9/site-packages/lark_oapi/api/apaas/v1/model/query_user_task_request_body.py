# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class QueryUserTaskRequestBody(object):
    _types = {
        "type": str,
        "source": str,
        "limit": str,
        "offset": str,
        "start_time": str,
        "end_time": str,
        "api_ids": List[str],
        "kunlun_user_id": str,
    }

    def __init__(self, d=None):
        self.type: Optional[str] = None
        self.source: Optional[str] = None
        self.limit: Optional[str] = None
        self.offset: Optional[str] = None
        self.start_time: Optional[str] = None
        self.end_time: Optional[str] = None
        self.api_ids: Optional[List[str]] = None
        self.kunlun_user_id: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "QueryUserTaskRequestBodyBuilder":
        return QueryUserTaskRequestBodyBuilder()


class QueryUserTaskRequestBodyBuilder(object):
    def __init__(self) -> None:
        self._query_user_task_request_body = QueryUserTaskRequestBody()

    def type(self, type: str) -> "QueryUserTaskRequestBodyBuilder":
        self._query_user_task_request_body.type = type
        return self

    def source(self, source: str) -> "QueryUserTaskRequestBodyBuilder":
        self._query_user_task_request_body.source = source
        return self

    def limit(self, limit: str) -> "QueryUserTaskRequestBodyBuilder":
        self._query_user_task_request_body.limit = limit
        return self

    def offset(self, offset: str) -> "QueryUserTaskRequestBodyBuilder":
        self._query_user_task_request_body.offset = offset
        return self

    def start_time(self, start_time: str) -> "QueryUserTaskRequestBodyBuilder":
        self._query_user_task_request_body.start_time = start_time
        return self

    def end_time(self, end_time: str) -> "QueryUserTaskRequestBodyBuilder":
        self._query_user_task_request_body.end_time = end_time
        return self

    def api_ids(self, api_ids: List[str]) -> "QueryUserTaskRequestBodyBuilder":
        self._query_user_task_request_body.api_ids = api_ids
        return self

    def kunlun_user_id(self, kunlun_user_id: str) -> "QueryUserTaskRequestBodyBuilder":
        self._query_user_task_request_body.kunlun_user_id = kunlun_user_id
        return self

    def build(self) -> "QueryUserTaskRequestBody":
        return self._query_user_task_request_body
