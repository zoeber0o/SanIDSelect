# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class ObjectFieldTypeForQuery(object):
    _types = {
        "name": str,
        "settings": str,
    }

    def __init__(self, d=None):
        self.name: Optional[str] = None
        self.settings: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "ObjectFieldTypeForQueryBuilder":
        return ObjectFieldTypeForQueryBuilder()


class ObjectFieldTypeForQueryBuilder(object):
    def __init__(self) -> None:
        self._object_field_type_for_query = ObjectFieldTypeForQuery()

    def name(self, name: str) -> "ObjectFieldTypeForQueryBuilder":
        self._object_field_type_for_query.name = name
        return self

    def settings(self, settings: str) -> "ObjectFieldTypeForQueryBuilder":
        self._object_field_type_for_query.settings = settings
        return self

    def build(self) -> "ObjectFieldTypeForQuery":
        return self._object_field_type_for_query
