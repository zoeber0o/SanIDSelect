# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class RoleBasicMask(object):
    _types = {
        "api_name": str,
        "name": Dict[str, str],
        "description": Dict[str, str],
    }

    def __init__(self, d=None):
        self.api_name: Optional[str] = None
        self.name: Optional[Dict[str, str]] = None
        self.description: Optional[Dict[str, str]] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "RoleBasicMaskBuilder":
        return RoleBasicMaskBuilder()


class RoleBasicMaskBuilder(object):
    def __init__(self) -> None:
        self._role_basic_mask = RoleBasicMask()

    def api_name(self, api_name: str) -> "RoleBasicMaskBuilder":
        self._role_basic_mask.api_name = api_name
        return self

    def name(self, name: Dict[str, str]) -> "RoleBasicMaskBuilder":
        self._role_basic_mask.name = name
        return self

    def description(self, description: Dict[str, str]) -> "RoleBasicMaskBuilder":
        self._role_basic_mask.description = description
        return self

    def build(self) -> "RoleBasicMask":
        return self._role_basic_mask
