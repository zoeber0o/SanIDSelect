# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class ObjectFilter(object):
    _types = {
        "quick_query": str,
        "type": str,
    }

    def __init__(self, d=None):
        self.quick_query: Optional[str] = None
        self.type: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "ObjectFilterBuilder":
        return ObjectFilterBuilder()


class ObjectFilterBuilder(object):
    def __init__(self) -> None:
        self._object_filter = ObjectFilter()

    def quick_query(self, quick_query: str) -> "ObjectFilterBuilder":
        self._object_filter.quick_query = quick_query
        return self

    def type(self, type: str) -> "ObjectFilterBuilder":
        self._object_filter.type = type
        return self

    def build(self) -> "ObjectFilter":
        return self._object_filter
