# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .record_error import RecordError


class RecordResult(object):
    _types = {
        "success": bool,
        "primary_key_value": str,
        "errors": List[RecordError],
        "_id": str,
    }

    def __init__(self, d=None):
        self.success: Optional[bool] = None
        self.primary_key_value: Optional[str] = None
        self.errors: Optional[List[RecordError]] = None
        self._id: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "RecordResultBuilder":
        return RecordResultBuilder()


class RecordResultBuilder(object):
    def __init__(self) -> None:
        self._record_result = RecordResult()

    def success(self, success: bool) -> "RecordResultBuilder":
        self._record_result.success = success
        return self

    def primary_key_value(self, primary_key_value: str) -> "RecordResultBuilder":
        self._record_result.primary_key_value = primary_key_value
        return self

    def errors(self, errors: List[RecordError]) -> "RecordResultBuilder":
        self._record_result.errors = errors
        return self

    def _id(self, _id: str) -> "RecordResultBuilder":
        self._record_result._id = _id
        return self

    def build(self) -> "RecordResult":
        return self._record_result
