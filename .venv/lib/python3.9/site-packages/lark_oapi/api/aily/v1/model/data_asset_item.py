# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .data_asset_resource import DataAssetResource


class DataAssetItem(object):
    _types = {
        "data_asset_item_id": str,
        "api_name": str,
        "label": Dict[str, str],
        "description": Dict[str, str],
        "resources": List[DataAssetResource],
    }

    def __init__(self, d=None):
        self.data_asset_item_id: Optional[str] = None
        self.api_name: Optional[str] = None
        self.label: Optional[Dict[str, str]] = None
        self.description: Optional[Dict[str, str]] = None
        self.resources: Optional[List[DataAssetResource]] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "DataAssetItemBuilder":
        return DataAssetItemBuilder()


class DataAssetItemBuilder(object):
    def __init__(self) -> None:
        self._data_asset_item = DataAssetItem()

    def data_asset_item_id(self, data_asset_item_id: str) -> "DataAssetItemBuilder":
        self._data_asset_item.data_asset_item_id = data_asset_item_id
        return self

    def api_name(self, api_name: str) -> "DataAssetItemBuilder":
        self._data_asset_item.api_name = api_name
        return self

    def label(self, label: Dict[str, str]) -> "DataAssetItemBuilder":
        self._data_asset_item.label = label
        return self

    def description(self, description: Dict[str, str]) -> "DataAssetItemBuilder":
        self._data_asset_item.description = description
        return self

    def resources(self, resources: List[DataAssetResource]) -> "DataAssetItemBuilder":
        self._data_asset_item.resources = resources
        return self

    def build(self) -> "DataAssetItem":
        return self._data_asset_item
