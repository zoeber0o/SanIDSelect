# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class SkillBaseInfo(object):
    _types = {
        "name": str,
        "skill_id": str,
        "type": str,
        "builtin_type": str,
    }

    def __init__(self, d=None):
        self.name: Optional[str] = None
        self.skill_id: Optional[str] = None
        self.type: Optional[str] = None
        self.builtin_type: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "SkillBaseInfoBuilder":
        return SkillBaseInfoBuilder()


class SkillBaseInfoBuilder(object):
    def __init__(self) -> None:
        self._skill_base_info = SkillBaseInfo()

    def name(self, name: str) -> "SkillBaseInfoBuilder":
        self._skill_base_info.name = name
        return self

    def skill_id(self, skill_id: str) -> "SkillBaseInfoBuilder":
        self._skill_base_info.skill_id = skill_id
        return self

    def type(self, type: str) -> "SkillBaseInfoBuilder":
        self._skill_base_info.type = type
        return self

    def builtin_type(self, builtin_type: str) -> "SkillBaseInfoBuilder":
        self._skill_base_info.builtin_type = builtin_type
        return self

    def build(self) -> "SkillBaseInfo":
        return self._skill_base_info
