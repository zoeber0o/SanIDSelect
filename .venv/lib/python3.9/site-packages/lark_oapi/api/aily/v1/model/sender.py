# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class Sender(object):
    _types = {
        "id": int,
        "sender_type": str,
        "name": str,
        "desc": str,
        "sender_id": str,
    }

    def __init__(self, d=None):
        self.id: Optional[int] = None
        self.sender_type: Optional[str] = None
        self.name: Optional[str] = None
        self.desc: Optional[str] = None
        self.sender_id: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "SenderBuilder":
        return SenderBuilder()


class SenderBuilder(object):
    def __init__(self) -> None:
        self._sender = Sender()

    def id(self, id: int) -> "SenderBuilder":
        self._sender.id = id
        return self

    def sender_type(self, sender_type: str) -> "SenderBuilder":
        self._sender.sender_type = sender_type
        return self

    def name(self, name: str) -> "SenderBuilder":
        self._sender.name = name
        return self

    def desc(self, desc: str) -> "SenderBuilder":
        self._sender.desc = desc
        return self

    def sender_id(self, sender_id: str) -> "SenderBuilder":
        self._sender.sender_id = sender_id
        return self

    def build(self) -> "Sender":
        return self._sender
