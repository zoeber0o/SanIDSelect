# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .progress_item import ProgressItem


class MessageProgress(object):
    _types = {
        "progress_type": str,
        "progress_items": List[ProgressItem],
    }

    def __init__(self, d=None):
        self.progress_type: Optional[str] = None
        self.progress_items: Optional[List[ProgressItem]] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "MessageProgressBuilder":
        return MessageProgressBuilder()


class MessageProgressBuilder(object):
    def __init__(self) -> None:
        self._message_progress = MessageProgress()

    def progress_type(self, progress_type: str) -> "MessageProgressBuilder":
        self._message_progress.progress_type = progress_type
        return self

    def progress_items(self, progress_items: List[ProgressItem]) -> "MessageProgressBuilder":
        self._message_progress.progress_items = progress_items
        return self

    def build(self) -> "MessageProgress":
        return self._message_progress
