# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class MyaiDocDetail(object):
    _types = {
        "title": str,
        "url": str,
        "token": str,
        "doc_type": str,
        "extra": str,
    }

    def __init__(self, d=None):
        self.title: Optional[str] = None
        self.url: Optional[str] = None
        self.token: Optional[str] = None
        self.doc_type: Optional[str] = None
        self.extra: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "MyaiDocDetailBuilder":
        return MyaiDocDetailBuilder()


class MyaiDocDetailBuilder(object):
    def __init__(self) -> None:
        self._myai_doc_detail = MyaiDocDetail()

    def title(self, title: str) -> "MyaiDocDetailBuilder":
        self._myai_doc_detail.title = title
        return self

    def url(self, url: str) -> "MyaiDocDetailBuilder":
        self._myai_doc_detail.url = url
        return self

    def token(self, token: str) -> "MyaiDocDetailBuilder":
        self._myai_doc_detail.token = token
        return self

    def doc_type(self, doc_type: str) -> "MyaiDocDetailBuilder":
        self._myai_doc_detail.doc_type = doc_type
        return self

    def extra(self, extra: str) -> "MyaiDocDetailBuilder":
        self._myai_doc_detail.extra = extra
        return self

    def build(self) -> "MyaiDocDetail":
        return self._myai_doc_detail
