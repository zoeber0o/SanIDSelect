# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .check_in_time import CheckInTime
from .check_in_time import CheckInTime


class EventCheckIn(object):
    _types = {
        "enable_check_in": bool,
        "check_in_start_time": CheckInTime,
        "check_in_end_time": CheckInTime,
        "need_notify_attendees": bool,
    }

    def __init__(self, d=None):
        self.enable_check_in: Optional[bool] = None
        self.check_in_start_time: Optional[CheckInTime] = None
        self.check_in_end_time: Optional[CheckInTime] = None
        self.need_notify_attendees: Optional[bool] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "EventCheckInBuilder":
        return EventCheckInBuilder()


class EventCheckInBuilder(object):
    def __init__(self) -> None:
        self._event_check_in = EventCheckIn()

    def enable_check_in(self, enable_check_in: bool) -> "EventCheckInBuilder":
        self._event_check_in.enable_check_in = enable_check_in
        return self

    def check_in_start_time(self, check_in_start_time: CheckInTime) -> "EventCheckInBuilder":
        self._event_check_in.check_in_start_time = check_in_start_time
        return self

    def check_in_end_time(self, check_in_end_time: CheckInTime) -> "EventCheckInBuilder":
        self._event_check_in.check_in_end_time = check_in_end_time
        return self

    def need_notify_attendees(self, need_notify_attendees: bool) -> "EventCheckInBuilder":
        self._event_check_in.need_notify_attendees = need_notify_attendees
        return self

    def build(self) -> "EventCheckIn":
        return self._event_check_in
