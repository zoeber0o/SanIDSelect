# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .kie_entity import KieEntity


class Kie(object):
    _types = {
        "kies": List[KieEntity],
    }

    def __init__(self, d=None):
        self.kies: Optional[List[KieEntity]] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "KieBuilder":
        return KieBuilder()


class KieBuilder(object):
    def __init__(self) -> None:
        self._kie = Kie()

    def kies(self, kies: List[KieEntity]) -> "KieBuilder":
        self._kie.kies = kies
        return self

    def build(self) -> "Kie":
        return self._kie
