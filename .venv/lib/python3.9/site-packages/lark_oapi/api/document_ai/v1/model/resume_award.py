# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class ResumeAward(object):
    _types = {
        "award": str,
        "date": str,
        "description": str,
    }

    def __init__(self, d=None):
        self.award: Optional[str] = None
        self.date: Optional[str] = None
        self.description: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "ResumeAwardBuilder":
        return ResumeAwardBuilder()


class ResumeAwardBuilder(object):
    def __init__(self) -> None:
        self._resume_award = ResumeAward()

    def award(self, award: str) -> "ResumeAwardBuilder":
        self._resume_award.award = award
        return self

    def date(self, date: str) -> "ResumeAwardBuilder":
        self._resume_award.date = date
        return self

    def description(self, description: str) -> "ResumeAwardBuilder":
        self._resume_award.description = description
        return self

    def build(self) -> "ResumeAward":
        return self._resume_award
