# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .cell_value import CellValue


class RichValue(object):
    _types = {
        "values": List[list],
    }

    def __init__(self, d=None):
        self.values: Optional[List[list]] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "RichValueBuilder":
        return RichValueBuilder()


class RichValueBuilder(object):
    def __init__(self) -> None:
        self._rich_value = RichValue()

    def values(self, values: List[list]) -> "RichValueBuilder":
        self._rich_value.values = values
        return self

    def build(self) -> "RichValue":
        return self._rich_value
