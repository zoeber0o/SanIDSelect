# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .task_dependency import TaskDependency


class AddDependenciesTaskResponseBody(object):
    _types = {
        "dependencies": List[TaskDependency],
    }

    def __init__(self, d=None):
        self.dependencies: Optional[List[TaskDependency]] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "AddDependenciesTaskResponseBodyBuilder":
        return AddDependenciesTaskResponseBodyBuilder()


class AddDependenciesTaskResponseBodyBuilder(object):
    def __init__(self) -> None:
        self._add_dependencies_task_response_body = AddDependenciesTaskResponseBody()

    def dependencies(self, dependencies: List[TaskDependency]) -> "AddDependenciesTaskResponseBodyBuilder":
        self._add_dependencies_task_response_body.dependencies = dependencies
        return self

    def build(self) -> "AddDependenciesTaskResponseBody":
        return self._add_dependencies_task_response_body
