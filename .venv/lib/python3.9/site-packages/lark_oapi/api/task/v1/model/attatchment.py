# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class Attatchment(object):
    _types = {
        "guid": str,
    }

    def __init__(self, d=None):
        self.guid: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "AttatchmentBuilder":
        return AttatchmentBuilder()


class AttatchmentBuilder(object):
    def __init__(self) -> None:
        self._attatchment = Attatchment()

    def guid(self, guid: str) -> "AttatchmentBuilder":
        self._attatchment.guid = guid
        return self

    def build(self) -> "Attatchment":
        return self._attatchment
