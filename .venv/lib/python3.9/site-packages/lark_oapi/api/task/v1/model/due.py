# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class Due(object):
    _types = {
        "time": int,
        "timezone": str,
        "is_all_day": bool,
    }

    def __init__(self, d=None):
        self.time: Optional[int] = None
        self.timezone: Optional[str] = None
        self.is_all_day: Optional[bool] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "DueBuilder":
        return DueBuilder()


class DueBuilder(object):
    def __init__(self) -> None:
        self._due = Due()

    def time(self, time: int) -> "DueBuilder":
        self._due.time = time
        return self

    def timezone(self, timezone: str) -> "DueBuilder":
        self._due.timezone = timezone
        return self

    def is_all_day(self, is_all_day: bool) -> "DueBuilder":
        self._due.is_all_day = is_all_day
        return self

    def build(self) -> "Due":
        return self._due
