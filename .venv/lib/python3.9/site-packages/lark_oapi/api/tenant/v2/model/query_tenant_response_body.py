# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .tenant import Tenant


class QueryTenantResponseBody(object):
    _types = {
        "tenant": Tenant,
    }

    def __init__(self, d=None):
        self.tenant: Optional[Tenant] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "QueryTenantResponseBodyBuilder":
        return QueryTenantResponseBodyBuilder()


class QueryTenantResponseBodyBuilder(object):
    def __init__(self) -> None:
        self._query_tenant_response_body = QueryTenantResponseBody()

    def tenant(self, tenant: Tenant) -> "QueryTenantResponseBodyBuilder":
        self._query_tenant_response_body.tenant = tenant
        return self

    def build(self) -> "QueryTenantResponseBody":
        return self._query_tenant_response_body
