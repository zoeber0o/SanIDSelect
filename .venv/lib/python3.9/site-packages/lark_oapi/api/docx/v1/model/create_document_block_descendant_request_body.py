# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .block import Block


class CreateDocumentBlockDescendantRequestBody(object):
    _types = {
        "children_id": List[str],
        "index": int,
        "descendants": List[Block],
    }

    def __init__(self, d=None):
        self.children_id: Optional[List[str]] = None
        self.index: Optional[int] = None
        self.descendants: Optional[List[Block]] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "CreateDocumentBlockDescendantRequestBodyBuilder":
        return CreateDocumentBlockDescendantRequestBodyBuilder()


class CreateDocumentBlockDescendantRequestBodyBuilder(object):
    def __init__(self) -> None:
        self._create_document_block_descendant_request_body = CreateDocumentBlockDescendantRequestBody()

    def children_id(self, children_id: List[str]) -> "CreateDocumentBlockDescendantRequestBodyBuilder":
        self._create_document_block_descendant_request_body.children_id = children_id
        return self

    def index(self, index: int) -> "CreateDocumentBlockDescendantRequestBodyBuilder":
        self._create_document_block_descendant_request_body.index = index
        return self

    def descendants(self, descendants: List[Block]) -> "CreateDocumentBlockDescendantRequestBodyBuilder":
        self._create_document_block_descendant_request_body.descendants = descendants
        return self

    def build(self) -> "CreateDocumentBlockDescendantRequestBody":
        return self._create_document_block_descendant_request_body
