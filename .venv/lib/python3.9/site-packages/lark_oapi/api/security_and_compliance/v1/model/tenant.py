# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class Tenant(object):
    _types = {
        "available_geo_locations": List[str],
    }

    def __init__(self, d=None):
        self.available_geo_locations: Optional[List[str]] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "TenantBuilder":
        return TenantBuilder()


class TenantBuilder(object):
    def __init__(self) -> None:
        self._tenant = Tenant()

    def available_geo_locations(self, available_geo_locations: List[str]) -> "TenantBuilder":
        self._tenant.available_geo_locations = available_geo_locations
        return self

    def build(self) -> "Tenant":
        return self._tenant
