# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .data_summary_dimension import DataSummaryDimension
from .compensation_cost_item import CompensationCostItem


class CostAllocationReportData(object):
    _types = {
        "data_summary_dimensions": List[DataSummaryDimension],
        "compensation_cost_item": CompensationCostItem,
        "employment_id": str,
    }

    def __init__(self, d=None):
        self.data_summary_dimensions: Optional[List[DataSummaryDimension]] = None
        self.compensation_cost_item: Optional[CompensationCostItem] = None
        self.employment_id: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "CostAllocationReportDataBuilder":
        return CostAllocationReportDataBuilder()


class CostAllocationReportDataBuilder(object):
    def __init__(self) -> None:
        self._cost_allocation_report_data = CostAllocationReportData()

    def data_summary_dimensions(self, data_summary_dimensions: List[
        DataSummaryDimension]) -> "CostAllocationReportDataBuilder":
        self._cost_allocation_report_data.data_summary_dimensions = data_summary_dimensions
        return self

    def compensation_cost_item(self, compensation_cost_item: CompensationCostItem) -> "CostAllocationReportDataBuilder":
        self._cost_allocation_report_data.compensation_cost_item = compensation_cost_item
        return self

    def employment_id(self, employment_id: str) -> "CostAllocationReportDataBuilder":
        self._cost_allocation_report_data.employment_id = employment_id
        return self

    def build(self) -> "CostAllocationReportData":
        return self._cost_allocation_report_data
