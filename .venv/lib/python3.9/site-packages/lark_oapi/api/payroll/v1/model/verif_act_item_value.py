# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .id_with_name import IdWithName


class VerifActItemValue(object):
    _types = {
        "item_id": str,
        "value": str,
        "is_ref": bool,
        "name": IdWithName,
    }

    def __init__(self, d=None):
        self.item_id: Optional[str] = None
        self.value: Optional[str] = None
        self.is_ref: Optional[bool] = None
        self.name: Optional[IdWithName] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "VerifActItemValueBuilder":
        return VerifActItemValueBuilder()


class VerifActItemValueBuilder(object):
    def __init__(self) -> None:
        self._verif_act_item_value = VerifActItemValue()

    def item_id(self, item_id: str) -> "VerifActItemValueBuilder":
        self._verif_act_item_value.item_id = item_id
        return self

    def value(self, value: str) -> "VerifActItemValueBuilder":
        self._verif_act_item_value.value = value
        return self

    def is_ref(self, is_ref: bool) -> "VerifActItemValueBuilder":
        self._verif_act_item_value.is_ref = is_ref
        return self

    def name(self, name: IdWithName) -> "VerifActItemValueBuilder":
        self._verif_act_item_value.name = name
        return self

    def build(self) -> "VerifActItemValue":
        return self._verif_act_item_value
