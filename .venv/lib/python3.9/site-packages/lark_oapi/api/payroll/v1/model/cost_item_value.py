# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class CostItemValue(object):
    _types = {
        "id": str,
        "value": str,
    }

    def __init__(self, d=None):
        self.id: Optional[str] = None
        self.value: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "CostItemValueBuilder":
        return CostItemValueBuilder()


class CostItemValueBuilder(object):
    def __init__(self) -> None:
        self._cost_item_value = CostItemValue()

    def id(self, id: str) -> "CostItemValueBuilder":
        self._cost_item_value.id = id
        return self

    def value(self, value: str) -> "CostItemValueBuilder":
        self._cost_item_value.value = value
        return self

    def build(self) -> "CostItemValue":
        return self._cost_item_value
