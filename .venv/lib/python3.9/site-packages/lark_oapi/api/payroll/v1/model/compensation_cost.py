# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .i18n_content import I18nContent


class CompensationCost(object):
    _types = {
        "compensation_cost_value": str,
        "i18n_names": List[I18nContent],
    }

    def __init__(self, d=None):
        self.compensation_cost_value: Optional[str] = None
        self.i18n_names: Optional[List[I18nContent]] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "CompensationCostBuilder":
        return CompensationCostBuilder()


class CompensationCostBuilder(object):
    def __init__(self) -> None:
        self._compensation_cost = CompensationCost()

    def compensation_cost_value(self, compensation_cost_value: str) -> "CompensationCostBuilder":
        self._compensation_cost.compensation_cost_value = compensation_cost_value
        return self

    def i18n_names(self, i18n_names: List[I18nContent]) -> "CompensationCostBuilder":
        self._compensation_cost.i18n_names = i18n_names
        return self

    def build(self) -> "CompensationCost":
        return self._compensation_cost
