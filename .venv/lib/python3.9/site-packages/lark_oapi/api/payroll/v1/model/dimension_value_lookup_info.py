# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class DimensionValueLookupInfo(object):
    _types = {
        "type": str,
        "id": str,
        "code": str,
    }

    def __init__(self, d=None):
        self.type: Optional[str] = None
        self.id: Optional[str] = None
        self.code: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "DimensionValueLookupInfoBuilder":
        return DimensionValueLookupInfoBuilder()


class DimensionValueLookupInfoBuilder(object):
    def __init__(self) -> None:
        self._dimension_value_lookup_info = DimensionValueLookupInfo()

    def type(self, type: str) -> "DimensionValueLookupInfoBuilder":
        self._dimension_value_lookup_info.type = type
        return self

    def id(self, id: str) -> "DimensionValueLookupInfoBuilder":
        self._dimension_value_lookup_info.id = id
        return self

    def code(self, code: str) -> "DimensionValueLookupInfoBuilder":
        self._dimension_value_lookup_info.code = code
        return self

    def build(self) -> "DimensionValueLookupInfo":
        return self._dimension_value_lookup_info
