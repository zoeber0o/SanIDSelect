# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init
from .operator_name import OperatorName


class OperatorDetail(object):
    _types = {
        "operator_name": OperatorName,
        "tenant_name": str,
    }

    def __init__(self, d=None):
        self.operator_name: Optional[OperatorName] = None
        self.tenant_name: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "OperatorDetailBuilder":
        return OperatorDetailBuilder()


class OperatorDetailBuilder(object):
    def __init__(self) -> None:
        self._operator_detail = OperatorDetail()

    def operator_name(self, operator_name: OperatorName) -> "OperatorDetailBuilder":
        self._operator_detail.operator_name = operator_name
        return self

    def tenant_name(self, tenant_name: str) -> "OperatorDetailBuilder":
        self._operator_detail.tenant_name = tenant_name
        return self

    def build(self) -> "OperatorDetail":
        return self._operator_detail
