# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class RemedyRecord(object):
    _types = {
        "remedy_date": str,
        "punch_no": int,
        "work_type": int,
        "remedy_time": str,
    }

    def __init__(self, d=None):
        self.remedy_date: Optional[str] = None
        self.punch_no: Optional[int] = None
        self.work_type: Optional[int] = None
        self.remedy_time: Optional[str] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "RemedyRecordBuilder":
        return RemedyRecordBuilder()


class RemedyRecordBuilder(object):
    def __init__(self) -> None:
        self._remedy_record = RemedyRecord()

    def remedy_date(self, remedy_date: str) -> "RemedyRecordBuilder":
        self._remedy_record.remedy_date = remedy_date
        return self

    def punch_no(self, punch_no: int) -> "RemedyRecordBuilder":
        self._remedy_record.punch_no = punch_no
        return self

    def work_type(self, work_type: int) -> "RemedyRecordBuilder":
        self._remedy_record.work_type = work_type
        return self

    def remedy_time(self, remedy_time: str) -> "RemedyRecordBuilder":
        self._remedy_record.remedy_time = remedy_time
        return self

    def build(self) -> "RemedyRecord":
        return self._remedy_record
