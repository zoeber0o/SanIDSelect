# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class FilterItem(object):
    _types = {
        "filter_type": str,
        "filter_ids": List[str],
    }

    def __init__(self, d=None):
        self.filter_type: Optional[str] = None
        self.filter_ids: Optional[List[str]] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "FilterItemBuilder":
        return FilterItemBuilder()


class FilterItemBuilder(object):
    def __init__(self) -> None:
        self._filter_item = FilterItem()

    def filter_type(self, filter_type: str) -> "FilterItemBuilder":
        self._filter_item.filter_type = filter_type
        return self

    def filter_ids(self, filter_ids: List[str]) -> "FilterItemBuilder":
        self._filter_item.filter_ids = filter_ids
        return self

    def build(self) -> "FilterItem":
        return self._filter_item
