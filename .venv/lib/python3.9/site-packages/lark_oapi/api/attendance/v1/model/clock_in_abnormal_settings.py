# Code generated by Lark OpenAPI.

from typing import Any, Optional, Union, Dict, List, Set, IO, Callable, Type
from lark_oapi.core.construct import init


class ClockInAbnormalSettings(object):
    _types = {
        "ignore_until_latest_clockout": bool,
    }

    def __init__(self, d=None):
        self.ignore_until_latest_clockout: Optional[bool] = None
        init(self, d, self._types)

    @staticmethod
    def builder() -> "ClockInAbnormalSettingsBuilder":
        return ClockInAbnormalSettingsBuilder()


class ClockInAbnormalSettingsBuilder(object):
    def __init__(self) -> None:
        self._clock_in_abnormal_settings = ClockInAbnormalSettings()

    def ignore_until_latest_clockout(self, ignore_until_latest_clockout: bool) -> "ClockInAbnormalSettingsBuilder":
        self._clock_in_abnormal_settings.ignore_until_latest_clockout = ignore_until_latest_clockout
        return self

    def build(self) -> "ClockInAbnormalSettings":
        return self._clock_in_abnormal_settings
